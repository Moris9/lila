// Generated with bin/trans-dump.js
package lila.i18n

import I18nDb.{ Activity, Arena, Broadcast, Clas, Coach, Contact, Coordinates, Emails, Learn, Patron, PerfStat, Preferences, Search, Settings, Site, Streamer, Study, Team, Tfa }

// format: OFF
object I18nKeys {

val `playWithAFriend` = new I18nKey("playWithAFriend", Site)
val `playWithTheMachine` = new I18nKey("playWithTheMachine", Site)
val `toInviteSomeoneToPlayGiveThisUrl` = new I18nKey("toInviteSomeoneToPlayGiveThisUrl", Site)
val `gameOver` = new I18nKey("gameOver", Site)
val `waitingForOpponent` = new I18nKey("waitingForOpponent", Site)
val `waiting` = new I18nKey("waiting", Site)
val `yourTurn` = new I18nKey("yourTurn", Site)
val `aiNameLevelAiLevel` = new I18nKey("aiNameLevelAiLevel", Site)
val `level` = new I18nKey("level", Site)
val `toggleTheChat` = new I18nKey("toggleTheChat", Site)
val `toggleSound` = new I18nKey("toggleSound", Site)
val `chat` = new I18nKey("chat", Site)
val `resign` = new I18nKey("resign", Site)
val `checkmate` = new I18nKey("checkmate", Site)
val `stalemate` = new I18nKey("stalemate", Site)
val `white` = new I18nKey("white", Site)
val `black` = new I18nKey("black", Site)
val `randomColor` = new I18nKey("randomColor", Site)
val `createAGame` = new I18nKey("createAGame", Site)
val `whiteIsVictorious` = new I18nKey("whiteIsVictorious", Site)
val `blackIsVictorious` = new I18nKey("blackIsVictorious", Site)
val `youPlayTheWhitePieces` = new I18nKey("youPlayTheWhitePieces", Site)
val `youPlayTheBlackPieces` = new I18nKey("youPlayTheBlackPieces", Site)
val `itsYourTurn` = new I18nKey("itsYourTurn", Site)
val `kingInTheCenter` = new I18nKey("kingInTheCenter", Site)
val `threeChecks` = new I18nKey("threeChecks", Site)
val `raceFinished` = new I18nKey("raceFinished", Site)
val `variantEnding` = new I18nKey("variantEnding", Site)
val `newOpponent` = new I18nKey("newOpponent", Site)
val `yourOpponentWantsToPlayANewGameWithYou` = new I18nKey("yourOpponentWantsToPlayANewGameWithYou", Site)
val `joinTheGame` = new I18nKey("joinTheGame", Site)
val `whitePlays` = new I18nKey("whitePlays", Site)
val `blackPlays` = new I18nKey("blackPlays", Site)
val `opponentLeftChoices` = new I18nKey("opponentLeftChoices", Site)
val `makeYourOpponentResign` = new I18nKey("makeYourOpponentResign", Site)
val `forceResignation` = new I18nKey("forceResignation", Site)
val `forceDraw` = new I18nKey("forceDraw", Site)
val `talkInChat` = new I18nKey("talkInChat", Site)
val `theFirstPersonToComeOnThisUrlWillPlayWithYou` = new I18nKey("theFirstPersonToComeOnThisUrlWillPlayWithYou", Site)
val `whiteResigned` = new I18nKey("whiteResigned", Site)
val `blackResigned` = new I18nKey("blackResigned", Site)
val `whiteLeftTheGame` = new I18nKey("whiteLeftTheGame", Site)
val `blackLeftTheGame` = new I18nKey("blackLeftTheGame", Site)
val `shareThisUrlToLetSpectatorsSeeTheGame` = new I18nKey("shareThisUrlToLetSpectatorsSeeTheGame", Site)
val `theComputerAnalysisHasFailed` = new I18nKey("theComputerAnalysisHasFailed", Site)
val `viewTheComputerAnalysis` = new I18nKey("viewTheComputerAnalysis", Site)
val `requestAComputerAnalysis` = new I18nKey("requestAComputerAnalysis", Site)
val `computerAnalysis` = new I18nKey("computerAnalysis", Site)
val `computerAnalysisAvailable` = new I18nKey("computerAnalysisAvailable", Site)
val `analysis` = new I18nKey("analysis", Site)
val `depthX` = new I18nKey("depthX", Site)
val `usingServerAnalysis` = new I18nKey("usingServerAnalysis", Site)
val `loadingEngine` = new I18nKey("loadingEngine", Site)
val `cloudAnalysis` = new I18nKey("cloudAnalysis", Site)
val `goDeeper` = new I18nKey("goDeeper", Site)
val `showThreat` = new I18nKey("showThreat", Site)
val `inLocalBrowser` = new I18nKey("inLocalBrowser", Site)
val `toggleLocalEvaluation` = new I18nKey("toggleLocalEvaluation", Site)
val `promoteVariation` = new I18nKey("promoteVariation", Site)
val `makeMainLine` = new I18nKey("makeMainLine", Site)
val `deleteFromHere` = new I18nKey("deleteFromHere", Site)
val `forceVariation` = new I18nKey("forceVariation", Site)
val `move` = new I18nKey("move", Site)
val `variantLoss` = new I18nKey("variantLoss", Site)
val `variantWin` = new I18nKey("variantWin", Site)
val `insufficientMaterial` = new I18nKey("insufficientMaterial", Site)
val `pawnMove` = new I18nKey("pawnMove", Site)
val `capture` = new I18nKey("capture", Site)
val `close` = new I18nKey("close", Site)
val `winning` = new I18nKey("winning", Site)
val `losing` = new I18nKey("losing", Site)
val `drawn` = new I18nKey("drawn", Site)
val `unknown` = new I18nKey("unknown", Site)
val `database` = new I18nKey("database", Site)
val `whiteDrawBlack` = new I18nKey("whiteDrawBlack", Site)
val `averageRatingX` = new I18nKey("averageRatingX", Site)
val `recentGames` = new I18nKey("recentGames", Site)
val `topGames` = new I18nKey("topGames", Site)
val `masterDbExplanation` = new I18nKey("masterDbExplanation", Site)
val `noGameFound` = new I18nKey("noGameFound", Site)
val `maybeIncludeMoreGamesFromThePreferencesMenu` = new I18nKey("maybeIncludeMoreGamesFromThePreferencesMenu", Site)
val `openingExplorer` = new I18nKey("openingExplorer", Site)
val `xOpeningExplorer` = new I18nKey("xOpeningExplorer", Site)
val `winPreventedBy50MoveRule` = new I18nKey("winPreventedBy50MoveRule", Site)
val `lossSavedBy50MoveRule` = new I18nKey("lossSavedBy50MoveRule", Site)
val `allSet` = new I18nKey("allSet", Site)
val `importPgn` = new I18nKey("importPgn", Site)
val `delete` = new I18nKey("delete", Site)
val `deleteThisImportedGame` = new I18nKey("deleteThisImportedGame", Site)
val `replayMode` = new I18nKey("replayMode", Site)
val `realtimeReplay` = new I18nKey("realtimeReplay", Site)
val `byCPL` = new I18nKey("byCPL", Site)
val `openStudy` = new I18nKey("openStudy", Site)
val `enable` = new I18nKey("enable", Site)
val `bestMoveArrow` = new I18nKey("bestMoveArrow", Site)
val `evaluationGauge` = new I18nKey("evaluationGauge", Site)
val `multipleLines` = new I18nKey("multipleLines", Site)
val `cpus` = new I18nKey("cpus", Site)
val `memory` = new I18nKey("memory", Site)
val `infiniteAnalysis` = new I18nKey("infiniteAnalysis", Site)
val `removesTheDepthLimit` = new I18nKey("removesTheDepthLimit", Site)
val `blunder` = new I18nKey("blunder", Site)
val `blunders` = new I18nKey("blunders", Site)
val `mistake` = new I18nKey("mistake", Site)
val `mistakes` = new I18nKey("mistakes", Site)
val `inaccuracy` = new I18nKey("inaccuracy", Site)
val `inaccuracies` = new I18nKey("inaccuracies", Site)
val `moveTimes` = new I18nKey("moveTimes", Site)
val `flipBoard` = new I18nKey("flipBoard", Site)
val `threefoldRepetition` = new I18nKey("threefoldRepetition", Site)
val `claimADraw` = new I18nKey("claimADraw", Site)
val `offerDraw` = new I18nKey("offerDraw", Site)
val `draw` = new I18nKey("draw", Site)
val `currentGames` = new I18nKey("currentGames", Site)
val `viewInFullSize` = new I18nKey("viewInFullSize", Site)
val `logOut` = new I18nKey("logOut", Site)
val `signIn` = new I18nKey("signIn", Site)
val `youNeedAnAccountToDoThat` = new I18nKey("youNeedAnAccountToDoThat", Site)
val `signUp` = new I18nKey("signUp", Site)
val `computersAreNotAllowedToPlay` = new I18nKey("computersAreNotAllowedToPlay", Site)
val `games` = new I18nKey("games", Site)
val `forum` = new I18nKey("forum", Site)
val `xPostedInForumY` = new I18nKey("xPostedInForumY", Site)
val `latestForumPosts` = new I18nKey("latestForumPosts", Site)
val `players` = new I18nKey("players", Site)
val `friends` = new I18nKey("friends", Site)
val `discussions` = new I18nKey("discussions", Site)
val `today` = new I18nKey("today", Site)
val `yesterday` = new I18nKey("yesterday", Site)
val `minutesPerSide` = new I18nKey("minutesPerSide", Site)
val `variant` = new I18nKey("variant", Site)
val `variants` = new I18nKey("variants", Site)
val `timeControl` = new I18nKey("timeControl", Site)
val `realTime` = new I18nKey("realTime", Site)
val `correspondence` = new I18nKey("correspondence", Site)
val `daysPerTurn` = new I18nKey("daysPerTurn", Site)
val `oneDay` = new I18nKey("oneDay", Site)
val `time` = new I18nKey("time", Site)
val `rating` = new I18nKey("rating", Site)
val `ratingStats` = new I18nKey("ratingStats", Site)
val `username` = new I18nKey("username", Site)
val `usernameOrEmail` = new I18nKey("usernameOrEmail", Site)
val `changeUsername` = new I18nKey("changeUsername", Site)
val `changeUsernameNotSame` = new I18nKey("changeUsernameNotSame", Site)
val `changeUsernameDescription` = new I18nKey("changeUsernameDescription", Site)
val `password` = new I18nKey("password", Site)
val `changePassword` = new I18nKey("changePassword", Site)
val `changeEmail` = new I18nKey("changeEmail", Site)
val `email` = new I18nKey("email", Site)
val `passwordReset` = new I18nKey("passwordReset", Site)
val `forgotPassword` = new I18nKey("forgotPassword", Site)
val `rank` = new I18nKey("rank", Site)
val `rankX` = new I18nKey("rankX", Site)
val `gamesPlayed` = new I18nKey("gamesPlayed", Site)
val `cancel` = new I18nKey("cancel", Site)
val `timeOut` = new I18nKey("timeOut", Site)
val `drawOfferSent` = new I18nKey("drawOfferSent", Site)
val `drawOfferDeclined` = new I18nKey("drawOfferDeclined", Site)
val `drawOfferAccepted` = new I18nKey("drawOfferAccepted", Site)
val `drawOfferCanceled` = new I18nKey("drawOfferCanceled", Site)
val `whiteOffersDraw` = new I18nKey("whiteOffersDraw", Site)
val `blackOffersDraw` = new I18nKey("blackOffersDraw", Site)
val `whiteDeclinesDraw` = new I18nKey("whiteDeclinesDraw", Site)
val `blackDeclinesDraw` = new I18nKey("blackDeclinesDraw", Site)
val `yourOpponentOffersADraw` = new I18nKey("yourOpponentOffersADraw", Site)
val `accept` = new I18nKey("accept", Site)
val `decline` = new I18nKey("decline", Site)
val `playingRightNow` = new I18nKey("playingRightNow", Site)
val `eventInProgress` = new I18nKey("eventInProgress", Site)
val `finished` = new I18nKey("finished", Site)
val `finishesX` = new I18nKey("finishesX", Site)
val `abortGame` = new I18nKey("abortGame", Site)
val `gameAborted` = new I18nKey("gameAborted", Site)
val `standard` = new I18nKey("standard", Site)
val `unlimited` = new I18nKey("unlimited", Site)
val `mode` = new I18nKey("mode", Site)
val `casual` = new I18nKey("casual", Site)
val `rated` = new I18nKey("rated", Site)
val `casualTournament` = new I18nKey("casualTournament", Site)
val `ratedTournament` = new I18nKey("ratedTournament", Site)
val `thisGameIsRated` = new I18nKey("thisGameIsRated", Site)
val `rematch` = new I18nKey("rematch", Site)
val `rematchOfferSent` = new I18nKey("rematchOfferSent", Site)
val `rematchOfferSentWhite` = new I18nKey("rematchOfferSentWhite", Site)
val `rematchOfferSentBlack` = new I18nKey("rematchOfferSentBlack", Site)
val `rematchOfferAccepted` = new I18nKey("rematchOfferAccepted", Site)
val `rematchOfferCanceled` = new I18nKey("rematchOfferCanceled", Site)
val `rematchOfferDeclined` = new I18nKey("rematchOfferDeclined", Site)
val `cancelRematchOffer` = new I18nKey("cancelRematchOffer", Site)
val `viewRematch` = new I18nKey("viewRematch", Site)
val `play` = new I18nKey("play", Site)
val `inbox` = new I18nKey("inbox", Site)
val `chatRoom` = new I18nKey("chatRoom", Site)
val `loginToChat` = new I18nKey("loginToChat", Site)
val `youHaveBeenTimedOut` = new I18nKey("youHaveBeenTimedOut", Site)
val `spectatorRoom` = new I18nKey("spectatorRoom", Site)
val `composeMessage` = new I18nKey("composeMessage", Site)
val `noNewMessages` = new I18nKey("noNewMessages", Site)
val `subject` = new I18nKey("subject", Site)
val `recipient` = new I18nKey("recipient", Site)
val `send` = new I18nKey("send", Site)
val `incrementInSeconds` = new I18nKey("incrementInSeconds", Site)
val `freeOnlineChess` = new I18nKey("freeOnlineChess", Site)
val `spectators` = new I18nKey("spectators", Site)
val `exportGames` = new I18nKey("exportGames", Site)
val `ratingRange` = new I18nKey("ratingRange", Site)
val `thisPlayerUsesChessComputerAssistance` = new I18nKey("thisPlayerUsesChessComputerAssistance", Site)
val `thisPlayerArtificiallyIncreasesTheirRating` = new I18nKey("thisPlayerArtificiallyIncreasesTheirRating", Site)
val `openingExplorerAndTablebase` = new I18nKey("openingExplorerAndTablebase", Site)
val `takeback` = new I18nKey("takeback", Site)
val `proposeATakeback` = new I18nKey("proposeATakeback", Site)
val `takebackPropositionSent` = new I18nKey("takebackPropositionSent", Site)
val `takebackPropositionDeclined` = new I18nKey("takebackPropositionDeclined", Site)
val `takebackPropositionAccepted` = new I18nKey("takebackPropositionAccepted", Site)
val `takebackPropositionCanceled` = new I18nKey("takebackPropositionCanceled", Site)
val `yourOpponentProposesATakeback` = new I18nKey("yourOpponentProposesATakeback", Site)
val `bookmarkThisGame` = new I18nKey("bookmarkThisGame", Site)
val `tournament` = new I18nKey("tournament", Site)
val `tournaments` = new I18nKey("tournaments", Site)
val `tournamentPoints` = new I18nKey("tournamentPoints", Site)
val `viewTournament` = new I18nKey("viewTournament", Site)
val `backToTournament` = new I18nKey("backToTournament", Site)
val `thematic` = new I18nKey("thematic", Site)
val `yourPerfRatingIsProvisional` = new I18nKey("yourPerfRatingIsProvisional", Site)
val `yourPerfRatingIsTooHigh` = new I18nKey("yourPerfRatingIsTooHigh", Site)
val `yourTopWeeklyPerfRatingIsTooHigh` = new I18nKey("yourTopWeeklyPerfRatingIsTooHigh", Site)
val `yourPerfRatingIsTooLow` = new I18nKey("yourPerfRatingIsTooLow", Site)
val `ratedMoreThanInPerf` = new I18nKey("ratedMoreThanInPerf", Site)
val `ratedLessThanInPerf` = new I18nKey("ratedLessThanInPerf", Site)
val `mustBeInTeam` = new I18nKey("mustBeInTeam", Site)
val `youAreNotInTeam` = new I18nKey("youAreNotInTeam", Site)
val `backToGame` = new I18nKey("backToGame", Site)
val `siteDescription` = new I18nKey("siteDescription", Site)
val `xJoinedTeamY` = new I18nKey("xJoinedTeamY", Site)
val `xCreatedTeamY` = new I18nKey("xCreatedTeamY", Site)
val `xStartedStreaming` = new I18nKey("xStartedStreaming", Site)
val `averageElo` = new I18nKey("averageElo", Site)
val `location` = new I18nKey("location", Site)
val `filterGames` = new I18nKey("filterGames", Site)
val `reset` = new I18nKey("reset", Site)
val `apply` = new I18nKey("apply", Site)
val `leaderboard` = new I18nKey("leaderboard", Site)
val `pasteTheFenStringHere` = new I18nKey("pasteTheFenStringHere", Site)
val `pasteThePgnStringHere` = new I18nKey("pasteThePgnStringHere", Site)
val `fromPosition` = new I18nKey("fromPosition", Site)
val `continueFromHere` = new I18nKey("continueFromHere", Site)
val `toStudy` = new I18nKey("toStudy", Site)
val `importGame` = new I18nKey("importGame", Site)
val `importGameExplanation` = new I18nKey("importGameExplanation", Site)
val `thisIsAChessCaptcha` = new I18nKey("thisIsAChessCaptcha", Site)
val `clickOnTheBoardToMakeYourMove` = new I18nKey("clickOnTheBoardToMakeYourMove", Site)
val `captcha.fail` = new I18nKey("captcha.fail", Site)
val `notACheckmate` = new I18nKey("notACheckmate", Site)
val `whiteCheckmatesInOneMove` = new I18nKey("whiteCheckmatesInOneMove", Site)
val `blackCheckmatesInOneMove` = new I18nKey("blackCheckmatesInOneMove", Site)
val `retry` = new I18nKey("retry", Site)
val `reconnecting` = new I18nKey("reconnecting", Site)
val `noFriendsOnline` = new I18nKey("noFriendsOnline", Site)
val `findFriends` = new I18nKey("findFriends", Site)
val `favoriteOpponents` = new I18nKey("favoriteOpponents", Site)
val `follow` = new I18nKey("follow", Site)
val `following` = new I18nKey("following", Site)
val `unfollow` = new I18nKey("unfollow", Site)
val `block` = new I18nKey("block", Site)
val `blocked` = new I18nKey("blocked", Site)
val `unblock` = new I18nKey("unblock", Site)
val `followsYou` = new I18nKey("followsYou", Site)
val `xStartedFollowingY` = new I18nKey("xStartedFollowingY", Site)
val `more` = new I18nKey("more", Site)
val `memberSince` = new I18nKey("memberSince", Site)
val `lastSeenActive` = new I18nKey("lastSeenActive", Site)
val `challengeToPlay` = new I18nKey("challengeToPlay", Site)
val `player` = new I18nKey("player", Site)
val `list` = new I18nKey("list", Site)
val `graph` = new I18nKey("graph", Site)
val `required` = new I18nKey("required", Site)
val `openTournaments` = new I18nKey("openTournaments", Site)
val `duration` = new I18nKey("duration", Site)
val `winner` = new I18nKey("winner", Site)
val `standing` = new I18nKey("standing", Site)
val `createANewTournament` = new I18nKey("createANewTournament", Site)
val `tournamentCalendar` = new I18nKey("tournamentCalendar", Site)
val `conditionOfEntry` = new I18nKey("conditionOfEntry", Site)
val `advancedSettings` = new I18nKey("advancedSettings", Site)
val `safeTournamentName` = new I18nKey("safeTournamentName", Site)
val `inappropriateNameWarning` = new I18nKey("inappropriateNameWarning", Site)
val `emptyTournamentName` = new I18nKey("emptyTournamentName", Site)
val `recommendNotTouching` = new I18nKey("recommendNotTouching", Site)
val `fewerPlayers` = new I18nKey("fewerPlayers", Site)
val `showAdvancedSettings` = new I18nKey("showAdvancedSettings", Site)
val `makePrivateTournament` = new I18nKey("makePrivateTournament", Site)
val `join` = new I18nKey("join", Site)
val `withdraw` = new I18nKey("withdraw", Site)
val `points` = new I18nKey("points", Site)
val `wins` = new I18nKey("wins", Site)
val `losses` = new I18nKey("losses", Site)
val `winStreak` = new I18nKey("winStreak", Site)
val `createdBy` = new I18nKey("createdBy", Site)
val `tournamentIsStarting` = new I18nKey("tournamentIsStarting", Site)
val `tournamentPairingsAreNowClosed` = new I18nKey("tournamentPairingsAreNowClosed", Site)
val `standByX` = new I18nKey("standByX", Site)
val `youArePlaying` = new I18nKey("youArePlaying", Site)
val `winRate` = new I18nKey("winRate", Site)
val `berserkRate` = new I18nKey("berserkRate", Site)
val `performance` = new I18nKey("performance", Site)
val `tournamentComplete` = new I18nKey("tournamentComplete", Site)
val `movesPlayed` = new I18nKey("movesPlayed", Site)
val `whiteWins` = new I18nKey("whiteWins", Site)
val `blackWins` = new I18nKey("blackWins", Site)
val `draws` = new I18nKey("draws", Site)
val `nextXTournament` = new I18nKey("nextXTournament", Site)
val `viewMoreTournaments` = new I18nKey("viewMoreTournaments", Site)
val `averageOpponent` = new I18nKey("averageOpponent", Site)
val `membersOnly` = new I18nKey("membersOnly", Site)
val `boardEditor` = new I18nKey("boardEditor", Site)
val `setTheBoard` = new I18nKey("setTheBoard", Site)
val `popularOpenings` = new I18nKey("popularOpenings", Site)
val `startPosition` = new I18nKey("startPosition", Site)
val `clearBoard` = new I18nKey("clearBoard", Site)
val `savePosition` = new I18nKey("savePosition", Site)
val `loadPosition` = new I18nKey("loadPosition", Site)
val `isPrivate` = new I18nKey("isPrivate", Site)
val `reportXToModerators` = new I18nKey("reportXToModerators", Site)
val `profileCompletion` = new I18nKey("profileCompletion", Site)
val `xRating` = new I18nKey("xRating", Site)
val `ifNoneLeaveEmpty` = new I18nKey("ifNoneLeaveEmpty", Site)
val `gameCompletionRate` = new I18nKey("gameCompletionRate", Site)
val `profile` = new I18nKey("profile", Site)
val `editProfile` = new I18nKey("editProfile", Site)
val `firstName` = new I18nKey("firstName", Site)
val `lastName` = new I18nKey("lastName", Site)
val `biography` = new I18nKey("biography", Site)
val `country` = new I18nKey("country", Site)
val `socialMediaLinks` = new I18nKey("socialMediaLinks", Site)
val `inlineNotation` = new I18nKey("inlineNotation", Site)
val `watchLichessTV` = new I18nKey("watchLichessTV", Site)
val `previouslyOnLichessTV` = new I18nKey("previouslyOnLichessTV", Site)
val `onlinePlayers` = new I18nKey("onlinePlayers", Site)
val `activeToday` = new I18nKey("activeToday", Site)
val `activePlayers` = new I18nKey("activePlayers", Site)
val `bewareTheGameIsRatedButHasNoClock` = new I18nKey("bewareTheGameIsRatedButHasNoClock", Site)
val `yourPuzzleRatingX` = new I18nKey("yourPuzzleRatingX", Site)
val `findTheBestMoveForWhite` = new I18nKey("findTheBestMoveForWhite", Site)
val `findTheBestMoveForBlack` = new I18nKey("findTheBestMoveForBlack", Site)
val `toTrackYourProgress` = new I18nKey("toTrackYourProgress", Site)
val `puzzleId` = new I18nKey("puzzleId", Site)
val `puzzleOfTheDay` = new I18nKey("puzzleOfTheDay", Site)
val `clickToSolve` = new I18nKey("clickToSolve", Site)
val `goodMove` = new I18nKey("goodMove", Site)
val `butYouCanDoBetter` = new I18nKey("butYouCanDoBetter", Site)
val `bestMove` = new I18nKey("bestMove", Site)
val `keepGoing` = new I18nKey("keepGoing", Site)
val `puzzleFailed` = new I18nKey("puzzleFailed", Site)
val `butYouCanKeepTrying` = new I18nKey("butYouCanKeepTrying", Site)
val `success` = new I18nKey("success", Site)
val `wasThisPuzzleAnyGood` = new I18nKey("wasThisPuzzleAnyGood", Site)
val `pleaseVotePuzzle` = new I18nKey("pleaseVotePuzzle", Site)
val `thankYou` = new I18nKey("thankYou", Site)
val `ratingX` = new I18nKey("ratingX", Site)
val `hidden` = new I18nKey("hidden", Site)
val `fromGameLink` = new I18nKey("fromGameLink", Site)
val `continueTraining` = new I18nKey("continueTraining", Site)
val `retryThisPuzzle` = new I18nKey("retryThisPuzzle", Site)
val `thisPuzzleIsCorrect` = new I18nKey("thisPuzzleIsCorrect", Site)
val `thisPuzzleIsWrong` = new I18nKey("thisPuzzleIsWrong", Site)
val `automaticallyProceedToNextGameAfterMoving` = new I18nKey("automaticallyProceedToNextGameAfterMoving", Site)
val `autoSwitch` = new I18nKey("autoSwitch", Site)
val `puzzles` = new I18nKey("puzzles", Site)
val `latestUpdates` = new I18nKey("latestUpdates", Site)
val `tournamentWinners` = new I18nKey("tournamentWinners", Site)
val `name` = new I18nKey("name", Site)
val `description` = new I18nKey("description", Site)
val `no` = new I18nKey("no", Site)
val `yes` = new I18nKey("yes", Site)
val `help` = new I18nKey("help", Site)
val `createANewTopic` = new I18nKey("createANewTopic", Site)
val `topics` = new I18nKey("topics", Site)
val `posts` = new I18nKey("posts", Site)
val `lastPost` = new I18nKey("lastPost", Site)
val `views` = new I18nKey("views", Site)
val `replies` = new I18nKey("replies", Site)
val `replyToThisTopic` = new I18nKey("replyToThisTopic", Site)
val `reply` = new I18nKey("reply", Site)
val `message` = new I18nKey("message", Site)
val `createTheTopic` = new I18nKey("createTheTopic", Site)
val `reportAUser` = new I18nKey("reportAUser", Site)
val `user` = new I18nKey("user", Site)
val `reason` = new I18nKey("reason", Site)
val `whatIsIheMatter` = new I18nKey("whatIsIheMatter", Site)
val `cheat` = new I18nKey("cheat", Site)
val `insult` = new I18nKey("insult", Site)
val `troll` = new I18nKey("troll", Site)
val `other` = new I18nKey("other", Site)
val `reportDescriptionHelp` = new I18nKey("reportDescriptionHelp", Site)
val `error.provideOneCheatedGameLink` = new I18nKey("error.provideOneCheatedGameLink", Site)
val `by` = new I18nKey("by", Site)
val `thisTopicIsNowClosed` = new I18nKey("thisTopicIsNowClosed", Site)
val `theming` = new I18nKey("theming", Site)
val `blog` = new I18nKey("blog", Site)
val `questionsAndAnswers` = new I18nKey("questionsAndAnswers", Site)
val `notes` = new I18nKey("notes", Site)
val `typePrivateNotesHere` = new I18nKey("typePrivateNotesHere", Site)
val `invalidUsernameOrPassword` = new I18nKey("invalidUsernameOrPassword", Site)
val `incorrectPassword` = new I18nKey("incorrectPassword", Site)
val `invalidAuthenticationCode` = new I18nKey("invalidAuthenticationCode", Site)
val `emailMeALink` = new I18nKey("emailMeALink", Site)
val `currentPassword` = new I18nKey("currentPassword", Site)
val `newPassword` = new I18nKey("newPassword", Site)
val `newPasswordAgain` = new I18nKey("newPasswordAgain", Site)
val `clockInitialTime` = new I18nKey("clockInitialTime", Site)
val `clockIncrement` = new I18nKey("clockIncrement", Site)
val `privacy` = new I18nKey("privacy", Site)
val `letOtherPlayersFollowYou` = new I18nKey("letOtherPlayersFollowYou", Site)
val `letOtherPlayersChallengeYou` = new I18nKey("letOtherPlayersChallengeYou", Site)
val `letOtherPlayersInviteYouToStudy` = new I18nKey("letOtherPlayersInviteYouToStudy", Site)
val `sound` = new I18nKey("sound", Site)
val `none` = new I18nKey("none", Site)
val `fast` = new I18nKey("fast", Site)
val `normal` = new I18nKey("normal", Site)
val `slow` = new I18nKey("slow", Site)
val `insideTheBoard` = new I18nKey("insideTheBoard", Site)
val `outsideTheBoard` = new I18nKey("outsideTheBoard", Site)
val `onSlowGames` = new I18nKey("onSlowGames", Site)
val `always` = new I18nKey("always", Site)
val `never` = new I18nKey("never", Site)
val `difficultyEasy` = new I18nKey("difficultyEasy", Site)
val `difficultyNormal` = new I18nKey("difficultyNormal", Site)
val `difficultyHard` = new I18nKey("difficultyHard", Site)
val `xLeftANoteOnY` = new I18nKey("xLeftANoteOnY", Site)
val `xCompetesInY` = new I18nKey("xCompetesInY", Site)
val `xAskedY` = new I18nKey("xAskedY", Site)
val `xAnsweredY` = new I18nKey("xAnsweredY", Site)
val `xCommentedY` = new I18nKey("xCommentedY", Site)
val `victory` = new I18nKey("victory", Site)
val `defeat` = new I18nKey("defeat", Site)
val `victoryVsYInZ` = new I18nKey("victoryVsYInZ", Site)
val `defeatVsYInZ` = new I18nKey("defeatVsYInZ", Site)
val `drawVsYInZ` = new I18nKey("drawVsYInZ", Site)
val `timeline` = new I18nKey("timeline", Site)
val `starting` = new I18nKey("starting", Site)
val `allInformationIsPublicAndOptional` = new I18nKey("allInformationIsPublicAndOptional", Site)
val `yourCityRegionOrDepartment` = new I18nKey("yourCityRegionOrDepartment", Site)
val `biographyDescription` = new I18nKey("biographyDescription", Site)
val `listBlockedPlayers` = new I18nKey("listBlockedPlayers", Site)
val `human` = new I18nKey("human", Site)
val `computer` = new I18nKey("computer", Site)
val `side` = new I18nKey("side", Site)
val `clock` = new I18nKey("clock", Site)
val `unauthorizedError` = new I18nKey("unauthorizedError", Site)
val `noInternetConnection` = new I18nKey("noInternetConnection", Site)
val `connectedToLichess` = new I18nKey("connectedToLichess", Site)
val `signedOut` = new I18nKey("signedOut", Site)
val `loginSuccessful` = new I18nKey("loginSuccessful", Site)
val `playOnTheBoardOffline` = new I18nKey("playOnTheBoardOffline", Site)
val `playOfflineComputer` = new I18nKey("playOfflineComputer", Site)
val `opponent` = new I18nKey("opponent", Site)
val `learnMenu` = new I18nKey("learnMenu", Site)
val `studyMenu` = new I18nKey("studyMenu", Site)
val `practice` = new I18nKey("practice", Site)
val `community` = new I18nKey("community", Site)
val `tools` = new I18nKey("tools", Site)
val `increment` = new I18nKey("increment", Site)
val `sharePGN` = new I18nKey("sharePGN", Site)
val `playOnline` = new I18nKey("playOnline", Site)
val `playOffline` = new I18nKey("playOffline", Site)
val `allowAnalytics` = new I18nKey("allowAnalytics", Site)
val `shareGameURL` = new I18nKey("shareGameURL", Site)
val `error.required` = new I18nKey("error.required", Site)
val `error.email` = new I18nKey("error.email", Site)
val `error.email_acceptable` = new I18nKey("error.email_acceptable", Site)
val `error.email_unique` = new I18nKey("error.email_unique", Site)
val `error.email_different` = new I18nKey("error.email_different", Site)
val `ifRatingIsPlusMinusX` = new I18nKey("ifRatingIsPlusMinusX", Site)
val `onlyFriends` = new I18nKey("onlyFriends", Site)
val `menu` = new I18nKey("menu", Site)
val `castling` = new I18nKey("castling", Site)
val `whiteCastlingKingside` = new I18nKey("whiteCastlingKingside", Site)
val `blackCastlingKingside` = new I18nKey("blackCastlingKingside", Site)
val `tpTimeSpentPlaying` = new I18nKey("tpTimeSpentPlaying", Site)
val `watchGames` = new I18nKey("watchGames", Site)
val `tpTimeSpentOnTV` = new I18nKey("tpTimeSpentOnTV", Site)
val `watch` = new I18nKey("watch", Site)
val `videoLibrary` = new I18nKey("videoLibrary", Site)
val `streamersMenu` = new I18nKey("streamersMenu", Site)
val `mobileApp` = new I18nKey("mobileApp", Site)
val `webmasters` = new I18nKey("webmasters", Site)
val `about` = new I18nKey("about", Site)
val `aboutX` = new I18nKey("aboutX", Site)
val `xIsAFreeYLibreOpenSourceChessServer` = new I18nKey("xIsAFreeYLibreOpenSourceChessServer", Site)
val `really` = new I18nKey("really", Site)
val `contribute` = new I18nKey("contribute", Site)
val `termsOfService` = new I18nKey("termsOfService", Site)
val `sourceCode` = new I18nKey("sourceCode", Site)
val `simultaneousExhibitions` = new I18nKey("simultaneousExhibitions", Site)
val `host` = new I18nKey("host", Site)
val `hostColorX` = new I18nKey("hostColorX", Site)
val `createdSimuls` = new I18nKey("createdSimuls", Site)
val `hostANewSimul` = new I18nKey("hostANewSimul", Site)
val `noSimulFound` = new I18nKey("noSimulFound", Site)
val `noSimulExplanation` = new I18nKey("noSimulExplanation", Site)
val `returnToSimulHomepage` = new I18nKey("returnToSimulHomepage", Site)
val `aboutSimul` = new I18nKey("aboutSimul", Site)
val `aboutSimulImage` = new I18nKey("aboutSimulImage", Site)
val `aboutSimulRealLife` = new I18nKey("aboutSimulRealLife", Site)
val `aboutSimulRules` = new I18nKey("aboutSimulRules", Site)
val `aboutSimulSettings` = new I18nKey("aboutSimulSettings", Site)
val `create` = new I18nKey("create", Site)
val `whenCreateSimul` = new I18nKey("whenCreateSimul", Site)
val `simulVariantsHint` = new I18nKey("simulVariantsHint", Site)
val `simulClockHint` = new I18nKey("simulClockHint", Site)
val `simulAddExtraTime` = new I18nKey("simulAddExtraTime", Site)
val `simulHostExtraTime` = new I18nKey("simulHostExtraTime", Site)
val `lichessTournaments` = new I18nKey("lichessTournaments", Site)
val `tournamentFAQ` = new I18nKey("tournamentFAQ", Site)
val `tournamentOfficial` = new I18nKey("tournamentOfficial", Site)
val `timeBeforeTournamentStarts` = new I18nKey("timeBeforeTournamentStarts", Site)
val `averageCentipawnLoss` = new I18nKey("averageCentipawnLoss", Site)
val `keyboardShortcuts` = new I18nKey("keyboardShortcuts", Site)
val `keyMoveBackwardOrForward` = new I18nKey("keyMoveBackwardOrForward", Site)
val `keyGoToStartOrEnd` = new I18nKey("keyGoToStartOrEnd", Site)
val `keyShowOrHideComments` = new I18nKey("keyShowOrHideComments", Site)
val `keyEnterOrExitVariation` = new I18nKey("keyEnterOrExitVariation", Site)
val `newTournament` = new I18nKey("newTournament", Site)
val `tournamentHomeTitle` = new I18nKey("tournamentHomeTitle", Site)
val `tournamentHomeDescription` = new I18nKey("tournamentHomeDescription", Site)
val `tournamentNotFound` = new I18nKey("tournamentNotFound", Site)
val `tournamentDoesNotExist` = new I18nKey("tournamentDoesNotExist", Site)
val `tournamentMayHaveBeenCanceled` = new I18nKey("tournamentMayHaveBeenCanceled", Site)
val `returnToTournamentsHomepage` = new I18nKey("returnToTournamentsHomepage", Site)
val `weeklyPerfTypeRatingDistribution` = new I18nKey("weeklyPerfTypeRatingDistribution", Site)
val `yourPerfTypeRatingIsRating` = new I18nKey("yourPerfTypeRatingIsRating", Site)
val `youAreBetterThanPercentOfPerfTypePlayers` = new I18nKey("youAreBetterThanPercentOfPerfTypePlayers", Site)
val `youDoNotHaveAnEstablishedPerfTypeRating` = new I18nKey("youDoNotHaveAnEstablishedPerfTypeRating", Site)
val `yourRating` = new I18nKey("yourRating", Site)
val `cumulative` = new I18nKey("cumulative", Site)
val `glicko2Rating` = new I18nKey("glicko2Rating", Site)
val `checkYourEmail` = new I18nKey("checkYourEmail", Site)
val `weHaveSentYouAnEmailClickTheLink` = new I18nKey("weHaveSentYouAnEmailClickTheLink", Site)
val `ifYouDoNotSeeTheEmailCheckOtherPlaces` = new I18nKey("ifYouDoNotSeeTheEmailCheckOtherPlaces", Site)
val `weHaveSentYouAnEmailTo` = new I18nKey("weHaveSentYouAnEmailTo", Site)
val `byRegisteringYouAgreeToBeBoundByOur` = new I18nKey("byRegisteringYouAgreeToBeBoundByOur", Site)
val `networkLagBetweenYouAndLichess` = new I18nKey("networkLagBetweenYouAndLichess", Site)
val `timeToProcessAMoveOnLichessServer` = new I18nKey("timeToProcessAMoveOnLichessServer", Site)
val `downloadAnnotated` = new I18nKey("downloadAnnotated", Site)
val `downloadRaw` = new I18nKey("downloadRaw", Site)
val `downloadImported` = new I18nKey("downloadImported", Site)
val `printFriendlyPDF` = new I18nKey("printFriendlyPDF", Site)
val `crosstable` = new I18nKey("crosstable", Site)
val `youCanAlsoScrollOverTheBoardToMoveInTheGame` = new I18nKey("youCanAlsoScrollOverTheBoardToMoveInTheGame", Site)
val `analysisShapesHowTo` = new I18nKey("analysisShapesHowTo", Site)
val `letOtherPlayersMessageYou` = new I18nKey("letOtherPlayersMessageYou", Site)
val `shareYourInsightsData` = new I18nKey("shareYourInsightsData", Site)
val `withNobody` = new I18nKey("withNobody", Site)
val `withFriends` = new I18nKey("withFriends", Site)
val `withEverybody` = new I18nKey("withEverybody", Site)
val `youHaveAlreadyRegisteredTheEmail` = new I18nKey("youHaveAlreadyRegisteredTheEmail", Site)
val `kidMode` = new I18nKey("kidMode", Site)
val `kidModeExplanation` = new I18nKey("kidModeExplanation", Site)
val `inKidModeTheLichessLogoGetsIconX` = new I18nKey("inKidModeTheLichessLogoGetsIconX", Site)
val `enableKidMode` = new I18nKey("enableKidMode", Site)
val `disableKidMode` = new I18nKey("disableKidMode", Site)
val `security` = new I18nKey("security", Site)
val `thisIsAListOfDevicesThatHaveLoggedIntoYourAccount` = new I18nKey("thisIsAListOfDevicesThatHaveLoggedIntoYourAccount", Site)
val `alternativelyYouCanX` = new I18nKey("alternativelyYouCanX", Site)
val `revokeAllSessions` = new I18nKey("revokeAllSessions", Site)
val `playChessEverywhere` = new I18nKey("playChessEverywhere", Site)
val `asFreeAsLichess` = new I18nKey("asFreeAsLichess", Site)
val `builtForTheLoveOfChessNotMoney` = new I18nKey("builtForTheLoveOfChessNotMoney", Site)
val `everybodyGetsAllFeaturesForFree` = new I18nKey("everybodyGetsAllFeaturesForFree", Site)
val `zeroAdvertisement` = new I18nKey("zeroAdvertisement", Site)
val `fullFeatured` = new I18nKey("fullFeatured", Site)
val `phoneAndTablet` = new I18nKey("phoneAndTablet", Site)
val `bulletBlitzClassical` = new I18nKey("bulletBlitzClassical", Site)
val `correspondenceChess` = new I18nKey("correspondenceChess", Site)
val `onlineAndOfflinePlay` = new I18nKey("onlineAndOfflinePlay", Site)
val `viewTheSolution` = new I18nKey("viewTheSolution", Site)
val `followAndChallengeFriends` = new I18nKey("followAndChallengeFriends", Site)
val `gameAnalysis` = new I18nKey("gameAnalysis", Site)
val `xHostsY` = new I18nKey("xHostsY", Site)
val `xJoinsY` = new I18nKey("xJoinsY", Site)
val `xLikesY` = new I18nKey("xLikesY", Site)
val `xCreatesStudyY` = new I18nKey("xCreatesStudyY", Site)
val `quickPairing` = new I18nKey("quickPairing", Site)
val `lobby` = new I18nKey("lobby", Site)
val `anonymous` = new I18nKey("anonymous", Site)
val `yourScore` = new I18nKey("yourScore", Site)
val `language` = new I18nKey("language", Site)
val `background` = new I18nKey("background", Site)
val `light` = new I18nKey("light", Site)
val `dark` = new I18nKey("dark", Site)
val `transparent` = new I18nKey("transparent", Site)
val `backgroundImageUrl` = new I18nKey("backgroundImageUrl", Site)
val `boardGeometry` = new I18nKey("boardGeometry", Site)
val `boardTheme` = new I18nKey("boardTheme", Site)
val `boardSize` = new I18nKey("boardSize", Site)
val `pieceSet` = new I18nKey("pieceSet", Site)
val `embedInYourWebsite` = new I18nKey("embedInYourWebsite", Site)
val `usernameAlreadyUsed` = new I18nKey("usernameAlreadyUsed", Site)
val `usernamePrefixInvalid` = new I18nKey("usernamePrefixInvalid", Site)
val `usernameSuffixInvalid` = new I18nKey("usernameSuffixInvalid", Site)
val `usernameCharsInvalid` = new I18nKey("usernameCharsInvalid", Site)
val `usernameUnacceptable` = new I18nKey("usernameUnacceptable", Site)
val `directlySupportLichess` = new I18nKey("directlySupportLichess", Site)
val `playChessInStyle` = new I18nKey("playChessInStyle", Site)
val `chessBasics` = new I18nKey("chessBasics", Site)
val `coaches` = new I18nKey("coaches", Site)
val `invalidPgn` = new I18nKey("invalidPgn", Site)
val `invalidFen` = new I18nKey("invalidFen", Site)
val `error.minLength` = new I18nKey("error.minLength", Site)
val `error.maxLength` = new I18nKey("error.maxLength", Site)
val `error.min` = new I18nKey("error.min", Site)
val `error.max` = new I18nKey("error.max", Site)
val `error.unknown` = new I18nKey("error.unknown", Site)
val `custom` = new I18nKey("custom", Site)
val `notifications` = new I18nKey("notifications", Site)
val `challenges` = new I18nKey("challenges", Site)
val `perfRatingX` = new I18nKey("perfRatingX", Site)
val `practiceWithComputer` = new I18nKey("practiceWithComputer", Site)
val `anotherWasX` = new I18nKey("anotherWasX", Site)
val `bestWasX` = new I18nKey("bestWasX", Site)
val `youBrowsedAway` = new I18nKey("youBrowsedAway", Site)
val `resumePractice` = new I18nKey("resumePractice", Site)
val `theGameIsADraw` = new I18nKey("theGameIsADraw", Site)
val `computerThinking` = new I18nKey("computerThinking", Site)
val `seeBestMove` = new I18nKey("seeBestMove", Site)
val `hideBestMove` = new I18nKey("hideBestMove", Site)
val `getAHint` = new I18nKey("getAHint", Site)
val `evaluatingYourMove` = new I18nKey("evaluatingYourMove", Site)
val `whiteWinsGame` = new I18nKey("whiteWinsGame", Site)
val `blackWinsGame` = new I18nKey("blackWinsGame", Site)
val `learnFromYourMistakes` = new I18nKey("learnFromYourMistakes", Site)
val `learnFromThisMistake` = new I18nKey("learnFromThisMistake", Site)
val `skipThisMove` = new I18nKey("skipThisMove", Site)
val `next` = new I18nKey("next", Site)
val `xWasPlayed` = new I18nKey("xWasPlayed", Site)
val `findBetterMoveForWhite` = new I18nKey("findBetterMoveForWhite", Site)
val `findBetterMoveForBlack` = new I18nKey("findBetterMoveForBlack", Site)
val `resumeLearning` = new I18nKey("resumeLearning", Site)
val `youCanDoBetter` = new I18nKey("youCanDoBetter", Site)
val `tryAnotherMoveForWhite` = new I18nKey("tryAnotherMoveForWhite", Site)
val `tryAnotherMoveForBlack` = new I18nKey("tryAnotherMoveForBlack", Site)
val `solution` = new I18nKey("solution", Site)
val `waitingForAnalysis` = new I18nKey("waitingForAnalysis", Site)
val `noMistakesFoundForWhite` = new I18nKey("noMistakesFoundForWhite", Site)
val `noMistakesFoundForBlack` = new I18nKey("noMistakesFoundForBlack", Site)
val `doneReviewingWhiteMistakes` = new I18nKey("doneReviewingWhiteMistakes", Site)
val `doneReviewingBlackMistakes` = new I18nKey("doneReviewingBlackMistakes", Site)
val `doItAgain` = new I18nKey("doItAgain", Site)
val `reviewWhiteMistakes` = new I18nKey("reviewWhiteMistakes", Site)
val `reviewBlackMistakes` = new I18nKey("reviewBlackMistakes", Site)
val `advantage` = new I18nKey("advantage", Site)
val `opening` = new I18nKey("opening", Site)
val `middlegame` = new I18nKey("middlegame", Site)
val `endgame` = new I18nKey("endgame", Site)
val `registerToSendChallenges` = new I18nKey("registerToSendChallenges", Site)
val `youCannotChallengeX` = new I18nKey("youCannotChallengeX", Site)
val `xDoesNotAcceptChallenges` = new I18nKey("xDoesNotAcceptChallenges", Site)
val `yourXRatingIsTooFarFromY` = new I18nKey("yourXRatingIsTooFarFromY", Site)
val `cannotChallengeDueToProvisionalXRating` = new I18nKey("cannotChallengeDueToProvisionalXRating", Site)
val `xOnlyAcceptsChallengesFromFriends` = new I18nKey("xOnlyAcceptsChallengesFromFriends", Site)
val `conditionalPremoves` = new I18nKey("conditionalPremoves", Site)
val `addCurrentVariation` = new I18nKey("addCurrentVariation", Site)
val `playVariationToCreateConditionalPremoves` = new I18nKey("playVariationToCreateConditionalPremoves", Site)
val `noConditionalPremoves` = new I18nKey("noConditionalPremoves", Site)
val `playX` = new I18nKey("playX", Site)
val `sorry` = new I18nKey("sorry", Site)
val `weHadToTimeYouOutForAWhile` = new I18nKey("weHadToTimeYouOutForAWhile", Site)
val `timeoutExpires` = new I18nKey("timeoutExpires", Site)
val `why` = new I18nKey("why", Site)
val `pleasantChessExperience` = new I18nKey("pleasantChessExperience", Site)
val `goodPractice` = new I18nKey("goodPractice", Site)
val `potentialProblem` = new I18nKey("potentialProblem", Site)
val `howToAvoidThis` = new I18nKey("howToAvoidThis", Site)
val `playEveryGame` = new I18nKey("playEveryGame", Site)
val `tryToWin` = new I18nKey("tryToWin", Site)
val `resignLostGames` = new I18nKey("resignLostGames", Site)
val `temporaryInconvenience` = new I18nKey("temporaryInconvenience", Site)
val `wishYouGreatGames` = new I18nKey("wishYouGreatGames", Site)
val `thankYouForReading` = new I18nKey("thankYouForReading", Site)
val `lifetimeScore` = new I18nKey("lifetimeScore", Site)
val `currentMatchScore` = new I18nKey("currentMatchScore", Site)
val `agreementAssistance` = new I18nKey("agreementAssistance", Site)
val `agreementNice` = new I18nKey("agreementNice", Site)
val `agreementAccount` = new I18nKey("agreementAccount", Site)
val `agreementPolicy` = new I18nKey("agreementPolicy", Site)
val `searchOrStartNewDiscussion` = new I18nKey("searchOrStartNewDiscussion", Site)
val `edit` = new I18nKey("edit", Site)
val `opponentLeftCounter` = new I18nKey("opponentLeftCounter", Site)
val `mateInXHalfMoves` = new I18nKey("mateInXHalfMoves", Site)
val `nextCaptureOrPawnMoveInXHalfMoves` = new I18nKey("nextCaptureOrPawnMoveInXHalfMoves", Site)
val `nbPlayers` = new I18nKey("nbPlayers", Site)
val `nbGames` = new I18nKey("nbGames", Site)
val `nbBookmarks` = new I18nKey("nbBookmarks", Site)
val `nbDays` = new I18nKey("nbDays", Site)
val `nbHours` = new I18nKey("nbHours", Site)
val `rankIsUpdatedEveryNbMinutes` = new I18nKey("rankIsUpdatedEveryNbMinutes", Site)
val `nbPuzzles` = new I18nKey("nbPuzzles", Site)
val `nbGamesWithYou` = new I18nKey("nbGamesWithYou", Site)
val `nbRated` = new I18nKey("nbRated", Site)
val `nbWins` = new I18nKey("nbWins", Site)
val `nbLosses` = new I18nKey("nbLosses", Site)
val `nbDraws` = new I18nKey("nbDraws", Site)
val `nbPlaying` = new I18nKey("nbPlaying", Site)
val `giveNbSeconds` = new I18nKey("giveNbSeconds", Site)
val `nbTournamentPoints` = new I18nKey("nbTournamentPoints", Site)
val `nbStudies` = new I18nKey("nbStudies", Site)
val `moreThanNbRatedGames` = new I18nKey("moreThanNbRatedGames", Site)
val `moreThanNbPerfRatedGames` = new I18nKey("moreThanNbPerfRatedGames", Site)
val `needNbMorePerfGames` = new I18nKey("needNbMorePerfGames", Site)
val `needNbMoreGames` = new I18nKey("needNbMoreGames", Site)
val `nbImportedGames` = new I18nKey("nbImportedGames", Site)
val `nbFriendsOnline` = new I18nKey("nbFriendsOnline", Site)
val `nbFollowers` = new I18nKey("nbFollowers", Site)
val `nbFollowing` = new I18nKey("nbFollowing", Site)
val `lessThanNbMinutes` = new I18nKey("lessThanNbMinutes", Site)
val `playedXTimes` = new I18nKey("playedXTimes", Site)
val `nbGamesInPlay` = new I18nKey("nbGamesInPlay", Site)
val `maximumNbCharacters` = new I18nKey("maximumNbCharacters", Site)
val `blocks` = new I18nKey("blocks", Site)
val `nbForumPosts` = new I18nKey("nbForumPosts", Site)
val `nbPerfTypePlayersThisWeek` = new I18nKey("nbPerfTypePlayersThisWeek", Site)
val `availableInNbLanguages` = new I18nKey("availableInNbLanguages", Site)
val `nbSecondsToPlayTheFirstMove` = new I18nKey("nbSecondsToPlayTheFirstMove", Site)
val `nbSeconds` = new I18nKey("nbSeconds", Site)
val `andSaveNbPremoveLines` = new I18nKey("andSaveNbPremoveLines", Site)

object arena {
val `isItRated` = new I18nKey("isItRated", Arena)
val `willBeNotified` = new I18nKey("willBeNotified", Arena)
val `isRated` = new I18nKey("isRated", Arena)
val `isNotRated` = new I18nKey("isNotRated", Arena)
val `someRated` = new I18nKey("someRated", Arena)
val `howAreScoresCalculated` = new I18nKey("howAreScoresCalculated", Arena)
val `howAreScoresCalculatedAnswer` = new I18nKey("howAreScoresCalculatedAnswer", Arena)
val `berserk` = new I18nKey("berserk", Arena)
val `berserkAnswer` = new I18nKey("berserkAnswer", Arena)
val `howIsTheWinnerDecided` = new I18nKey("howIsTheWinnerDecided", Arena)
val `howIsTheWinnerDecidedAnswer` = new I18nKey("howIsTheWinnerDecidedAnswer", Arena)
val `howDoesPairingWork` = new I18nKey("howDoesPairingWork", Arena)
val `howDoesPairingWorkAnswer` = new I18nKey("howDoesPairingWorkAnswer", Arena)
val `howDoesItEnd` = new I18nKey("howDoesItEnd", Arena)
val `howDoesItEndAnswer` = new I18nKey("howDoesItEndAnswer", Arena)
val `otherRules` = new I18nKey("otherRules", Arena)
val `thereIsACountdown` = new I18nKey("thereIsACountdown", Arena)
val `thisIsPrivate` = new I18nKey("thisIsPrivate", Arena)
val `shareUrl` = new I18nKey("shareUrl", Arena)
val `drawingWithinNbMoves` = new I18nKey("drawingWithinNbMoves", Arena)
}

object emails {
val `emailConfirm_subject` = new I18nKey("emailConfirm_subject", Emails)
val `emailConfirm_click` = new I18nKey("emailConfirm_click", Emails)
val `emailConfirm_ignore` = new I18nKey("emailConfirm_ignore", Emails)
val `passwordReset_subject` = new I18nKey("passwordReset_subject", Emails)
val `passwordReset_intro` = new I18nKey("passwordReset_intro", Emails)
val `passwordReset_clickOrIgnore` = new I18nKey("passwordReset_clickOrIgnore", Emails)
val `emailChange_subject` = new I18nKey("emailChange_subject", Emails)
val `emailChange_intro` = new I18nKey("emailChange_intro", Emails)
val `emailChange_click` = new I18nKey("emailChange_click", Emails)
val `welcome_subject` = new I18nKey("welcome_subject", Emails)
val `welcome_text` = new I18nKey("welcome_text", Emails)
val `logInToLichess` = new I18nKey("logInToLichess", Emails)
val `common_orPaste` = new I18nKey("common_orPaste", Emails)
val `common_note` = new I18nKey("common_note", Emails)
val `common_contact` = new I18nKey("common_contact", Emails)
}

object learn {
val `learnChess` = new I18nKey("learnChess", Learn)
val `byPlaying` = new I18nKey("byPlaying", Learn)
val `menu` = new I18nKey("menu", Learn)
val `progressX` = new I18nKey("progressX", Learn)
val `resetMyProgress` = new I18nKey("resetMyProgress", Learn)
val `youWillLoseAllYourProgress` = new I18nKey("youWillLoseAllYourProgress", Learn)
val `play` = new I18nKey("play", Learn)
val `chessPieces` = new I18nKey("chessPieces", Learn)
val `theRook` = new I18nKey("theRook", Learn)
val `itMovesInStraightLines` = new I18nKey("itMovesInStraightLines", Learn)
val `rookIntro` = new I18nKey("rookIntro", Learn)
val `rookGoal` = new I18nKey("rookGoal", Learn)
val `grabAllTheStars` = new I18nKey("grabAllTheStars", Learn)
val `theFewerMoves` = new I18nKey("theFewerMoves", Learn)
val `useTwoRooks` = new I18nKey("useTwoRooks", Learn)
val `rookComplete` = new I18nKey("rookComplete", Learn)
val `theBishop` = new I18nKey("theBishop", Learn)
val `itMovesDiagonally` = new I18nKey("itMovesDiagonally", Learn)
val `bishopIntro` = new I18nKey("bishopIntro", Learn)
val `youNeedBothBishops` = new I18nKey("youNeedBothBishops", Learn)
val `bishopComplete` = new I18nKey("bishopComplete", Learn)
val `theQueen` = new I18nKey("theQueen", Learn)
val `queenCombinesRookAndBishop` = new I18nKey("queenCombinesRookAndBishop", Learn)
val `queenIntro` = new I18nKey("queenIntro", Learn)
val `queenComplete` = new I18nKey("queenComplete", Learn)
val `theKing` = new I18nKey("theKing", Learn)
val `theMostImportantPiece` = new I18nKey("theMostImportantPiece", Learn)
val `kingIntro` = new I18nKey("kingIntro", Learn)
val `theKingIsSlow` = new I18nKey("theKingIsSlow", Learn)
val `lastOne` = new I18nKey("lastOne", Learn)
val `kingComplete` = new I18nKey("kingComplete", Learn)
val `theKnight` = new I18nKey("theKnight", Learn)
val `itMovesInAnLShape` = new I18nKey("itMovesInAnLShape", Learn)
val `knightIntro` = new I18nKey("knightIntro", Learn)
val `knightsHaveAFancyWay` = new I18nKey("knightsHaveAFancyWay", Learn)
val `knightsCanJumpOverObstacles` = new I18nKey("knightsCanJumpOverObstacles", Learn)
val `knightComplete` = new I18nKey("knightComplete", Learn)
val `thePawn` = new I18nKey("thePawn", Learn)
val `itMovesForwardOnly` = new I18nKey("itMovesForwardOnly", Learn)
val `pawnIntro` = new I18nKey("pawnIntro", Learn)
val `pawnsMoveOneSquareOnly` = new I18nKey("pawnsMoveOneSquareOnly", Learn)
val `mostOfTheTimePromotingToAQueenIsBest` = new I18nKey("mostOfTheTimePromotingToAQueenIsBest", Learn)
val `pawnsMoveForward` = new I18nKey("pawnsMoveForward", Learn)
val `captureThenPromote` = new I18nKey("captureThenPromote", Learn)
val `useAllThePawns` = new I18nKey("useAllThePawns", Learn)
val `aPawnOnTheSecondRank` = new I18nKey("aPawnOnTheSecondRank", Learn)
val `grabAllTheStarsNoNeedToPromote` = new I18nKey("grabAllTheStarsNoNeedToPromote", Learn)
val `pawnComplete` = new I18nKey("pawnComplete", Learn)
val `pawnPromotion` = new I18nKey("pawnPromotion", Learn)
val `yourPawnReachedTheEndOfTheBoard` = new I18nKey("yourPawnReachedTheEndOfTheBoard", Learn)
val `itNowPromotesToAStrongerPiece` = new I18nKey("itNowPromotesToAStrongerPiece", Learn)
val `selectThePieceYouWant` = new I18nKey("selectThePieceYouWant", Learn)
val `fundamentals` = new I18nKey("fundamentals", Learn)
val `capture` = new I18nKey("capture", Learn)
val `takeTheEnemyPieces` = new I18nKey("takeTheEnemyPieces", Learn)
val `captureIntro` = new I18nKey("captureIntro", Learn)
val `takeTheBlackPieces` = new I18nKey("takeTheBlackPieces", Learn)
val `takeTheBlackPiecesAndDontLoseYours` = new I18nKey("takeTheBlackPiecesAndDontLoseYours", Learn)
val `captureComplete` = new I18nKey("captureComplete", Learn)
val `protection` = new I18nKey("protection", Learn)
val `keepYourPiecesSafe` = new I18nKey("keepYourPiecesSafe", Learn)
val `protectionIntro` = new I18nKey("protectionIntro", Learn)
val `protectionComplete` = new I18nKey("protectionComplete", Learn)
val `escape` = new I18nKey("escape", Learn)
val `noEscape` = new I18nKey("noEscape", Learn)
val `dontLetThemTakeAnyUndefendedPiece` = new I18nKey("dontLetThemTakeAnyUndefendedPiece", Learn)
val `combat` = new I18nKey("combat", Learn)
val `captureAndDefendPieces` = new I18nKey("captureAndDefendPieces", Learn)
val `combatIntro` = new I18nKey("combatIntro", Learn)
val `combatComplete` = new I18nKey("combatComplete", Learn)
val `checkInOne` = new I18nKey("checkInOne", Learn)
val `attackTheOpponentsKing` = new I18nKey("attackTheOpponentsKing", Learn)
val `checkInOneIntro` = new I18nKey("checkInOneIntro", Learn)
val `checkInOneGoal` = new I18nKey("checkInOneGoal", Learn)
val `checkInOneComplete` = new I18nKey("checkInOneComplete", Learn)
val `outOfCheck` = new I18nKey("outOfCheck", Learn)
val `defendYourKing` = new I18nKey("defendYourKing", Learn)
val `outOfCheckIntro` = new I18nKey("outOfCheckIntro", Learn)
val `escapeWithTheKing` = new I18nKey("escapeWithTheKing", Learn)
val `theKingCannotEscapeButBlock` = new I18nKey("theKingCannotEscapeButBlock", Learn)
val `youCanGetOutOfCheckByTaking` = new I18nKey("youCanGetOutOfCheckByTaking", Learn)
val `thisKnightIsCheckingThroughYourDefenses` = new I18nKey("thisKnightIsCheckingThroughYourDefenses", Learn)
val `escapeOrBlock` = new I18nKey("escapeOrBlock", Learn)
val `outOfCheckComplete` = new I18nKey("outOfCheckComplete", Learn)
val `mateInOne` = new I18nKey("mateInOne", Learn)
val `defeatTheOpponentsKing` = new I18nKey("defeatTheOpponentsKing", Learn)
val `mateInOneIntro` = new I18nKey("mateInOneIntro", Learn)
val `attackYourOpponentsKing` = new I18nKey("attackYourOpponentsKing", Learn)
val `mateInOneComplete` = new I18nKey("mateInOneComplete", Learn)
val `intermediate` = new I18nKey("intermediate", Learn)
val `boardSetup` = new I18nKey("boardSetup", Learn)
val `howTheGameStarts` = new I18nKey("howTheGameStarts", Learn)
val `boardSetupIntro` = new I18nKey("boardSetupIntro", Learn)
val `thisIsTheInitialPosition` = new I18nKey("thisIsTheInitialPosition", Learn)
val `firstPlaceTheRooks` = new I18nKey("firstPlaceTheRooks", Learn)
val `thenPlaceTheKnights` = new I18nKey("thenPlaceTheKnights", Learn)
val `placeTheBishops` = new I18nKey("placeTheBishops", Learn)
val `placeTheQueen` = new I18nKey("placeTheQueen", Learn)
val `placeTheKing` = new I18nKey("placeTheKing", Learn)
val `pawnsFormTheFrontLine` = new I18nKey("pawnsFormTheFrontLine", Learn)
val `boardSetupComplete` = new I18nKey("boardSetupComplete", Learn)
val `castling` = new I18nKey("castling", Learn)
val `theSpecialKingMove` = new I18nKey("theSpecialKingMove", Learn)
val `castlingIntro` = new I18nKey("castlingIntro", Learn)
val `castleKingSide` = new I18nKey("castleKingSide", Learn)
val `castleQueenSide` = new I18nKey("castleQueenSide", Learn)
val `theKnightIsInTheWay` = new I18nKey("theKnightIsInTheWay", Learn)
val `castleKingSideMovePiecesFirst` = new I18nKey("castleKingSideMovePiecesFirst", Learn)
val `castleQueenSideMovePiecesFirst` = new I18nKey("castleQueenSideMovePiecesFirst", Learn)
val `youCannotCastleIfMoved` = new I18nKey("youCannotCastleIfMoved", Learn)
val `youCannotCastleIfAttacked` = new I18nKey("youCannotCastleIfAttacked", Learn)
val `findAWayToCastleKingSide` = new I18nKey("findAWayToCastleKingSide", Learn)
val `findAWayToCastleQueenSide` = new I18nKey("findAWayToCastleQueenSide", Learn)
val `castlingComplete` = new I18nKey("castlingComplete", Learn)
val `enPassant` = new I18nKey("enPassant", Learn)
val `theSpecialPawnMove` = new I18nKey("theSpecialPawnMove", Learn)
val `enPassantIntro` = new I18nKey("enPassantIntro", Learn)
val `blackJustMovedThePawnByTwoSquares` = new I18nKey("blackJustMovedThePawnByTwoSquares", Learn)
val `enPassantOnlyWorksImmediately` = new I18nKey("enPassantOnlyWorksImmediately", Learn)
val `enPassantOnlyWorksOnFifthRank` = new I18nKey("enPassantOnlyWorksOnFifthRank", Learn)
val `takeAllThePawnsEnPassant` = new I18nKey("takeAllThePawnsEnPassant", Learn)
val `enPassantComplete` = new I18nKey("enPassantComplete", Learn)
val `stalemate` = new I18nKey("stalemate", Learn)
val `theGameIsADraw` = new I18nKey("theGameIsADraw", Learn)
val `stalemateIntro` = new I18nKey("stalemateIntro", Learn)
val `stalemateGoal` = new I18nKey("stalemateGoal", Learn)
val `stalemateComplete` = new I18nKey("stalemateComplete", Learn)
val `advanced` = new I18nKey("advanced", Learn)
val `pieceValue` = new I18nKey("pieceValue", Learn)
val `evaluatePieceStrength` = new I18nKey("evaluatePieceStrength", Learn)
val `pieceValueIntro` = new I18nKey("pieceValueIntro", Learn)
val `queenOverBishop` = new I18nKey("queenOverBishop", Learn)
val `takeThePieceWithTheHighestValue` = new I18nKey("takeThePieceWithTheHighestValue", Learn)
val `pieceValueComplete` = new I18nKey("pieceValueComplete", Learn)
val `checkInTwo` = new I18nKey("checkInTwo", Learn)
val `twoMovesToGiveCheck` = new I18nKey("twoMovesToGiveCheck", Learn)
val `checkInTwoIntro` = new I18nKey("checkInTwoIntro", Learn)
val `checkInTwoGoal` = new I18nKey("checkInTwoGoal", Learn)
val `checkInTwoComplete` = new I18nKey("checkInTwoComplete", Learn)
val `whatNext` = new I18nKey("whatNext", Learn)
val `youKnowHowToPlayChess` = new I18nKey("youKnowHowToPlayChess", Learn)
val `register` = new I18nKey("register", Learn)
val `getAFreeLichessAccount` = new I18nKey("getAFreeLichessAccount", Learn)
val `practice` = new I18nKey("practice", Learn)
val `learnCommonChessPositions` = new I18nKey("learnCommonChessPositions", Learn)
val `puzzles` = new I18nKey("puzzles", Learn)
val `exerciseYourTacticalSkills` = new I18nKey("exerciseYourTacticalSkills", Learn)
val `videos` = new I18nKey("videos", Learn)
val `watchInstructiveChessVideos` = new I18nKey("watchInstructiveChessVideos", Learn)
val `playPeople` = new I18nKey("playPeople", Learn)
val `opponentsFromAroundTheWorld` = new I18nKey("opponentsFromAroundTheWorld", Learn)
val `playMachine` = new I18nKey("playMachine", Learn)
val `testYourSkillsWithTheComputer` = new I18nKey("testYourSkillsWithTheComputer", Learn)
val `letsGo` = new I18nKey("letsGo", Learn)
val `stageX` = new I18nKey("stageX", Learn)
val `awesome` = new I18nKey("awesome", Learn)
val `excellent` = new I18nKey("excellent", Learn)
val `greatJob` = new I18nKey("greatJob", Learn)
val `perfect` = new I18nKey("perfect", Learn)
val `outstanding` = new I18nKey("outstanding", Learn)
val `wayToGo` = new I18nKey("wayToGo", Learn)
val `yesYesYes` = new I18nKey("yesYesYes", Learn)
val `youreGoodAtThis` = new I18nKey("youreGoodAtThis", Learn)
val `nailedIt` = new I18nKey("nailedIt", Learn)
val `rightOn` = new I18nKey("rightOn", Learn)
val `stageXComplete` = new I18nKey("stageXComplete", Learn)
val `yourScore` = new I18nKey("yourScore", Learn)
val `next` = new I18nKey("next", Learn)
val `backToMenu` = new I18nKey("backToMenu", Learn)
val `puzzleFailed` = new I18nKey("puzzleFailed", Learn)
val `retry` = new I18nKey("retry", Learn)
}

object activity {
val `activity` = new I18nKey("activity", Activity)
val `hostedALiveStream` = new I18nKey("hostedALiveStream", Activity)
val `signedUp` = new I18nKey("signedUp", Activity)
val `supportedNbMonths` = new I18nKey("supportedNbMonths", Activity)
val `practicedNbPositions` = new I18nKey("practicedNbPositions", Activity)
val `solvedNbPuzzles` = new I18nKey("solvedNbPuzzles", Activity)
val `playedNbGames` = new I18nKey("playedNbGames", Activity)
val `postedNbMessages` = new I18nKey("postedNbMessages", Activity)
val `playedNbMoves` = new I18nKey("playedNbMoves", Activity)
val `inNbCorrespondenceGames` = new I18nKey("inNbCorrespondenceGames", Activity)
val `completedNbGames` = new I18nKey("completedNbGames", Activity)
val `followedNbPlayers` = new I18nKey("followedNbPlayers", Activity)
val `gainedNbFollowers` = new I18nKey("gainedNbFollowers", Activity)
val `hostedNbSimuls` = new I18nKey("hostedNbSimuls", Activity)
val `joinedNbSimuls` = new I18nKey("joinedNbSimuls", Activity)
val `createdNbStudies` = new I18nKey("createdNbStudies", Activity)
val `competedInNbTournaments` = new I18nKey("competedInNbTournaments", Activity)
val `rankedInTournament` = new I18nKey("rankedInTournament", Activity)
val `joinedNbTeams` = new I18nKey("joinedNbTeams", Activity)
}

object coordinates {
val `coordinates` = new I18nKey("coordinates", Coordinates)
val `coordinateTraining` = new I18nKey("coordinateTraining", Coordinates)
val `averageScoreAsWhiteX` = new I18nKey("averageScoreAsWhiteX", Coordinates)
val `averageScoreAsBlackX` = new I18nKey("averageScoreAsBlackX", Coordinates)
val `knowingTheChessBoard` = new I18nKey("knowingTheChessBoard", Coordinates)
val `mostChessCourses` = new I18nKey("mostChessCourses", Coordinates)
val `talkToYourChessFriends` = new I18nKey("talkToYourChessFriends", Coordinates)
val `youCanAnalyseAGameMoreEffectively` = new I18nKey("youCanAnalyseAGameMoreEffectively", Coordinates)
val `aSquareNameAppears` = new I18nKey("aSquareNameAppears", Coordinates)
val `startTraining` = new I18nKey("startTraining", Coordinates)
}

object study {
val `private` = new I18nKey("private", Study)
val `myStudies` = new I18nKey("myStudies", Study)
val `studiesIContributeTo` = new I18nKey("studiesIContributeTo", Study)
val `myPublicStudies` = new I18nKey("myPublicStudies", Study)
val `myPrivateStudies` = new I18nKey("myPrivateStudies", Study)
val `myFavoriteStudies` = new I18nKey("myFavoriteStudies", Study)
val `whatAreStudies` = new I18nKey("whatAreStudies", Study)
val `allStudies` = new I18nKey("allStudies", Study)
val `studiesCreatedByX` = new I18nKey("studiesCreatedByX", Study)
val `noneYet` = new I18nKey("noneYet", Study)
val `hot` = new I18nKey("hot", Study)
val `dateAddedNewest` = new I18nKey("dateAddedNewest", Study)
val `dateAddedOldest` = new I18nKey("dateAddedOldest", Study)
val `recentlyUpdated` = new I18nKey("recentlyUpdated", Study)
val `mostPopular` = new I18nKey("mostPopular", Study)
val `addNewChapter` = new I18nKey("addNewChapter", Study)
val `addMembers` = new I18nKey("addMembers", Study)
val `inviteToTheStudy` = new I18nKey("inviteToTheStudy", Study)
val `pleaseOnlyInvitePeopleYouKnow` = new I18nKey("pleaseOnlyInvitePeopleYouKnow", Study)
val `searchByUsername` = new I18nKey("searchByUsername", Study)
val `spectator` = new I18nKey("spectator", Study)
val `contributor` = new I18nKey("contributor", Study)
val `kick` = new I18nKey("kick", Study)
val `leaveTheStudy` = new I18nKey("leaveTheStudy", Study)
val `youAreNowAContributor` = new I18nKey("youAreNowAContributor", Study)
val `youAreNowASpectator` = new I18nKey("youAreNowASpectator", Study)
val `pgnTags` = new I18nKey("pgnTags", Study)
val `like` = new I18nKey("like", Study)
val `newTag` = new I18nKey("newTag", Study)
val `commentThisPosition` = new I18nKey("commentThisPosition", Study)
val `commentThisMove` = new I18nKey("commentThisMove", Study)
val `annotateWithGlyphs` = new I18nKey("annotateWithGlyphs", Study)
val `theChapterIsTooShortToBeAnalysed` = new I18nKey("theChapterIsTooShortToBeAnalysed", Study)
val `onlyContributorsCanRequestAnalysis` = new I18nKey("onlyContributorsCanRequestAnalysis", Study)
val `getAFullComputerAnalysis` = new I18nKey("getAFullComputerAnalysis", Study)
val `makeSureTheChapterIsComplete` = new I18nKey("makeSureTheChapterIsComplete", Study)
val `allSyncMembersRemainOnTheSamePosition` = new I18nKey("allSyncMembersRemainOnTheSamePosition", Study)
val `shareChanges` = new I18nKey("shareChanges", Study)
val `playing` = new I18nKey("playing", Study)
val `first` = new I18nKey("first", Study)
val `previous` = new I18nKey("previous", Study)
val `next` = new I18nKey("next", Study)
val `last` = new I18nKey("last", Study)
val `shareAndExport` = new I18nKey("shareAndExport", Study)
val `cloneStudy` = new I18nKey("cloneStudy", Study)
val `studyPgn` = new I18nKey("studyPgn", Study)
val `chapterPgn` = new I18nKey("chapterPgn", Study)
val `studyUrl` = new I18nKey("studyUrl", Study)
val `currentChapterUrl` = new I18nKey("currentChapterUrl", Study)
val `youCanPasteThisInTheForumToEmbedTheChapter` = new I18nKey("youCanPasteThisInTheForumToEmbedTheChapter", Study)
val `startAtInitialPosition` = new I18nKey("startAtInitialPosition", Study)
val `startAtX` = new I18nKey("startAtX", Study)
val `embedThisChapter` = new I18nKey("embedThisChapter", Study)
val `readMoreAboutEmbeddingAStudyChapter` = new I18nKey("readMoreAboutEmbeddingAStudyChapter", Study)
val `open` = new I18nKey("open", Study)
val `xBroughtToYouByY` = new I18nKey("xBroughtToYouByY", Study)
val `studyNotFound` = new I18nKey("studyNotFound", Study)
val `editChapter` = new I18nKey("editChapter", Study)
val `newChapter` = new I18nKey("newChapter", Study)
val `orientation` = new I18nKey("orientation", Study)
val `analysisMode` = new I18nKey("analysisMode", Study)
val `pinnedChapterComment` = new I18nKey("pinnedChapterComment", Study)
val `saveChapter` = new I18nKey("saveChapter", Study)
val `clearAnnotations` = new I18nKey("clearAnnotations", Study)
val `deleteChapter` = new I18nKey("deleteChapter", Study)
val `deleteThisChapter` = new I18nKey("deleteThisChapter", Study)
val `clearAllCommentsInThisChapter` = new I18nKey("clearAllCommentsInThisChapter", Study)
val `rightUnderTheBoard` = new I18nKey("rightUnderTheBoard", Study)
val `noPinnedComment` = new I18nKey("noPinnedComment", Study)
val `normalAnalysis` = new I18nKey("normalAnalysis", Study)
val `hideNextMoves` = new I18nKey("hideNextMoves", Study)
val `interactiveLesson` = new I18nKey("interactiveLesson", Study)
val `chapterX` = new I18nKey("chapterX", Study)
val `empty` = new I18nKey("empty", Study)
val `startFromInitialPosition` = new I18nKey("startFromInitialPosition", Study)
val `editor` = new I18nKey("editor", Study)
val `startFromCustomPosition` = new I18nKey("startFromCustomPosition", Study)
val `loadAGameByUrl` = new I18nKey("loadAGameByUrl", Study)
val `loadAPositionFromFen` = new I18nKey("loadAPositionFromFen", Study)
val `loadAGameFromPgn` = new I18nKey("loadAGameFromPgn", Study)
val `automatic` = new I18nKey("automatic", Study)
val `urlOfTheGame` = new I18nKey("urlOfTheGame", Study)
val `loadAGameFromXOrY` = new I18nKey("loadAGameFromXOrY", Study)
val `createChapter` = new I18nKey("createChapter", Study)
val `configureLiveBroadcast` = new I18nKey("configureLiveBroadcast", Study)
val `createStudy` = new I18nKey("createStudy", Study)
val `editStudy` = new I18nKey("editStudy", Study)
val `visibility` = new I18nKey("visibility", Study)
val `public` = new I18nKey("public", Study)
val `unlisted` = new I18nKey("unlisted", Study)
val `inviteOnly` = new I18nKey("inviteOnly", Study)
val `allowCloning` = new I18nKey("allowCloning", Study)
val `nobody` = new I18nKey("nobody", Study)
val `onlyMe` = new I18nKey("onlyMe", Study)
val `contributors` = new I18nKey("contributors", Study)
val `members` = new I18nKey("members", Study)
val `everyone` = new I18nKey("everyone", Study)
val `enableSync` = new I18nKey("enableSync", Study)
val `yesKeepEveryoneOnTheSamePosition` = new I18nKey("yesKeepEveryoneOnTheSamePosition", Study)
val `noLetPeopleBrowseFreely` = new I18nKey("noLetPeopleBrowseFreely", Study)
val `pinnedStudyComment` = new I18nKey("pinnedStudyComment", Study)
val `start` = new I18nKey("start", Study)
val `save` = new I18nKey("save", Study)
val `clearChat` = new I18nKey("clearChat", Study)
val `deleteTheStudyChatHistory` = new I18nKey("deleteTheStudyChatHistory", Study)
val `deleteStudy` = new I18nKey("deleteStudy", Study)
val `deleteTheEntireStudy` = new I18nKey("deleteTheEntireStudy", Study)
val `whereDoYouWantToStudyThat` = new I18nKey("whereDoYouWantToStudyThat", Study)
val `nbChapters` = new I18nKey("nbChapters", Study)
val `nbGames` = new I18nKey("nbGames", Study)
val `nbMembers` = new I18nKey("nbMembers", Study)
val `pasteYourPgnTextHereUpToNbGames` = new I18nKey("pasteYourPgnTextHereUpToNbGames", Study)
}

object clas {
val `lichessClasses` = new I18nKey("lichessClasses", Clas)
val `teachClassesOfChessStudents` = new I18nKey("teachClassesOfChessStudents", Clas)
val `features` = new I18nKey("features", Clas)
val `quicklyGenerateSafeUsernames` = new I18nKey("quicklyGenerateSafeUsernames", Clas)
val `trackStudentProgress` = new I18nKey("trackStudentProgress", Clas)
val `messageAllStudents` = new I18nKey("messageAllStudents", Clas)
val `freeForAllForever` = new I18nKey("freeForAllForever", Clas)
val `applyToBeLichessTeacher` = new I18nKey("applyToBeLichessTeacher", Clas)
val `noClassesYet` = new I18nKey("noClassesYet", Clas)
val `teachersX` = new I18nKey("teachersX", Clas)
val `newClass` = new I18nKey("newClass", Clas)
val `closeClass` = new I18nKey("closeClass", Clas)
val `closedByX` = new I18nKey("closedByX", Clas)
val `reopen` = new I18nKey("reopen", Clas)
val `removeStudent` = new I18nKey("removeStudent", Clas)
val `removedStudents` = new I18nKey("removedStudents", Clas)
val `inviteTheStudentBack` = new I18nKey("inviteTheStudentBack", Clas)
val `sendAMessage` = new I18nKey("sendAMessage", Clas)
val `aLinkToTheClassWillBeAdded` = new I18nKey("aLinkToTheClassWillBeAdded", Clas)
val `className` = new I18nKey("className", Clas)
val `classDescription` = new I18nKey("classDescription", Clas)
val `visibleByBothStudentsAndTeachers` = new I18nKey("visibleByBothStudentsAndTeachers", Clas)
val `teachersOfTheClass` = new I18nKey("teachersOfTheClass", Clas)
val `addLichessUsernames` = new I18nKey("addLichessUsernames", Clas)
val `theyMustFirstApply` = new I18nKey("theyMustFirstApply", Clas)
val `resetPassword` = new I18nKey("resetPassword", Clas)
val `makeSureToCopy` = new I18nKey("makeSureToCopy", Clas)
val `passwordX` = new I18nKey("passwordX", Clas)
val `generateANewPassword` = new I18nKey("generateANewPassword", Clas)
val `invitedToXByY` = new I18nKey("invitedToXByY", Clas)
val `realName` = new I18nKey("realName", Clas)
val `privateWillNeverBeShown` = new I18nKey("privateWillNeverBeShown", Clas)
val `addStudent` = new I18nKey("addStudent", Clas)
val `lichessProfileXCreatedForY` = new I18nKey("lichessProfileXCreatedForY", Clas)
val `studentCredentials` = new I18nKey("studentCredentials", Clas)
val `inviteALichessAccount` = new I18nKey("inviteALichessAccount", Clas)
val `inviteDesc1` = new I18nKey("inviteDesc1", Clas)
val `inviteDesc2` = new I18nKey("inviteDesc2", Clas)
val `inviteDesc3` = new I18nKey("inviteDesc3", Clas)
val `inviteDesc4` = new I18nKey("inviteDesc4", Clas)
val `createANewLichessAccount` = new I18nKey("createANewLichessAccount", Clas)
val `createDesc1` = new I18nKey("createDesc1", Clas)
val `createDesc2` = new I18nKey("createDesc2", Clas)
val `createDesc3` = new I18nKey("createDesc3", Clas)
val `createDesc4` = new I18nKey("createDesc4", Clas)
val `lichessUsername` = new I18nKey("lichessUsername", Clas)
val `generateANewUsername` = new I18nKey("generateANewUsername", Clas)
val `onlyVisibleToTeachers` = new I18nKey("onlyVisibleToTeachers", Clas)
val `lastActiveDate` = new I18nKey("lastActiveDate", Clas)
val `managed` = new I18nKey("managed", Clas)
val `thisStudentAccountIsManaged` = new I18nKey("thisStudentAccountIsManaged", Clas)
val `upgradeFromManaged` = new I18nKey("upgradeFromManaged", Clas)
val `release` = new I18nKey("release", Clas)
val `releaseTheAccount` = new I18nKey("releaseTheAccount", Clas)
val `releaseDesc1` = new I18nKey("releaseDesc1", Clas)
val `releaseDesc2` = new I18nKey("releaseDesc2", Clas)
val `realUniqueEmail` = new I18nKey("realUniqueEmail", Clas)
val `teachers` = new I18nKey("teachers", Clas)
val `progress` = new I18nKey("progress", Clas)
val `noStudents` = new I18nKey("noStudents", Clas)
val `noRemovedStudents` = new I18nKey("noRemovedStudents", Clas)
val `overDays` = new I18nKey("overDays", Clas)
val `timePlaying` = new I18nKey("timePlaying", Clas)
val `variantXOverLastY` = new I18nKey("variantXOverLastY", Clas)
val `winrate` = new I18nKey("winrate", Clas)
val `na` = new I18nKey("na", Clas)
val `news` = new I18nKey("news", Clas)
val `editNews` = new I18nKey("editNews", Clas)
val `notifyAllStudents` = new I18nKey("notifyAllStudents", Clas)
val `nothingHere` = new I18nKey("nothingHere", Clas)
val `newsEdit1` = new I18nKey("newsEdit1", Clas)
val `newsEdit2` = new I18nKey("newsEdit2", Clas)
val `newsEdit3` = new I18nKey("newsEdit3", Clas)
val `markdownAvailable` = new I18nKey("markdownAvailable", Clas)
val `nbTeachers` = new I18nKey("nbTeachers", Clas)
val `nbStudents` = new I18nKey("nbStudents", Clas)
}

object contact {
val `contact` = new I18nKey("contact", Contact)
val `contactLichess` = new I18nKey("contactLichess", Contact)
val `whatCanWeHelpYouWith` = new I18nKey("whatCanWeHelpYouWith", Contact)
val `visitThisPage` = new I18nKey("visitThisPage", Contact)
val `iCantLogIn` = new I18nKey("iCantLogIn", Contact)
val `noConfirmationEmail` = new I18nKey("noConfirmationEmail", Contact)
val `forgotPassword` = new I18nKey("forgotPassword", Contact)
val `forgotUsername` = new I18nKey("forgotUsername", Contact)
val `youCanLoginWithEmail` = new I18nKey("youCanLoginWithEmail", Contact)
val `lost2FA` = new I18nKey("lost2FA", Contact)
val `doPasswordReset` = new I18nKey("doPasswordReset", Contact)
val `accountSupport` = new I18nKey("accountSupport", Contact)
val `wantTitle` = new I18nKey("wantTitle", Contact)
val `visitTitleConfirmation` = new I18nKey("visitTitleConfirmation", Contact)
val `wantCloseAccount` = new I18nKey("wantCloseAccount", Contact)
val `closeYourAccount` = new I18nKey("closeYourAccount", Contact)
val `doNotAskByEmail` = new I18nKey("doNotAskByEmail", Contact)
val `wantReopen` = new I18nKey("wantReopen", Contact)
val `reopenOnThisPage` = new I18nKey("reopenOnThisPage", Contact)
val `doNotAskByEmailToReopen` = new I18nKey("doNotAskByEmailToReopen", Contact)
val `wantChangeUsername` = new I18nKey("wantChangeUsername", Contact)
val `changeUsernameCase` = new I18nKey("changeUsernameCase", Contact)
val `cantChangeMore` = new I18nKey("cantChangeMore", Contact)
val `orCloseAccount` = new I18nKey("orCloseAccount", Contact)
val `wantClearHistory` = new I18nKey("wantClearHistory", Contact)
val `cantClearHistory` = new I18nKey("cantClearHistory", Contact)
val `wantReport` = new I18nKey("wantReport", Contact)
val `cheating` = new I18nKey("cheating", Contact)
val `sandbagging` = new I18nKey("sandbagging", Contact)
val `trolling` = new I18nKey("trolling", Contact)
val `insults` = new I18nKey("insults", Contact)
val `otherReason` = new I18nKey("otherReason", Contact)
val `toReportAPlayer` = new I18nKey("toReportAPlayer", Contact)
val `youCanAlsoReachReportPage` = new I18nKey("youCanAlsoReachReportPage", Contact)
val `doNotReportInForum` = new I18nKey("doNotReportInForum", Contact)
val `doNotSendReportEmails` = new I18nKey("doNotSendReportEmails", Contact)
val `doNotMessageModerators` = new I18nKey("doNotMessageModerators", Contact)
val `onlyReports` = new I18nKey("onlyReports", Contact)
val `wantReportBug` = new I18nKey("wantReportBug", Contact)
val `reportBugInForum` = new I18nKey("reportBugInForum", Contact)
val `reportWebsiteIssue` = new I18nKey("reportWebsiteIssue", Contact)
val `reportMobileIssue` = new I18nKey("reportMobileIssue", Contact)
val `reportBugInDiscord` = new I18nKey("reportBugInDiscord", Contact)
val `howToReportBug` = new I18nKey("howToReportBug", Contact)
val `illegalPawnCapture` = new I18nKey("illegalPawnCapture", Contact)
val `calledEnPassant` = new I18nKey("calledEnPassant", Contact)
val `tryEnPassant` = new I18nKey("tryEnPassant", Contact)
val `illegalCastling` = new I18nKey("illegalCastling", Contact)
val `castlingPrevented` = new I18nKey("castlingPrevented", Contact)
val `castlingRules` = new I18nKey("castlingRules", Contact)
val `tryCastling` = new I18nKey("tryCastling", Contact)
val `castlingImported` = new I18nKey("castlingImported", Contact)
val `insufficientMaterial` = new I18nKey("insufficientMaterial", Contact)
val `fideMate` = new I18nKey("fideMate", Contact)
val `knightMate` = new I18nKey("knightMate", Contact)
val `noRatingPoints` = new I18nKey("noRatingPoints", Contact)
val `ratedGame` = new I18nKey("ratedGame", Contact)
val `errorPage` = new I18nKey("errorPage", Contact)
val `reportErrorPage` = new I18nKey("reportErrorPage", Contact)
val `banAppeal` = new I18nKey("banAppeal", Contact)
val `engineAppeal` = new I18nKey("engineAppeal", Contact)
val `sendAppealTo` = new I18nKey("sendAppealTo", Contact)
val `falsePositives` = new I18nKey("falsePositives", Contact)
val `ifLegit` = new I18nKey("ifLegit", Contact)
val `accountLost` = new I18nKey("accountLost", Contact)
val `doNotDeny` = new I18nKey("doNotDeny", Contact)
val `otherRestriction` = new I18nKey("otherRestriction", Contact)
val `collaboration` = new I18nKey("collaboration", Contact)
val `monetizing` = new I18nKey("monetizing", Contact)
val `buyingLichess` = new I18nKey("buyingLichess", Contact)
val `authorizationToUse` = new I18nKey("authorizationToUse", Contact)
val `welcomeToUse` = new I18nKey("welcomeToUse", Contact)
val `videosAndBooks` = new I18nKey("videosAndBooks", Contact)
val `creditAppreciated` = new I18nKey("creditAppreciated", Contact)
val `noneOfTheAbove` = new I18nKey("noneOfTheAbove", Contact)
val `sendEmailAt` = new I18nKey("sendEmailAt", Contact)
val `explainYourRequest` = new I18nKey("explainYourRequest", Contact)
}

object patron {
val `donate` = new I18nKey("donate", Patron)
val `lichessPatron` = new I18nKey("lichessPatron", Patron)
val `freeAccount` = new I18nKey("freeAccount", Patron)
val `becomePatron` = new I18nKey("becomePatron", Patron)
val `xBecamePatron` = new I18nKey("xBecamePatron", Patron)
val `newPatrons` = new I18nKey("newPatrons", Patron)
val `freeChess` = new I18nKey("freeChess", Patron)
val `noAdsNoSubs` = new I18nKey("noAdsNoSubs", Patron)
val `thankYou` = new I18nKey("thankYou", Patron)
val `youHaveLifetime` = new I18nKey("youHaveLifetime", Patron)
val `patronUntil` = new I18nKey("patronUntil", Patron)
val `ifNotRenewed` = new I18nKey("ifNotRenewed", Patron)
val `weAreNonProfit` = new I18nKey("weAreNonProfit", Patron)
val `weRelyOnSupport` = new I18nKey("weRelyOnSupport", Patron)
val `lifetime` = new I18nKey("lifetime", Patron)
val `payLifetimeOnce` = new I18nKey("payLifetimeOnce", Patron)
val `lifetimePatron` = new I18nKey("lifetimePatron", Patron)
val `makeExtraDonation` = new I18nKey("makeExtraDonation", Patron)
val `monthly` = new I18nKey("monthly", Patron)
val `recurringBilling` = new I18nKey("recurringBilling", Patron)
val `onetime` = new I18nKey("onetime", Patron)
val `singleDonation` = new I18nKey("singleDonation", Patron)
val `otherAmount` = new I18nKey("otherAmount", Patron)
val `pleaseEnterAmount` = new I18nKey("pleaseEnterAmount", Patron)
val `withCreditCard` = new I18nKey("withCreditCard", Patron)
val `withPaypal` = new I18nKey("withPaypal", Patron)
val `weAreSmallTeam` = new I18nKey("weAreSmallTeam", Patron)
val `celebratedPatrons` = new I18nKey("celebratedPatrons", Patron)
val `whereMoneyGoes` = new I18nKey("whereMoneyGoes", Patron)
val `serversAndDeveloper` = new I18nKey("serversAndDeveloper", Patron)
val `costBreakdown` = new I18nKey("costBreakdown", Patron)
val `officialNonProfit` = new I18nKey("officialNonProfit", Patron)
val `actOfCreation` = new I18nKey("actOfCreation", Patron)
val `changeMonthlySupport` = new I18nKey("changeMonthlySupport", Patron)
val `changeOrContact` = new I18nKey("changeOrContact", Patron)
val `contactSupport` = new I18nKey("contactSupport", Patron)
val `otherMethods` = new I18nKey("otherMethods", Patron)
val `bankTransfers` = new I18nKey("bankTransfers", Patron)
val `bitcoin` = new I18nKey("bitcoin", Patron)
val `patronFeatures` = new I18nKey("patronFeatures", Patron)
val `noPatronFeatures` = new I18nKey("noPatronFeatures", Patron)
val `featuresComparison` = new I18nKey("featuresComparison", Patron)
val `youSupportWith` = new I18nKey("youSupportWith", Patron)
val `tyvm` = new I18nKey("tyvm", Patron)
val `currentStatus` = new I18nKey("currentStatus", Patron)
val `nextPayment` = new I18nKey("nextPayment", Patron)
val `youWillBeChargedXOnY` = new I18nKey("youWillBeChargedXOnY", Patron)
val `makeAdditionalDonation` = new I18nKey("makeAdditionalDonation", Patron)
val `update` = new I18nKey("update", Patron)
val `changeMonthlyAmount` = new I18nKey("changeMonthlyAmount", Patron)
val `cancelSupport` = new I18nKey("cancelSupport", Patron)
val `xOrY` = new I18nKey("xOrY", Patron)
val `decideHowMuch` = new I18nKey("decideHowMuch", Patron)
val `stopPayments` = new I18nKey("stopPayments", Patron)
val `noLongerSupport` = new I18nKey("noLongerSupport", Patron)
val `paymentHistory` = new I18nKey("paymentHistory", Patron)
val `paid` = new I18nKey("paid", Patron)
val `viewOthers` = new I18nKey("viewOthers", Patron)
val `date` = new I18nKey("date", Patron)
val `amount` = new I18nKey("amount", Patron)
val `transactionCompleted` = new I18nKey("transactionCompleted", Patron)
val `permanentPatron` = new I18nKey("permanentPatron", Patron)
val `checkOutProfile` = new I18nKey("checkOutProfile", Patron)
val `nowLifetime` = new I18nKey("nowLifetime", Patron)
val `nowOneMonth` = new I18nKey("nowOneMonth", Patron)
val `downgradeNextMonth` = new I18nKey("downgradeNextMonth", Patron)
val `patronForMonths` = new I18nKey("patronForMonths", Patron)
}

object coach {
val `lichessCoaches` = new I18nKey("lichessCoaches", Coach)
val `lichessCoach` = new I18nKey("lichessCoach", Coach)
val `areYouCoach` = new I18nKey("areYouCoach", Coach)
val `nmOrFideTitle` = new I18nKey("nmOrFideTitle", Coach)
val `sendApplication` = new I18nKey("sendApplication", Coach)
val `location` = new I18nKey("location", Coach)
val `languages` = new I18nKey("languages", Coach)
val `rating` = new I18nKey("rating", Coach)
val `hourlyRate` = new I18nKey("hourlyRate", Coach)
val `availability` = new I18nKey("availability", Coach)
val `accepting` = new I18nKey("accepting", Coach)
val `notAccepting` = new I18nKey("notAccepting", Coach)
val `xCoachesStudents` = new I18nKey("xCoachesStudents", Coach)
val `viewXProfile` = new I18nKey("viewXProfile", Coach)
val `sendPM` = new I18nKey("sendPM", Coach)
val `aboutMe` = new I18nKey("aboutMe", Coach)
val `playingExperience` = new I18nKey("playingExperience", Coach)
val `teachingExperience` = new I18nKey("teachingExperience", Coach)
val `otherExperiences` = new I18nKey("otherExperiences", Coach)
val `bestSkills` = new I18nKey("bestSkills", Coach)
val `teachingMethod` = new I18nKey("teachingMethod", Coach)
val `publicStudies` = new I18nKey("publicStudies", Coach)
val `youtubeVideos` = new I18nKey("youtubeVideos", Coach)
val `thankYouForReview` = new I18nKey("thankYouForReview", Coach)
val `xWillApproveIt` = new I18nKey("xWillApproveIt", Coach)
val `reviewCoach` = new I18nKey("reviewCoach", Coach)
val `describeExperienceWith` = new I18nKey("describeExperienceWith", Coach)
val `studentReviews` = new I18nKey("studentReviews", Coach)
}

object broadcast {
val `broadcasts` = new I18nKey("broadcasts", Broadcast)
val `liveBroadcasts` = new I18nKey("liveBroadcasts", Broadcast)
val `newBroadcast` = new I18nKey("newBroadcast", Broadcast)
val `ongoing` = new I18nKey("ongoing", Broadcast)
val `upcoming` = new I18nKey("upcoming", Broadcast)
val `completed` = new I18nKey("completed", Broadcast)
val `eventName` = new I18nKey("eventName", Broadcast)
val `eventDescription` = new I18nKey("eventDescription", Broadcast)
val `fullDescription` = new I18nKey("fullDescription", Broadcast)
val `fullDescriptionHelp` = new I18nKey("fullDescriptionHelp", Broadcast)
val `sourceUrl` = new I18nKey("sourceUrl", Broadcast)
val `sourceUrlHelp` = new I18nKey("sourceUrlHelp", Broadcast)
val `roundNumber` = new I18nKey("roundNumber", Broadcast)
val `startDate` = new I18nKey("startDate", Broadcast)
val `startDateHelp` = new I18nKey("startDateHelp", Broadcast)
val `credits` = new I18nKey("credits", Broadcast)
val `cloneBroadcast` = new I18nKey("cloneBroadcast", Broadcast)
val `resetBroadcast` = new I18nKey("resetBroadcast", Broadcast)
}

object streamer {
val `lichessStreamers` = new I18nKey("lichessStreamers", Streamer)
val `lichessStreamer` = new I18nKey("lichessStreamer", Streamer)
val `live` = new I18nKey("live", Streamer)
val `offline` = new I18nKey("offline", Streamer)
val `currentlyStreaming` = new I18nKey("currentlyStreaming", Streamer)
val `lastStream` = new I18nKey("lastStream", Streamer)
val `becomeStreamer` = new I18nKey("becomeStreamer", Streamer)
val `doYouHaveStream` = new I18nKey("doYouHaveStream", Streamer)
val `hereWeGo` = new I18nKey("hereWeGo", Streamer)
val `allStreamers` = new I18nKey("allStreamers", Streamer)
val `editPage` = new I18nKey("editPage", Streamer)
val `yourPage` = new I18nKey("yourPage", Streamer)
val `downloadKit` = new I18nKey("downloadKit", Streamer)
val `xIsStreaming` = new I18nKey("xIsStreaming", Streamer)
val `rules` = new I18nKey("rules", Streamer)
val `rule1` = new I18nKey("rule1", Streamer)
val `rule2` = new I18nKey("rule2", Streamer)
val `rule3` = new I18nKey("rule3", Streamer)
val `perks` = new I18nKey("perks", Streamer)
val `perk1` = new I18nKey("perk1", Streamer)
val `perk2` = new I18nKey("perk2", Streamer)
val `perk3` = new I18nKey("perk3", Streamer)
val `perk4` = new I18nKey("perk4", Streamer)
val `approved` = new I18nKey("approved", Streamer)
val `pendingReview` = new I18nKey("pendingReview", Streamer)
val `pleaseFillIn` = new I18nKey("pleaseFillIn", Streamer)
val `whenReady` = new I18nKey("whenReady", Streamer)
val `requestReview` = new I18nKey("requestReview", Streamer)
val `anotherLanguage` = new I18nKey("anotherLanguage", Streamer)
val `twitchUsername` = new I18nKey("twitchUsername", Streamer)
val `optionalOrEmpty` = new I18nKey("optionalOrEmpty", Streamer)
val `youtubeChannel` = new I18nKey("youtubeChannel", Streamer)
val `streamerName` = new I18nKey("streamerName", Streamer)
val `visibility` = new I18nKey("visibility", Streamer)
val `whenApproved` = new I18nKey("whenApproved", Streamer)
val `headline` = new I18nKey("headline", Streamer)
val `tellUsAboutTheStream` = new I18nKey("tellUsAboutTheStream", Streamer)
val `longDescription` = new I18nKey("longDescription", Streamer)
val `xStreamerPicture` = new I18nKey("xStreamerPicture", Streamer)
val `changePicture` = new I18nKey("changePicture", Streamer)
val `uploadPicture` = new I18nKey("uploadPicture", Streamer)
val `deletePicture` = new I18nKey("deletePicture", Streamer)
val `maxSize` = new I18nKey("maxSize", Streamer)
val `installBlocker` = new I18nKey("installBlocker", Streamer)
val `beSafe` = new I18nKey("beSafe", Streamer)
val `keepItShort` = new I18nKey("keepItShort", Streamer)
}

object tfa {
val `twoFactorAuth` = new I18nKey("twoFactorAuth", Tfa)
val `twoFactorHelp` = new I18nKey("twoFactorHelp", Tfa)
val `twoFactorApp` = new I18nKey("twoFactorApp", Tfa)
val `scanTheCode` = new I18nKey("scanTheCode", Tfa)
val `enterPassword` = new I18nKey("enterPassword", Tfa)
val `authenticationCode` = new I18nKey("authenticationCode", Tfa)
val `ifYouLoseAccess` = new I18nKey("ifYouLoseAccess", Tfa)
val `enableTwoFactor` = new I18nKey("enableTwoFactor", Tfa)
val `disableTwoFactor` = new I18nKey("disableTwoFactor", Tfa)
val `twoFactorEnabled` = new I18nKey("twoFactorEnabled", Tfa)
val `twoFactorDisable` = new I18nKey("twoFactorDisable", Tfa)
}

object settings {
val `settings` = new I18nKey("settings", Settings)
val `closeAccount` = new I18nKey("closeAccount", Settings)
val `closingIsDefinitive` = new I18nKey("closingIsDefinitive", Settings)
val `cantOpenSimilarAccount` = new I18nKey("cantOpenSimilarAccount", Settings)
val `changedMindDoNotCloseAccount` = new I18nKey("changedMindDoNotCloseAccount", Settings)
val `closeAccountExplanation` = new I18nKey("closeAccountExplanation", Settings)
val `thisAccountIsClosed` = new I18nKey("thisAccountIsClosed", Settings)
}

object preferences {
val `preferences` = new I18nKey("preferences", Preferences)
val `gameDisplay` = new I18nKey("gameDisplay", Preferences)
val `pieceAnimation` = new I18nKey("pieceAnimation", Preferences)
val `materialDifference` = new I18nKey("materialDifference", Preferences)
val `boardHighlights` = new I18nKey("boardHighlights", Preferences)
val `pieceDestinations` = new I18nKey("pieceDestinations", Preferences)
val `boardCoordinates` = new I18nKey("boardCoordinates", Preferences)
val `moveListWhilePlaying` = new I18nKey("moveListWhilePlaying", Preferences)
val `pgnPieceNotation` = new I18nKey("pgnPieceNotation", Preferences)
val `chessPieceSymbol` = new I18nKey("chessPieceSymbol", Preferences)
val `pgnLetter` = new I18nKey("pgnLetter", Preferences)
val `zenMode` = new I18nKey("zenMode", Preferences)
val `displayBoardResizeHandle` = new I18nKey("displayBoardResizeHandle", Preferences)
val `onlyOnInitialPosition` = new I18nKey("onlyOnInitialPosition", Preferences)
val `blindfoldChess` = new I18nKey("blindfoldChess", Preferences)
val `chessClock` = new I18nKey("chessClock", Preferences)
val `tenthsOfSeconds` = new I18nKey("tenthsOfSeconds", Preferences)
val `whenTimeRemainingLessThanTenSeconds` = new I18nKey("whenTimeRemainingLessThanTenSeconds", Preferences)
val `horizontalGreenProgressBars` = new I18nKey("horizontalGreenProgressBars", Preferences)
val `soundWhenTimeGetsCritical` = new I18nKey("soundWhenTimeGetsCritical", Preferences)
val `giveMoreTime` = new I18nKey("giveMoreTime", Preferences)
val `gameBehavior` = new I18nKey("gameBehavior", Preferences)
val `howDoYouMovePieces` = new I18nKey("howDoYouMovePieces", Preferences)
val `clickTwoSquares` = new I18nKey("clickTwoSquares", Preferences)
val `dragPiece` = new I18nKey("dragPiece", Preferences)
val `bothClicksAndDrag` = new I18nKey("bothClicksAndDrag", Preferences)
val `premovesPlayingDuringOpponentTurn` = new I18nKey("premovesPlayingDuringOpponentTurn", Preferences)
val `takebacksWithOpponentApproval` = new I18nKey("takebacksWithOpponentApproval", Preferences)
val `inCasualGamesOnly` = new I18nKey("inCasualGamesOnly", Preferences)
val `promoteToQueenAutomatically` = new I18nKey("promoteToQueenAutomatically", Preferences)
val `whenPremoving` = new I18nKey("whenPremoving", Preferences)
val `claimDrawOnThreefoldRepetitionAutomatically` = new I18nKey("claimDrawOnThreefoldRepetitionAutomatically", Preferences)
val `whenTimeRemainingLessThanThirtySeconds` = new I18nKey("whenTimeRemainingLessThanThirtySeconds", Preferences)
val `moveConfirmation` = new I18nKey("moveConfirmation", Preferences)
val `inCorrespondenceGames` = new I18nKey("inCorrespondenceGames", Preferences)
val `correspondenceAndUnlimited` = new I18nKey("correspondenceAndUnlimited", Preferences)
val `confirmResignationAndDrawOffers` = new I18nKey("confirmResignationAndDrawOffers", Preferences)
val `castleByMovingTheKingTwoSquaresOrOntoTheRook` = new I18nKey("castleByMovingTheKingTwoSquaresOrOntoTheRook", Preferences)
val `castleByMovingTwoSquares` = new I18nKey("castleByMovingTwoSquares", Preferences)
val `castleByMovingOntoTheRook` = new I18nKey("castleByMovingOntoTheRook", Preferences)
val `inputMovesWithTheKeyboard` = new I18nKey("inputMovesWithTheKeyboard", Preferences)
val `yourPreferencesHaveBeenSaved` = new I18nKey("yourPreferencesHaveBeenSaved", Preferences)
}

object team {
val `team` = new I18nKey("team", Team)
val `teams` = new I18nKey("teams", Team)
val `allTeams` = new I18nKey("allTeams", Team)
val `newTeam` = new I18nKey("newTeam", Team)
val `myTeams` = new I18nKey("myTeams", Team)
val `noTeamFound` = new I18nKey("noTeamFound", Team)
val `joinTeam` = new I18nKey("joinTeam", Team)
val `quitTeam` = new I18nKey("quitTeam", Team)
val `anyoneCanJoin` = new I18nKey("anyoneCanJoin", Team)
val `aConfirmationIsRequiredToJoin` = new I18nKey("aConfirmationIsRequiredToJoin", Team)
val `joiningPolicy` = new I18nKey("joiningPolicy", Team)
val `teamLeader` = new I18nKey("teamLeader", Team)
val `teamBestPlayers` = new I18nKey("teamBestPlayers", Team)
val `teamRecentMembers` = new I18nKey("teamRecentMembers", Team)
val `kickSomeone` = new I18nKey("kickSomeone", Team)
val `whoToKick` = new I18nKey("whoToKick", Team)
val `appointOwner` = new I18nKey("appointOwner", Team)
val `changeOwner` = new I18nKey("changeOwner", Team)
val `willBeReviewed` = new I18nKey("willBeReviewed", Team)
val `beingReviewed` = new I18nKey("beingReviewed", Team)
val `teamBattle` = new I18nKey("teamBattle", Team)
val `nbMembers` = new I18nKey("nbMembers", Team)
val `xJoinRequests` = new I18nKey("xJoinRequests", Team)
}

object perfStat {
val `perfStats` = new I18nKey("perfStats", PerfStat)
val `viewTheGames` = new I18nKey("viewTheGames", PerfStat)
val `provisional` = new I18nKey("provisional", PerfStat)
val `notEnoughRatedGames` = new I18nKey("notEnoughRatedGames", PerfStat)
val `progressOverLastXGames` = new I18nKey("progressOverLastXGames", PerfStat)
val `ratingDeviation` = new I18nKey("ratingDeviation", PerfStat)
val `ratingDeviationHelp` = new I18nKey("ratingDeviationHelp", PerfStat)
val `totalGames` = new I18nKey("totalGames", PerfStat)
val `ratedGames` = new I18nKey("ratedGames", PerfStat)
val `tournamentGames` = new I18nKey("tournamentGames", PerfStat)
val `berserkedGames` = new I18nKey("berserkedGames", PerfStat)
val `timeSpentPlaying` = new I18nKey("timeSpentPlaying", PerfStat)
val `averageOpponent` = new I18nKey("averageOpponent", PerfStat)
val `victories` = new I18nKey("victories", PerfStat)
val `defeats` = new I18nKey("defeats", PerfStat)
val `disconnections` = new I18nKey("disconnections", PerfStat)
val `notEnoughGames` = new I18nKey("notEnoughGames", PerfStat)
val `highestRating` = new I18nKey("highestRating", PerfStat)
val `lowestRating` = new I18nKey("lowestRating", PerfStat)
val `fromXToY` = new I18nKey("fromXToY", PerfStat)
val `winningStreak` = new I18nKey("winningStreak", PerfStat)
val `losingStreak` = new I18nKey("losingStreak", PerfStat)
val `longestStreak` = new I18nKey("longestStreak", PerfStat)
val `currentStreak` = new I18nKey("currentStreak", PerfStat)
val `bestRated` = new I18nKey("bestRated", PerfStat)
val `worstRated` = new I18nKey("worstRated", PerfStat)
val `gamesInARow` = new I18nKey("gamesInARow", PerfStat)
val `lessThanOneHour` = new I18nKey("lessThanOneHour", PerfStat)
val `maxTimePlaying` = new I18nKey("maxTimePlaying", PerfStat)
val `now` = new I18nKey("now", PerfStat)
}

object search {
val `search` = new I18nKey("search", Search)
val `advancedSearch` = new I18nKey("advancedSearch", Search)
val `opponentName` = new I18nKey("opponentName", Search)
val `loser` = new I18nKey("loser", Search)
val `from` = new I18nKey("from", Search)
val `to` = new I18nKey("to", Search)
val `humanOrComputer` = new I18nKey("humanOrComputer", Search)
val `aiLevel` = new I18nKey("aiLevel", Search)
val `source` = new I18nKey("source", Search)
val `nbTurns` = new I18nKey("nbTurns", Search)
val `result` = new I18nKey("result", Search)
val `winnerColor` = new I18nKey("winnerColor", Search)
val `date` = new I18nKey("date", Search)
val `sort` = new I18nKey("sort", Search)
val `by` = new I18nKey("by", Search)
val `order` = new I18nKey("order", Search)
val `analysis` = new I18nKey("analysis", Search)
val `onlyAnalysed` = new I18nKey("onlyAnalysed", Search)
val `searchInXGames` = new I18nKey("searchInXGames", Search)
val `xGamesFound` = new I18nKey("xGamesFound", Search)
}

}
