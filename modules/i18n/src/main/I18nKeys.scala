// Generated with bin/trans-dump.js
package lila.i18n

// format: OFF
object I18nKeys {

val `playWithAFriend` = new I18nKey("playWithAFriend", Site)
val `playWithTheMachine` = new I18nKey("playWithTheMachine", Site)
val `toInviteSomeoneToPlayGiveThisUrl` = new I18nKey("toInviteSomeoneToPlayGiveThisUrl", Site)
val `gameOver` = new I18nKey("gameOver", Site)
val `waitingForOpponent` = new I18nKey("waitingForOpponent", Site)
val `waiting` = new I18nKey("waiting", Site)
val `yourTurn` = new I18nKey("yourTurn", Site)
val `aiNameLevelAiLevel` = new I18nKey("aiNameLevelAiLevel", Site)
val `level` = new I18nKey("level", Site)
val `toggleTheChat` = new I18nKey("toggleTheChat", Site)
val `toggleSound` = new I18nKey("toggleSound", Site)
val `chat` = new I18nKey("chat", Site)
val `resign` = new I18nKey("resign", Site)
val `checkmate` = new I18nKey("checkmate", Site)
val `stalemate` = new I18nKey("stalemate", Site)
val `white` = new I18nKey("white", Site)
val `black` = new I18nKey("black", Site)
val `randomColor` = new I18nKey("randomColor", Site)
val `createAGame` = new I18nKey("createAGame", Site)
val `whiteIsVictorious` = new I18nKey("whiteIsVictorious", Site)
val `blackIsVictorious` = new I18nKey("blackIsVictorious", Site)
val `youPlayTheWhitePieces` = new I18nKey("youPlayTheWhitePieces", Site)
val `youPlayTheBlackPieces` = new I18nKey("youPlayTheBlackPieces", Site)
val `itsYourTurn` = new I18nKey("itsYourTurn", Site)
val `kingInTheCenter` = new I18nKey("kingInTheCenter", Site)
val `threeChecks` = new I18nKey("threeChecks", Site)
val `raceFinished` = new I18nKey("raceFinished", Site)
val `variantEnding` = new I18nKey("variantEnding", Site)
val `newOpponent` = new I18nKey("newOpponent", Site)
val `yourOpponentWantsToPlayANewGameWithYou` = new I18nKey("yourOpponentWantsToPlayANewGameWithYou", Site)
val `joinTheGame` = new I18nKey("joinTheGame", Site)
val `whitePlays` = new I18nKey("whitePlays", Site)
val `blackPlays` = new I18nKey("blackPlays", Site)
val `opponentLeftChoices` = new I18nKey("opponentLeftChoices", Site)
val `makeYourOpponentResign` = new I18nKey("makeYourOpponentResign", Site)
val `forceResignation` = new I18nKey("forceResignation", Site)
val `forceDraw` = new I18nKey("forceDraw", Site)
val `talkInChat` = new I18nKey("talkInChat", Site)
val `theFirstPersonToComeOnThisUrlWillPlayWithYou` = new I18nKey("theFirstPersonToComeOnThisUrlWillPlayWithYou", Site)
val `whiteResigned` = new I18nKey("whiteResigned", Site)
val `blackResigned` = new I18nKey("blackResigned", Site)
val `whiteLeftTheGame` = new I18nKey("whiteLeftTheGame", Site)
val `blackLeftTheGame` = new I18nKey("blackLeftTheGame", Site)
val `shareThisUrlToLetSpectatorsSeeTheGame` = new I18nKey("shareThisUrlToLetSpectatorsSeeTheGame", Site)
val `theComputerAnalysisHasFailed` = new I18nKey("theComputerAnalysisHasFailed", Site)
val `viewTheComputerAnalysis` = new I18nKey("viewTheComputerAnalysis", Site)
val `requestAComputerAnalysis` = new I18nKey("requestAComputerAnalysis", Site)
val `computerAnalysis` = new I18nKey("computerAnalysis", Site)
val `computerAnalysisAvailable` = new I18nKey("computerAnalysisAvailable", Site)
val `analysis` = new I18nKey("analysis", Site)
val `depthX` = new I18nKey("depthX", Site)
val `usingServerAnalysis` = new I18nKey("usingServerAnalysis", Site)
val `loadingEngine` = new I18nKey("loadingEngine", Site)
val `cloudAnalysis` = new I18nKey("cloudAnalysis", Site)
val `goDeeper` = new I18nKey("goDeeper", Site)
val `showThreat` = new I18nKey("showThreat", Site)
val `inLocalBrowser` = new I18nKey("inLocalBrowser", Site)
val `toggleLocalEvaluation` = new I18nKey("toggleLocalEvaluation", Site)
val `promoteVariation` = new I18nKey("promoteVariation", Site)
val `makeMainLine` = new I18nKey("makeMainLine", Site)
val `deleteFromHere` = new I18nKey("deleteFromHere", Site)
val `forceVariation` = new I18nKey("forceVariation", Site)
val `move` = new I18nKey("move", Site)
val `variantLoss` = new I18nKey("variantLoss", Site)
val `variantWin` = new I18nKey("variantWin", Site)
val `insufficientMaterial` = new I18nKey("insufficientMaterial", Site)
val `pawnMove` = new I18nKey("pawnMove", Site)
val `capture` = new I18nKey("capture", Site)
val `close` = new I18nKey("close", Site)
val `winning` = new I18nKey("winning", Site)
val `losing` = new I18nKey("losing", Site)
val `drawn` = new I18nKey("drawn", Site)
val `unknown` = new I18nKey("unknown", Site)
val `database` = new I18nKey("database", Site)
val `whiteDrawBlack` = new I18nKey("whiteDrawBlack", Site)
val `averageRatingX` = new I18nKey("averageRatingX", Site)
val `recentGames` = new I18nKey("recentGames", Site)
val `topGames` = new I18nKey("topGames", Site)
val `masterDbExplanation` = new I18nKey("masterDbExplanation", Site)
val `noGameFound` = new I18nKey("noGameFound", Site)
val `maybeIncludeMoreGamesFromThePreferencesMenu` = new I18nKey("maybeIncludeMoreGamesFromThePreferencesMenu", Site)
val `openingExplorer` = new I18nKey("openingExplorer", Site)
val `xOpeningExplorer` = new I18nKey("xOpeningExplorer", Site)
val `winPreventedBy50MoveRule` = new I18nKey("winPreventedBy50MoveRule", Site)
val `lossSavedBy50MoveRule` = new I18nKey("lossSavedBy50MoveRule", Site)
val `allSet` = new I18nKey("allSet", Site)
val `importPgn` = new I18nKey("importPgn", Site)
val `delete` = new I18nKey("delete", Site)
val `deleteThisImportedGame` = new I18nKey("deleteThisImportedGame", Site)
val `replayMode` = new I18nKey("replayMode", Site)
val `realtimeReplay` = new I18nKey("realtimeReplay", Site)
val `byCPL` = new I18nKey("byCPL", Site)
val `openStudy` = new I18nKey("openStudy", Site)
val `enable` = new I18nKey("enable", Site)
val `bestMoveArrow` = new I18nKey("bestMoveArrow", Site)
val `evaluationGauge` = new I18nKey("evaluationGauge", Site)
val `multipleLines` = new I18nKey("multipleLines", Site)
val `cpus` = new I18nKey("cpus", Site)
val `memory` = new I18nKey("memory", Site)
val `infiniteAnalysis` = new I18nKey("infiniteAnalysis", Site)
val `removesTheDepthLimit` = new I18nKey("removesTheDepthLimit", Site)
val `blunder` = new I18nKey("blunder", Site)
val `blunders` = new I18nKey("blunders", Site)
val `mistake` = new I18nKey("mistake", Site)
val `mistakes` = new I18nKey("mistakes", Site)
val `inaccuracy` = new I18nKey("inaccuracy", Site)
val `inaccuracies` = new I18nKey("inaccuracies", Site)
val `moveTimes` = new I18nKey("moveTimes", Site)
val `flipBoard` = new I18nKey("flipBoard", Site)
val `threefoldRepetition` = new I18nKey("threefoldRepetition", Site)
val `claimADraw` = new I18nKey("claimADraw", Site)
val `offerDraw` = new I18nKey("offerDraw", Site)
val `draw` = new I18nKey("draw", Site)
val `currentGames` = new I18nKey("currentGames", Site)
val `viewInFullSize` = new I18nKey("viewInFullSize", Site)
val `logOut` = new I18nKey("logOut", Site)
val `signIn` = new I18nKey("signIn", Site)
val `youNeedAnAccountToDoThat` = new I18nKey("youNeedAnAccountToDoThat", Site)
val `signUp` = new I18nKey("signUp", Site)
val `computersAreNotAllowedToPlay` = new I18nKey("computersAreNotAllowedToPlay", Site)
val `games` = new I18nKey("games", Site)
val `forum` = new I18nKey("forum", Site)
val `xPostedInForumY` = new I18nKey("xPostedInForumY", Site)
val `latestForumPosts` = new I18nKey("latestForumPosts", Site)
val `players` = new I18nKey("players", Site)
val `friends` = new I18nKey("friends", Site)
val `discussions` = new I18nKey("discussions", Site)
val `today` = new I18nKey("today", Site)
val `yesterday` = new I18nKey("yesterday", Site)
val `minutesPerSide` = new I18nKey("minutesPerSide", Site)
val `variant` = new I18nKey("variant", Site)
val `variants` = new I18nKey("variants", Site)
val `timeControl` = new I18nKey("timeControl", Site)
val `realTime` = new I18nKey("realTime", Site)
val `correspondence` = new I18nKey("correspondence", Site)
val `daysPerTurn` = new I18nKey("daysPerTurn", Site)
val `oneDay` = new I18nKey("oneDay", Site)
val `time` = new I18nKey("time", Site)
val `rating` = new I18nKey("rating", Site)
val `ratingStats` = new I18nKey("ratingStats", Site)
val `username` = new I18nKey("username", Site)
val `usernameOrEmail` = new I18nKey("usernameOrEmail", Site)
val `changeUsername` = new I18nKey("changeUsername", Site)
val `changeUsernameNotSame` = new I18nKey("changeUsernameNotSame", Site)
val `changeUsernameDescription` = new I18nKey("changeUsernameDescription", Site)
val `password` = new I18nKey("password", Site)
val `changePassword` = new I18nKey("changePassword", Site)
val `changeEmail` = new I18nKey("changeEmail", Site)
val `email` = new I18nKey("email", Site)
val `passwordReset` = new I18nKey("passwordReset", Site)
val `forgotPassword` = new I18nKey("forgotPassword", Site)
val `rank` = new I18nKey("rank", Site)
val `rankX` = new I18nKey("rankX", Site)
val `gamesPlayed` = new I18nKey("gamesPlayed", Site)
val `cancel` = new I18nKey("cancel", Site)
val `timeOut` = new I18nKey("timeOut", Site)
val `drawOfferSent` = new I18nKey("drawOfferSent", Site)
val `drawOfferDeclined` = new I18nKey("drawOfferDeclined", Site)
val `drawOfferAccepted` = new I18nKey("drawOfferAccepted", Site)
val `drawOfferCanceled` = new I18nKey("drawOfferCanceled", Site)
val `whiteOffersDraw` = new I18nKey("whiteOffersDraw", Site)
val `blackOffersDraw` = new I18nKey("blackOffersDraw", Site)
val `whiteDeclinesDraw` = new I18nKey("whiteDeclinesDraw", Site)
val `blackDeclinesDraw` = new I18nKey("blackDeclinesDraw", Site)
val `yourOpponentOffersADraw` = new I18nKey("yourOpponentOffersADraw", Site)
val `accept` = new I18nKey("accept", Site)
val `decline` = new I18nKey("decline", Site)
val `playingRightNow` = new I18nKey("playingRightNow", Site)
val `eventInProgress` = new I18nKey("eventInProgress", Site)
val `finished` = new I18nKey("finished", Site)
val `finishesX` = new I18nKey("finishesX", Site)
val `abortGame` = new I18nKey("abortGame", Site)
val `gameAborted` = new I18nKey("gameAborted", Site)
val `standard` = new I18nKey("standard", Site)
val `unlimited` = new I18nKey("unlimited", Site)
val `mode` = new I18nKey("mode", Site)
val `casual` = new I18nKey("casual", Site)
val `rated` = new I18nKey("rated", Site)
val `casualTournament` = new I18nKey("casualTournament", Site)
val `ratedTournament` = new I18nKey("ratedTournament", Site)
val `thisGameIsRated` = new I18nKey("thisGameIsRated", Site)
val `rematch` = new I18nKey("rematch", Site)
val `rematchOfferSent` = new I18nKey("rematchOfferSent", Site)
val `rematchOfferSentWhite` = new I18nKey("rematchOfferSentWhite", Site)
val `rematchOfferSentBlack` = new I18nKey("rematchOfferSentBlack", Site)
val `rematchOfferAccepted` = new I18nKey("rematchOfferAccepted", Site)
val `rematchOfferCanceled` = new I18nKey("rematchOfferCanceled", Site)
val `rematchOfferDeclined` = new I18nKey("rematchOfferDeclined", Site)
val `cancelRematchOffer` = new I18nKey("cancelRematchOffer", Site)
val `viewRematch` = new I18nKey("viewRematch", Site)
val `play` = new I18nKey("play", Site)
val `inbox` = new I18nKey("inbox", Site)
val `chatRoom` = new I18nKey("chatRoom", Site)
val `loginToChat` = new I18nKey("loginToChat", Site)
val `youHaveBeenTimedOut` = new I18nKey("youHaveBeenTimedOut", Site)
val `spectatorRoom` = new I18nKey("spectatorRoom", Site)
val `composeMessage` = new I18nKey("composeMessage", Site)
val `noNewMessages` = new I18nKey("noNewMessages", Site)
val `subject` = new I18nKey("subject", Site)
val `recipient` = new I18nKey("recipient", Site)
val `send` = new I18nKey("send", Site)
val `incrementInSeconds` = new I18nKey("incrementInSeconds", Site)
val `freeOnlineChess` = new I18nKey("freeOnlineChess", Site)
val `spectators` = new I18nKey("spectators", Site)
val `exportGames` = new I18nKey("exportGames", Site)
val `ratingRange` = new I18nKey("ratingRange", Site)
val `thisPlayerUsesChessComputerAssistance` = new I18nKey("thisPlayerUsesChessComputerAssistance", Site)
val `thisPlayerArtificiallyIncreasesTheirRating` = new I18nKey("thisPlayerArtificiallyIncreasesTheirRating", Site)
val `openingExplorerAndTablebase` = new I18nKey("openingExplorerAndTablebase", Site)
val `takeback` = new I18nKey("takeback", Site)
val `proposeATakeback` = new I18nKey("proposeATakeback", Site)
val `takebackPropositionSent` = new I18nKey("takebackPropositionSent", Site)
val `takebackPropositionDeclined` = new I18nKey("takebackPropositionDeclined", Site)
val `takebackPropositionAccepted` = new I18nKey("takebackPropositionAccepted", Site)
val `takebackPropositionCanceled` = new I18nKey("takebackPropositionCanceled", Site)
val `yourOpponentProposesATakeback` = new I18nKey("yourOpponentProposesATakeback", Site)
val `bookmarkThisGame` = new I18nKey("bookmarkThisGame", Site)
val `tournament` = new I18nKey("tournament", Site)
val `tournaments` = new I18nKey("tournaments", Site)
val `tournamentPoints` = new I18nKey("tournamentPoints", Site)
val `viewTournament` = new I18nKey("viewTournament", Site)
val `backToTournament` = new I18nKey("backToTournament", Site)
val `thematic` = new I18nKey("thematic", Site)
val `yourPerfRatingIsProvisional` = new I18nKey("yourPerfRatingIsProvisional", Site)
val `yourPerfRatingIsTooHigh` = new I18nKey("yourPerfRatingIsTooHigh", Site)
val `yourTopWeeklyPerfRatingIsTooHigh` = new I18nKey("yourTopWeeklyPerfRatingIsTooHigh", Site)
val `yourPerfRatingIsTooLow` = new I18nKey("yourPerfRatingIsTooLow", Site)
val `ratedMoreThanInPerf` = new I18nKey("ratedMoreThanInPerf", Site)
val `ratedLessThanInPerf` = new I18nKey("ratedLessThanInPerf", Site)
val `mustBeInTeam` = new I18nKey("mustBeInTeam", Site)
val `youAreNotInTeam` = new I18nKey("youAreNotInTeam", Site)
val `backToGame` = new I18nKey("backToGame", Site)
val `siteDescription` = new I18nKey("siteDescription", Site)
val `xJoinedTeamY` = new I18nKey("xJoinedTeamY", Site)
val `xCreatedTeamY` = new I18nKey("xCreatedTeamY", Site)
val `xStartedStreaming` = new I18nKey("xStartedStreaming", Site)
val `averageElo` = new I18nKey("averageElo", Site)
val `location` = new I18nKey("location", Site)
val `filterGames` = new I18nKey("filterGames", Site)
val `reset` = new I18nKey("reset", Site)
val `apply` = new I18nKey("apply", Site)
val `leaderboard` = new I18nKey("leaderboard", Site)
val `pasteTheFenStringHere` = new I18nKey("pasteTheFenStringHere", Site)
val `pasteThePgnStringHere` = new I18nKey("pasteThePgnStringHere", Site)
val `fromPosition` = new I18nKey("fromPosition", Site)
val `continueFromHere` = new I18nKey("continueFromHere", Site)
val `toStudy` = new I18nKey("toStudy", Site)
val `importGame` = new I18nKey("importGame", Site)
val `importGameExplanation` = new I18nKey("importGameExplanation", Site)
val `thisIsAChessCaptcha` = new I18nKey("thisIsAChessCaptcha", Site)
val `clickOnTheBoardToMakeYourMove` = new I18nKey("clickOnTheBoardToMakeYourMove", Site)
val `captcha.fail` = new I18nKey("captcha.fail", Site)
val `notACheckmate` = new I18nKey("notACheckmate", Site)
val `whiteCheckmatesInOneMove` = new I18nKey("whiteCheckmatesInOneMove", Site)
val `blackCheckmatesInOneMove` = new I18nKey("blackCheckmatesInOneMove", Site)
val `retry` = new I18nKey("retry", Site)
val `reconnecting` = new I18nKey("reconnecting", Site)
val `noFriendsOnline` = new I18nKey("noFriendsOnline", Site)
val `findFriends` = new I18nKey("findFriends", Site)
val `favoriteOpponents` = new I18nKey("favoriteOpponents", Site)
val `follow` = new I18nKey("follow", Site)
val `following` = new I18nKey("following", Site)
val `unfollow` = new I18nKey("unfollow", Site)
val `block` = new I18nKey("block", Site)
val `blocked` = new I18nKey("blocked", Site)
val `unblock` = new I18nKey("unblock", Site)
val `followsYou` = new I18nKey("followsYou", Site)
val `xStartedFollowingY` = new I18nKey("xStartedFollowingY", Site)
val `more` = new I18nKey("more", Site)
val `memberSince` = new I18nKey("memberSince", Site)
val `lastSeenActive` = new I18nKey("lastSeenActive", Site)
val `challengeToPlay` = new I18nKey("challengeToPlay", Site)
val `player` = new I18nKey("player", Site)
val `list` = new I18nKey("list", Site)
val `graph` = new I18nKey("graph", Site)
val `required` = new I18nKey("required", Site)
val `openTournaments` = new I18nKey("openTournaments", Site)
val `duration` = new I18nKey("duration", Site)
val `winner` = new I18nKey("winner", Site)
val `standing` = new I18nKey("standing", Site)
val `createANewTournament` = new I18nKey("createANewTournament", Site)
val `tournamentCalendar` = new I18nKey("tournamentCalendar", Site)
val `conditionOfEntry` = new I18nKey("conditionOfEntry", Site)
val `advancedSettings` = new I18nKey("advancedSettings", Site)
val `safeTournamentName` = new I18nKey("safeTournamentName", Site)
val `inappropriateNameWarning` = new I18nKey("inappropriateNameWarning", Site)
val `emptyTournamentName` = new I18nKey("emptyTournamentName", Site)
val `recommendNotTouching` = new I18nKey("recommendNotTouching", Site)
val `fewerPlayers` = new I18nKey("fewerPlayers", Site)
val `showAdvancedSettings` = new I18nKey("showAdvancedSettings", Site)
val `makePrivateTournament` = new I18nKey("makePrivateTournament", Site)
val `join` = new I18nKey("join", Site)
val `withdraw` = new I18nKey("withdraw", Site)
val `points` = new I18nKey("points", Site)
val `wins` = new I18nKey("wins", Site)
val `losses` = new I18nKey("losses", Site)
val `winStreak` = new I18nKey("winStreak", Site)
val `createdBy` = new I18nKey("createdBy", Site)
val `tournamentIsStarting` = new I18nKey("tournamentIsStarting", Site)
val `tournamentPairingsAreNowClosed` = new I18nKey("tournamentPairingsAreNowClosed", Site)
val `standByX` = new I18nKey("standByX", Site)
val `youArePlaying` = new I18nKey("youArePlaying", Site)
val `winRate` = new I18nKey("winRate", Site)
val `berserkRate` = new I18nKey("berserkRate", Site)
val `performance` = new I18nKey("performance", Site)
val `tournamentComplete` = new I18nKey("tournamentComplete", Site)
val `movesPlayed` = new I18nKey("movesPlayed", Site)
val `whiteWins` = new I18nKey("whiteWins", Site)
val `blackWins` = new I18nKey("blackWins", Site)
val `draws` = new I18nKey("draws", Site)
val `nextXTournament` = new I18nKey("nextXTournament", Site)
val `viewMoreTournaments` = new I18nKey("viewMoreTournaments", Site)
val `averageOpponent` = new I18nKey("averageOpponent", Site)
val `membersOnly` = new I18nKey("membersOnly", Site)
val `boardEditor` = new I18nKey("boardEditor", Site)
val `setTheBoard` = new I18nKey("setTheBoard", Site)
val `popularOpenings` = new I18nKey("popularOpenings", Site)
val `startPosition` = new I18nKey("startPosition", Site)
val `clearBoard` = new I18nKey("clearBoard", Site)
val `savePosition` = new I18nKey("savePosition", Site)
val `loadPosition` = new I18nKey("loadPosition", Site)
val `isPrivate` = new I18nKey("isPrivate", Site)
val `reportXToModerators` = new I18nKey("reportXToModerators", Site)
val `profileCompletion` = new I18nKey("profileCompletion", Site)
val `xRating` = new I18nKey("xRating", Site)
val `ifNoneLeaveEmpty` = new I18nKey("ifNoneLeaveEmpty", Site)
val `gameCompletionRate` = new I18nKey("gameCompletionRate", Site)
val `profile` = new I18nKey("profile", Site)
val `editProfile` = new I18nKey("editProfile", Site)
val `firstName` = new I18nKey("firstName", Site)
val `lastName` = new I18nKey("lastName", Site)
val `biography` = new I18nKey("biography", Site)
val `country` = new I18nKey("country", Site)
val `socialMediaLinks` = new I18nKey("socialMediaLinks", Site)
val `inlineNotation` = new I18nKey("inlineNotation", Site)
val `watchLichessTV` = new I18nKey("watchLichessTV", Site)
val `previouslyOnLichessTV` = new I18nKey("previouslyOnLichessTV", Site)
val `onlinePlayers` = new I18nKey("onlinePlayers", Site)
val `activeToday` = new I18nKey("activeToday", Site)
val `activePlayers` = new I18nKey("activePlayers", Site)
val `bewareTheGameIsRatedButHasNoClock` = new I18nKey("bewareTheGameIsRatedButHasNoClock", Site)
val `yourPuzzleRatingX` = new I18nKey("yourPuzzleRatingX", Site)
val `findTheBestMoveForWhite` = new I18nKey("findTheBestMoveForWhite", Site)
val `findTheBestMoveForBlack` = new I18nKey("findTheBestMoveForBlack", Site)
val `toTrackYourProgress` = new I18nKey("toTrackYourProgress", Site)
val `puzzleId` = new I18nKey("puzzleId", Site)
val `puzzleOfTheDay` = new I18nKey("puzzleOfTheDay", Site)
val `clickToSolve` = new I18nKey("clickToSolve", Site)
val `goodMove` = new I18nKey("goodMove", Site)
val `butYouCanDoBetter` = new I18nKey("butYouCanDoBetter", Site)
val `bestMove` = new I18nKey("bestMove", Site)
val `keepGoing` = new I18nKey("keepGoing", Site)
val `puzzleFailed` = new I18nKey("puzzleFailed", Site)
val `butYouCanKeepTrying` = new I18nKey("butYouCanKeepTrying", Site)
val `success` = new I18nKey("success", Site)
val `wasThisPuzzleAnyGood` = new I18nKey("wasThisPuzzleAnyGood", Site)
val `pleaseVotePuzzle` = new I18nKey("pleaseVotePuzzle", Site)
val `thankYou` = new I18nKey("thankYou", Site)
val `ratingX` = new I18nKey("ratingX", Site)
val `hidden` = new I18nKey("hidden", Site)
val `fromGameLink` = new I18nKey("fromGameLink", Site)
val `continueTraining` = new I18nKey("continueTraining", Site)
val `retryThisPuzzle` = new I18nKey("retryThisPuzzle", Site)
val `thisPuzzleIsCorrect` = new I18nKey("thisPuzzleIsCorrect", Site)
val `thisPuzzleIsWrong` = new I18nKey("thisPuzzleIsWrong", Site)
val `automaticallyProceedToNextGameAfterMoving` = new I18nKey("automaticallyProceedToNextGameAfterMoving", Site)
val `autoSwitch` = new I18nKey("autoSwitch", Site)
val `puzzles` = new I18nKey("puzzles", Site)
val `latestUpdates` = new I18nKey("latestUpdates", Site)
val `tournamentWinners` = new I18nKey("tournamentWinners", Site)
val `name` = new I18nKey("name", Site)
val `description` = new I18nKey("description", Site)
val `no` = new I18nKey("no", Site)
val `yes` = new I18nKey("yes", Site)
val `help` = new I18nKey("help", Site)
val `createANewTopic` = new I18nKey("createANewTopic", Site)
val `topics` = new I18nKey("topics", Site)
val `posts` = new I18nKey("posts", Site)
val `lastPost` = new I18nKey("lastPost", Site)
val `views` = new I18nKey("views", Site)
val `replies` = new I18nKey("replies", Site)
val `replyToThisTopic` = new I18nKey("replyToThisTopic", Site)
val `reply` = new I18nKey("reply", Site)
val `message` = new I18nKey("message", Site)
val `createTheTopic` = new I18nKey("createTheTopic", Site)
val `reportAUser` = new I18nKey("reportAUser", Site)
val `user` = new I18nKey("user", Site)
val `reason` = new I18nKey("reason", Site)
val `whatIsIheMatter` = new I18nKey("whatIsIheMatter", Site)
val `cheat` = new I18nKey("cheat", Site)
val `insult` = new I18nKey("insult", Site)
val `troll` = new I18nKey("troll", Site)
val `other` = new I18nKey("other", Site)
val `reportDescriptionHelp` = new I18nKey("reportDescriptionHelp", Site)
val `error.provideOneCheatedGameLink` = new I18nKey("error.provideOneCheatedGameLink", Site)
val `by` = new I18nKey("by", Site)
val `thisTopicIsNowClosed` = new I18nKey("thisTopicIsNowClosed", Site)
val `theming` = new I18nKey("theming", Site)
val `blog` = new I18nKey("blog", Site)
val `questionsAndAnswers` = new I18nKey("questionsAndAnswers", Site)
val `notes` = new I18nKey("notes", Site)
val `typePrivateNotesHere` = new I18nKey("typePrivateNotesHere", Site)
val `invalidUsernameOrPassword` = new I18nKey("invalidUsernameOrPassword", Site)
val `incorrectPassword` = new I18nKey("incorrectPassword", Site)
val `invalidAuthenticationCode` = new I18nKey("invalidAuthenticationCode", Site)
val `emailMeALink` = new I18nKey("emailMeALink", Site)
val `currentPassword` = new I18nKey("currentPassword", Site)
val `newPassword` = new I18nKey("newPassword", Site)
val `newPasswordAgain` = new I18nKey("newPasswordAgain", Site)
val `clockInitialTime` = new I18nKey("clockInitialTime", Site)
val `clockIncrement` = new I18nKey("clockIncrement", Site)
val `privacy` = new I18nKey("privacy", Site)
val `letOtherPlayersFollowYou` = new I18nKey("letOtherPlayersFollowYou", Site)
val `letOtherPlayersChallengeYou` = new I18nKey("letOtherPlayersChallengeYou", Site)
val `letOtherPlayersInviteYouToStudy` = new I18nKey("letOtherPlayersInviteYouToStudy", Site)
val `sound` = new I18nKey("sound", Site)
val `none` = new I18nKey("none", Site)
val `fast` = new I18nKey("fast", Site)
val `normal` = new I18nKey("normal", Site)
val `slow` = new I18nKey("slow", Site)
val `insideTheBoard` = new I18nKey("insideTheBoard", Site)
val `outsideTheBoard` = new I18nKey("outsideTheBoard", Site)
val `onSlowGames` = new I18nKey("onSlowGames", Site)
val `always` = new I18nKey("always", Site)
val `never` = new I18nKey("never", Site)
val `difficultyEasy` = new I18nKey("difficultyEasy", Site)
val `difficultyNormal` = new I18nKey("difficultyNormal", Site)
val `difficultyHard` = new I18nKey("difficultyHard", Site)
val `xLeftANoteOnY` = new I18nKey("xLeftANoteOnY", Site)
val `xCompetesInY` = new I18nKey("xCompetesInY", Site)
val `xAskedY` = new I18nKey("xAskedY", Site)
val `xAnsweredY` = new I18nKey("xAnsweredY", Site)
val `xCommentedY` = new I18nKey("xCommentedY", Site)
val `victory` = new I18nKey("victory", Site)
val `defeat` = new I18nKey("defeat", Site)
val `victoryVsYInZ` = new I18nKey("victoryVsYInZ", Site)
val `defeatVsYInZ` = new I18nKey("defeatVsYInZ", Site)
val `drawVsYInZ` = new I18nKey("drawVsYInZ", Site)
val `timeline` = new I18nKey("timeline", Site)
val `starting` = new I18nKey("starting", Site)
val `allInformationIsPublicAndOptional` = new I18nKey("allInformationIsPublicAndOptional", Site)
val `yourCityRegionOrDepartment` = new I18nKey("yourCityRegionOrDepartment", Site)
val `biographyDescription` = new I18nKey("biographyDescription", Site)
val `listBlockedPlayers` = new I18nKey("listBlockedPlayers", Site)
val `human` = new I18nKey("human", Site)
val `computer` = new I18nKey("computer", Site)
val `side` = new I18nKey("side", Site)
val `clock` = new I18nKey("clock", Site)
val `unauthorizedError` = new I18nKey("unauthorizedError", Site)
val `noInternetConnection` = new I18nKey("noInternetConnection", Site)
val `connectedToLichess` = new I18nKey("connectedToLichess", Site)
val `signedOut` = new I18nKey("signedOut", Site)
val `loginSuccessful` = new I18nKey("loginSuccessful", Site)
val `playOnTheBoardOffline` = new I18nKey("playOnTheBoardOffline", Site)
val `playOfflineComputer` = new I18nKey("playOfflineComputer", Site)
val `opponent` = new I18nKey("opponent", Site)
val `learnMenu` = new I18nKey("learnMenu", Site)
val `studyMenu` = new I18nKey("studyMenu", Site)
val `practice` = new I18nKey("practice", Site)
val `community` = new I18nKey("community", Site)
val `tools` = new I18nKey("tools", Site)
val `increment` = new I18nKey("increment", Site)
val `sharePGN` = new I18nKey("sharePGN", Site)
val `playOnline` = new I18nKey("playOnline", Site)
val `playOffline` = new I18nKey("playOffline", Site)
val `allowAnalytics` = new I18nKey("allowAnalytics", Site)
val `shareGameURL` = new I18nKey("shareGameURL", Site)
val `error.required` = new I18nKey("error.required", Site)
val `error.email` = new I18nKey("error.email", Site)
val `error.email_acceptable` = new I18nKey("error.email_acceptable", Site)
val `error.email_unique` = new I18nKey("error.email_unique", Site)
val `error.email_different` = new I18nKey("error.email_different", Site)
val `ifRatingIsPlusMinusX` = new I18nKey("ifRatingIsPlusMinusX", Site)
val `onlyFriends` = new I18nKey("onlyFriends", Site)
val `menu` = new I18nKey("menu", Site)
val `castling` = new I18nKey("castling", Site)
val `whiteCastlingKingside` = new I18nKey("whiteCastlingKingside", Site)
val `blackCastlingKingside` = new I18nKey("blackCastlingKingside", Site)
val `tpTimeSpentPlaying` = new I18nKey("tpTimeSpentPlaying", Site)
val `watchGames` = new I18nKey("watchGames", Site)
val `tpTimeSpentOnTV` = new I18nKey("tpTimeSpentOnTV", Site)
val `watch` = new I18nKey("watch", Site)
val `videoLibrary` = new I18nKey("videoLibrary", Site)
val `streamersMenu` = new I18nKey("streamersMenu", Site)
val `mobileApp` = new I18nKey("mobileApp", Site)
val `webmasters` = new I18nKey("webmasters", Site)
val `about` = new I18nKey("about", Site)
val `aboutX` = new I18nKey("aboutX", Site)
val `xIsAFreeYLibreOpenSourceChessServer` = new I18nKey("xIsAFreeYLibreOpenSourceChessServer", Site)
val `really` = new I18nKey("really", Site)
val `contribute` = new I18nKey("contribute", Site)
val `termsOfService` = new I18nKey("termsOfService", Site)
val `sourceCode` = new I18nKey("sourceCode", Site)
val `simultaneousExhibitions` = new I18nKey("simultaneousExhibitions", Site)
val `host` = new I18nKey("host", Site)
val `hostColorX` = new I18nKey("hostColorX", Site)
val `createdSimuls` = new I18nKey("createdSimuls", Site)
val `hostANewSimul` = new I18nKey("hostANewSimul", Site)
val `noSimulFound` = new I18nKey("noSimulFound", Site)
val `noSimulExplanation` = new I18nKey("noSimulExplanation", Site)
val `returnToSimulHomepage` = new I18nKey("returnToSimulHomepage", Site)
val `aboutSimul` = new I18nKey("aboutSimul", Site)
val `aboutSimulImage` = new I18nKey("aboutSimulImage", Site)
val `aboutSimulRealLife` = new I18nKey("aboutSimulRealLife", Site)
val `aboutSimulRules` = new I18nKey("aboutSimulRules", Site)
val `aboutSimulSettings` = new I18nKey("aboutSimulSettings", Site)
val `create` = new I18nKey("create", Site)
val `whenCreateSimul` = new I18nKey("whenCreateSimul", Site)
val `simulVariantsHint` = new I18nKey("simulVariantsHint", Site)
val `simulClockHint` = new I18nKey("simulClockHint", Site)
val `simulAddExtraTime` = new I18nKey("simulAddExtraTime", Site)
val `simulHostExtraTime` = new I18nKey("simulHostExtraTime", Site)
val `lichessTournaments` = new I18nKey("lichessTournaments", Site)
val `tournamentFAQ` = new I18nKey("tournamentFAQ", Site)
val `tournamentOfficial` = new I18nKey("tournamentOfficial", Site)
val `timeBeforeTournamentStarts` = new I18nKey("timeBeforeTournamentStarts", Site)
val `averageCentipawnLoss` = new I18nKey("averageCentipawnLoss", Site)
val `keyboardShortcuts` = new I18nKey("keyboardShortcuts", Site)
val `keyMoveBackwardOrForward` = new I18nKey("keyMoveBackwardOrForward", Site)
val `keyGoToStartOrEnd` = new I18nKey("keyGoToStartOrEnd", Site)
val `keyShowOrHideComments` = new I18nKey("keyShowOrHideComments", Site)
val `keyEnterOrExitVariation` = new I18nKey("keyEnterOrExitVariation", Site)
val `newTournament` = new I18nKey("newTournament", Site)
val `tournamentHomeTitle` = new I18nKey("tournamentHomeTitle", Site)
val `tournamentHomeDescription` = new I18nKey("tournamentHomeDescription", Site)
val `tournamentNotFound` = new I18nKey("tournamentNotFound", Site)
val `tournamentDoesNotExist` = new I18nKey("tournamentDoesNotExist", Site)
val `tournamentMayHaveBeenCanceled` = new I18nKey("tournamentMayHaveBeenCanceled", Site)
val `returnToTournamentsHomepage` = new I18nKey("returnToTournamentsHomepage", Site)
val `weeklyPerfTypeRatingDistribution` = new I18nKey("weeklyPerfTypeRatingDistribution", Site)
val `yourPerfTypeRatingIsRating` = new I18nKey("yourPerfTypeRatingIsRating", Site)
val `youAreBetterThanPercentOfPerfTypePlayers` = new I18nKey("youAreBetterThanPercentOfPerfTypePlayers", Site)
val `youDoNotHaveAnEstablishedPerfTypeRating` = new I18nKey("youDoNotHaveAnEstablishedPerfTypeRating", Site)
val `yourRating` = new I18nKey("yourRating", Site)
val `cumulative` = new I18nKey("cumulative", Site)
val `glicko2Rating` = new I18nKey("glicko2Rating", Site)
val `checkYourEmail` = new I18nKey("checkYourEmail", Site)
val `weHaveSentYouAnEmailClickTheLink` = new I18nKey("weHaveSentYouAnEmailClickTheLink", Site)
val `ifYouDoNotSeeTheEmailCheckOtherPlaces` = new I18nKey("ifYouDoNotSeeTheEmailCheckOtherPlaces", Site)
val `weHaveSentYouAnEmailTo` = new I18nKey("weHaveSentYouAnEmailTo", Site)
val `byRegisteringYouAgreeToBeBoundByOur` = new I18nKey("byRegisteringYouAgreeToBeBoundByOur", Site)
val `networkLagBetweenYouAndLichess` = new I18nKey("networkLagBetweenYouAndLichess", Site)
val `timeToProcessAMoveOnLichessServer` = new I18nKey("timeToProcessAMoveOnLichessServer", Site)
val `downloadAnnotated` = new I18nKey("downloadAnnotated", Site)
val `downloadRaw` = new I18nKey("downloadRaw", Site)
val `downloadImported` = new I18nKey("downloadImported", Site)
val `printFriendlyPDF` = new I18nKey("printFriendlyPDF", Site)
val `crosstable` = new I18nKey("crosstable", Site)
val `youCanAlsoScrollOverTheBoardToMoveInTheGame` = new I18nKey("youCanAlsoScrollOverTheBoardToMoveInTheGame", Site)
val `analysisShapesHowTo` = new I18nKey("analysisShapesHowTo", Site)
val `letOtherPlayersMessageYou` = new I18nKey("letOtherPlayersMessageYou", Site)
val `shareYourInsightsData` = new I18nKey("shareYourInsightsData", Site)
val `withNobody` = new I18nKey("withNobody", Site)
val `withFriends` = new I18nKey("withFriends", Site)
val `withEverybody` = new I18nKey("withEverybody", Site)
val `youHaveAlreadyRegisteredTheEmail` = new I18nKey("youHaveAlreadyRegisteredTheEmail", Site)
val `kidMode` = new I18nKey("kidMode", Site)
val `kidModeExplanation` = new I18nKey("kidModeExplanation", Site)
val `inKidModeTheLichessLogoGetsIconX` = new I18nKey("inKidModeTheLichessLogoGetsIconX", Site)
val `enableKidMode` = new I18nKey("enableKidMode", Site)
val `disableKidMode` = new I18nKey("disableKidMode", Site)
val `security` = new I18nKey("security", Site)
val `thisIsAListOfDevicesThatHaveLoggedIntoYourAccount` = new I18nKey("thisIsAListOfDevicesThatHaveLoggedIntoYourAccount", Site)
val `alternativelyYouCanX` = new I18nKey("alternativelyYouCanX", Site)
val `revokeAllSessions` = new I18nKey("revokeAllSessions", Site)
val `playChessEverywhere` = new I18nKey("playChessEverywhere", Site)
val `asFreeAsLichess` = new I18nKey("asFreeAsLichess", Site)
val `builtForTheLoveOfChessNotMoney` = new I18nKey("builtForTheLoveOfChessNotMoney", Site)
val `everybodyGetsAllFeaturesForFree` = new I18nKey("everybodyGetsAllFeaturesForFree", Site)
val `zeroAdvertisement` = new I18nKey("zeroAdvertisement", Site)
val `fullFeatured` = new I18nKey("fullFeatured", Site)
val `phoneAndTablet` = new I18nKey("phoneAndTablet", Site)
val `bulletBlitzClassical` = new I18nKey("bulletBlitzClassical", Site)
val `correspondenceChess` = new I18nKey("correspondenceChess", Site)
val `onlineAndOfflinePlay` = new I18nKey("onlineAndOfflinePlay", Site)
val `viewTheSolution` = new I18nKey("viewTheSolution", Site)
val `followAndChallengeFriends` = new I18nKey("followAndChallengeFriends", Site)
val `gameAnalysis` = new I18nKey("gameAnalysis", Site)
val `xHostsY` = new I18nKey("xHostsY", Site)
val `xJoinsY` = new I18nKey("xJoinsY", Site)
val `xLikesY` = new I18nKey("xLikesY", Site)
val `xCreatesStudyY` = new I18nKey("xCreatesStudyY", Site)
val `quickPairing` = new I18nKey("quickPairing", Site)
val `lobby` = new I18nKey("lobby", Site)
val `anonymous` = new I18nKey("anonymous", Site)
val `yourScore` = new I18nKey("yourScore", Site)
val `language` = new I18nKey("language", Site)
val `background` = new I18nKey("background", Site)
val `light` = new I18nKey("light", Site)
val `dark` = new I18nKey("dark", Site)
val `transparent` = new I18nKey("transparent", Site)
val `backgroundImageUrl` = new I18nKey("backgroundImageUrl", Site)
val `boardGeometry` = new I18nKey("boardGeometry", Site)
val `boardTheme` = new I18nKey("boardTheme", Site)
val `boardSize` = new I18nKey("boardSize", Site)
val `pieceSet` = new I18nKey("pieceSet", Site)
val `embedInYourWebsite` = new I18nKey("embedInYourWebsite", Site)
val `usernameAlreadyUsed` = new I18nKey("usernameAlreadyUsed", Site)
val `usernamePrefixInvalid` = new I18nKey("usernamePrefixInvalid", Site)
val `usernameSuffixInvalid` = new I18nKey("usernameSuffixInvalid", Site)
val `usernameCharsInvalid` = new I18nKey("usernameCharsInvalid", Site)
val `usernameUnacceptable` = new I18nKey("usernameUnacceptable", Site)
val `directlySupportLichess` = new I18nKey("directlySupportLichess", Site)
val `playChessInStyle` = new I18nKey("playChessInStyle", Site)
val `chessBasics` = new I18nKey("chessBasics", Site)
val `coaches` = new I18nKey("coaches", Site)
val `invalidPgn` = new I18nKey("invalidPgn", Site)
val `invalidFen` = new I18nKey("invalidFen", Site)
val `error.minLength` = new I18nKey("error.minLength", Site)
val `error.maxLength` = new I18nKey("error.maxLength", Site)
val `error.min` = new I18nKey("error.min", Site)
val `error.max` = new I18nKey("error.max", Site)
val `error.unknown` = new I18nKey("error.unknown", Site)
val `custom` = new I18nKey("custom", Site)
val `notifications` = new I18nKey("notifications", Site)
val `challenges` = new I18nKey("challenges", Site)
val `perfRatingX` = new I18nKey("perfRatingX", Site)
val `practiceWithComputer` = new I18nKey("practiceWithComputer", Site)
val `anotherWasX` = new I18nKey("anotherWasX", Site)
val `bestWasX` = new I18nKey("bestWasX", Site)
val `youBrowsedAway` = new I18nKey("youBrowsedAway", Site)
val `resumePractice` = new I18nKey("resumePractice", Site)
val `theGameIsADraw` = new I18nKey("theGameIsADraw", Site)
val `computerThinking` = new I18nKey("computerThinking", Site)
val `seeBestMove` = new I18nKey("seeBestMove", Site)
val `hideBestMove` = new I18nKey("hideBestMove", Site)
val `getAHint` = new I18nKey("getAHint", Site)
val `evaluatingYourMove` = new I18nKey("evaluatingYourMove", Site)
val `whiteWinsGame` = new I18nKey("whiteWinsGame", Site)
val `blackWinsGame` = new I18nKey("blackWinsGame", Site)
val `learnFromYourMistakes` = new I18nKey("learnFromYourMistakes", Site)
val `learnFromThisMistake` = new I18nKey("learnFromThisMistake", Site)
val `skipThisMove` = new I18nKey("skipThisMove", Site)
val `next` = new I18nKey("next", Site)
val `xWasPlayed` = new I18nKey("xWasPlayed", Site)
val `findBetterMoveForWhite` = new I18nKey("findBetterMoveForWhite", Site)
val `findBetterMoveForBlack` = new I18nKey("findBetterMoveForBlack", Site)
val `resumeLearning` = new I18nKey("resumeLearning", Site)
val `youCanDoBetter` = new I18nKey("youCanDoBetter", Site)
val `tryAnotherMoveForWhite` = new I18nKey("tryAnotherMoveForWhite", Site)
val `tryAnotherMoveForBlack` = new I18nKey("tryAnotherMoveForBlack", Site)
val `solution` = new I18nKey("solution", Site)
val `waitingForAnalysis` = new I18nKey("waitingForAnalysis", Site)
val `noMistakesFoundForWhite` = new I18nKey("noMistakesFoundForWhite", Site)
val `noMistakesFoundForBlack` = new I18nKey("noMistakesFoundForBlack", Site)
val `doneReviewingWhiteMistakes` = new I18nKey("doneReviewingWhiteMistakes", Site)
val `doneReviewingBlackMistakes` = new I18nKey("doneReviewingBlackMistakes", Site)
val `doItAgain` = new I18nKey("doItAgain", Site)
val `reviewWhiteMistakes` = new I18nKey("reviewWhiteMistakes", Site)
val `reviewBlackMistakes` = new I18nKey("reviewBlackMistakes", Site)
val `advantage` = new I18nKey("advantage", Site)
val `opening` = new I18nKey("opening", Site)
val `middlegame` = new I18nKey("middlegame", Site)
val `endgame` = new I18nKey("endgame", Site)
val `registerToSendChallenges` = new I18nKey("registerToSendChallenges", Site)
val `youCannotChallengeX` = new I18nKey("youCannotChallengeX", Site)
val `xDoesNotAcceptChallenges` = new I18nKey("xDoesNotAcceptChallenges", Site)
val `yourXRatingIsTooFarFromY` = new I18nKey("yourXRatingIsTooFarFromY", Site)
val `cannotChallengeDueToProvisionalXRating` = new I18nKey("cannotChallengeDueToProvisionalXRating", Site)
val `xOnlyAcceptsChallengesFromFriends` = new I18nKey("xOnlyAcceptsChallengesFromFriends", Site)
val `conditionalPremoves` = new I18nKey("conditionalPremoves", Site)
val `addCurrentVariation` = new I18nKey("addCurrentVariation", Site)
val `playVariationToCreateConditionalPremoves` = new I18nKey("playVariationToCreateConditionalPremoves", Site)
val `noConditionalPremoves` = new I18nKey("noConditionalPremoves", Site)
val `playX` = new I18nKey("playX", Site)
val `sorry` = new I18nKey("sorry", Site)
val `weHadToTimeYouOutForAWhile` = new I18nKey("weHadToTimeYouOutForAWhile", Site)
val `timeoutExpires` = new I18nKey("timeoutExpires", Site)
val `why` = new I18nKey("why", Site)
val `pleasantChessExperience` = new I18nKey("pleasantChessExperience", Site)
val `goodPractice` = new I18nKey("goodPractice", Site)
val `potentialProblem` = new I18nKey("potentialProblem", Site)
val `howToAvoidThis` = new I18nKey("howToAvoidThis", Site)
val `playEveryGame` = new I18nKey("playEveryGame", Site)
val `tryToWin` = new I18nKey("tryToWin", Site)
val `resignLostGames` = new I18nKey("resignLostGames", Site)
val `temporaryInconvenience` = new I18nKey("temporaryInconvenience", Site)
val `wishYouGreatGames` = new I18nKey("wishYouGreatGames", Site)
val `thankYouForReading` = new I18nKey("thankYouForReading", Site)
val `lifetimeScore` = new I18nKey("lifetimeScore", Site)
val `currentMatchScore` = new I18nKey("currentMatchScore", Site)
val `agreementAssistance` = new I18nKey("agreementAssistance", Site)
val `agreementNice` = new I18nKey("agreementNice", Site)
val `agreementAccount` = new I18nKey("agreementAccount", Site)
val `agreementPolicy` = new I18nKey("agreementPolicy", Site)
val `searchOrStartNewDiscussion` = new I18nKey("searchOrStartNewDiscussion", Site)
val `edit` = new I18nKey("edit", Site)
val `opponentLeftCounter` = new I18nKey("opponentLeftCounter", Site)
val `mateInXHalfMoves` = new I18nKey("mateInXHalfMoves", Site)
val `nextCaptureOrPawnMoveInXHalfMoves` = new I18nKey("nextCaptureOrPawnMoveInXHalfMoves", Site)
val `nbPlayers` = new I18nKey("nbPlayers", Site)
val `nbGames` = new I18nKey("nbGames", Site)
val `nbBookmarks` = new I18nKey("nbBookmarks", Site)
val `nbDays` = new I18nKey("nbDays", Site)
val `nbHours` = new I18nKey("nbHours", Site)
val `rankIsUpdatedEveryNbMinutes` = new I18nKey("rankIsUpdatedEveryNbMinutes", Site)
val `nbPuzzles` = new I18nKey("nbPuzzles", Site)
val `nbGamesWithYou` = new I18nKey("nbGamesWithYou", Site)
val `nbRated` = new I18nKey("nbRated", Site)
val `nbWins` = new I18nKey("nbWins", Site)
val `nbLosses` = new I18nKey("nbLosses", Site)
val `nbDraws` = new I18nKey("nbDraws", Site)
val `nbPlaying` = new I18nKey("nbPlaying", Site)
val `giveNbSeconds` = new I18nKey("giveNbSeconds", Site)
val `nbTournamentPoints` = new I18nKey("nbTournamentPoints", Site)
val `nbStudies` = new I18nKey("nbStudies", Site)
val `moreThanNbRatedGames` = new I18nKey("moreThanNbRatedGames", Site)
val `moreThanNbPerfRatedGames` = new I18nKey("moreThanNbPerfRatedGames", Site)
val `needNbMorePerfGames` = new I18nKey("needNbMorePerfGames", Site)
val `needNbMoreGames` = new I18nKey("needNbMoreGames", Site)
val `nbImportedGames` = new I18nKey("nbImportedGames", Site)
val `nbFriendsOnline` = new I18nKey("nbFriendsOnline", Site)
val `nbFollowers` = new I18nKey("nbFollowers", Site)
val `nbFollowing` = new I18nKey("nbFollowing", Site)
val `lessThanNbMinutes` = new I18nKey("lessThanNbMinutes", Site)
val `playedXTimes` = new I18nKey("playedXTimes", Site)
val `nbGamesInPlay` = new I18nKey("nbGamesInPlay", Site)
val `maximumNbCharacters` = new I18nKey("maximumNbCharacters", Site)
val `blocks` = new I18nKey("blocks", Site)
val `nbForumPosts` = new I18nKey("nbForumPosts", Site)
val `nbPerfTypePlayersThisWeek` = new I18nKey("nbPerfTypePlayersThisWeek", Site)
val `availableInNbLanguages` = new I18nKey("availableInNbLanguages", Site)
val `nbSecondsToPlayTheFirstMove` = new I18nKey("nbSecondsToPlayTheFirstMove", Site)
val `nbSeconds` = new I18nKey("nbSeconds", Site)
val `andSaveNbPremoveLines` = new I18nKey("andSaveNbPremoveLines", Site)

object arena {
val `isItRated` = new I18nKey("arena:isItRated")
val `willBeNotified` = new I18nKey("arena:willBeNotified")
val `isRated` = new I18nKey("arena:isRated")
val `isNotRated` = new I18nKey("arena:isNotRated")
val `someRated` = new I18nKey("arena:someRated")
val `howAreScoresCalculated` = new I18nKey("arena:howAreScoresCalculated")
val `howAreScoresCalculatedAnswer` = new I18nKey("arena:howAreScoresCalculatedAnswer")
val `berserk` = new I18nKey("arena:berserk")
val `berserkAnswer` = new I18nKey("arena:berserkAnswer")
val `howIsTheWinnerDecided` = new I18nKey("arena:howIsTheWinnerDecided")
val `howIsTheWinnerDecidedAnswer` = new I18nKey("arena:howIsTheWinnerDecidedAnswer")
val `howDoesPairingWork` = new I18nKey("arena:howDoesPairingWork")
val `howDoesPairingWorkAnswer` = new I18nKey("arena:howDoesPairingWorkAnswer")
val `howDoesItEnd` = new I18nKey("arena:howDoesItEnd")
val `howDoesItEndAnswer` = new I18nKey("arena:howDoesItEndAnswer")
val `otherRules` = new I18nKey("arena:otherRules")
val `thereIsACountdown` = new I18nKey("arena:thereIsACountdown")
val `thisIsPrivate` = new I18nKey("arena:thisIsPrivate")
val `shareUrl` = new I18nKey("arena:shareUrl")
val `drawingWithinNbMoves` = new I18nKey("arena:drawingWithinNbMoves")
}

object emails {
val `emailConfirm_subject` = new I18nKey("emails:emailConfirm_subject")
val `emailConfirm_click` = new I18nKey("emails:emailConfirm_click")
val `emailConfirm_ignore` = new I18nKey("emails:emailConfirm_ignore")
val `passwordReset_subject` = new I18nKey("emails:passwordReset_subject")
val `passwordReset_intro` = new I18nKey("emails:passwordReset_intro")
val `passwordReset_clickOrIgnore` = new I18nKey("emails:passwordReset_clickOrIgnore")
val `emailChange_subject` = new I18nKey("emails:emailChange_subject")
val `emailChange_intro` = new I18nKey("emails:emailChange_intro")
val `emailChange_click` = new I18nKey("emails:emailChange_click")
val `welcome_subject` = new I18nKey("emails:welcome_subject")
val `welcome_text` = new I18nKey("emails:welcome_text")
val `logInToLichess` = new I18nKey("emails:logInToLichess")
val `common_orPaste` = new I18nKey("emails:common_orPaste")
val `common_note` = new I18nKey("emails:common_note")
val `common_contact` = new I18nKey("emails:common_contact")
}

object learn {
val `learnChess` = new I18nKey("learn:learnChess")
val `byPlaying` = new I18nKey("learn:byPlaying")
val `menu` = new I18nKey("learn:menu")
val `progressX` = new I18nKey("learn:progressX")
val `resetMyProgress` = new I18nKey("learn:resetMyProgress")
val `youWillLoseAllYourProgress` = new I18nKey("learn:youWillLoseAllYourProgress")
val `play` = new I18nKey("learn:play")
val `chessPieces` = new I18nKey("learn:chessPieces")
val `theRook` = new I18nKey("learn:theRook")
val `itMovesInStraightLines` = new I18nKey("learn:itMovesInStraightLines")
val `rookIntro` = new I18nKey("learn:rookIntro")
val `rookGoal` = new I18nKey("learn:rookGoal")
val `grabAllTheStars` = new I18nKey("learn:grabAllTheStars")
val `theFewerMoves` = new I18nKey("learn:theFewerMoves")
val `useTwoRooks` = new I18nKey("learn:useTwoRooks")
val `rookComplete` = new I18nKey("learn:rookComplete")
val `theBishop` = new I18nKey("learn:theBishop")
val `itMovesDiagonally` = new I18nKey("learn:itMovesDiagonally")
val `bishopIntro` = new I18nKey("learn:bishopIntro")
val `youNeedBothBishops` = new I18nKey("learn:youNeedBothBishops")
val `bishopComplete` = new I18nKey("learn:bishopComplete")
val `theQueen` = new I18nKey("learn:theQueen")
val `queenCombinesRookAndBishop` = new I18nKey("learn:queenCombinesRookAndBishop")
val `queenIntro` = new I18nKey("learn:queenIntro")
val `queenComplete` = new I18nKey("learn:queenComplete")
val `theKing` = new I18nKey("learn:theKing")
val `theMostImportantPiece` = new I18nKey("learn:theMostImportantPiece")
val `kingIntro` = new I18nKey("learn:kingIntro")
val `theKingIsSlow` = new I18nKey("learn:theKingIsSlow")
val `lastOne` = new I18nKey("learn:lastOne")
val `kingComplete` = new I18nKey("learn:kingComplete")
val `theKnight` = new I18nKey("learn:theKnight")
val `itMovesInAnLShape` = new I18nKey("learn:itMovesInAnLShape")
val `knightIntro` = new I18nKey("learn:knightIntro")
val `knightsHaveAFancyWay` = new I18nKey("learn:knightsHaveAFancyWay")
val `knightsCanJumpOverObstacles` = new I18nKey("learn:knightsCanJumpOverObstacles")
val `knightComplete` = new I18nKey("learn:knightComplete")
val `thePawn` = new I18nKey("learn:thePawn")
val `itMovesForwardOnly` = new I18nKey("learn:itMovesForwardOnly")
val `pawnIntro` = new I18nKey("learn:pawnIntro")
val `pawnsMoveOneSquareOnly` = new I18nKey("learn:pawnsMoveOneSquareOnly")
val `mostOfTheTimePromotingToAQueenIsBest` = new I18nKey("learn:mostOfTheTimePromotingToAQueenIsBest")
val `pawnsMoveForward` = new I18nKey("learn:pawnsMoveForward")
val `captureThenPromote` = new I18nKey("learn:captureThenPromote")
val `useAllThePawns` = new I18nKey("learn:useAllThePawns")
val `aPawnOnTheSecondRank` = new I18nKey("learn:aPawnOnTheSecondRank")
val `grabAllTheStarsNoNeedToPromote` = new I18nKey("learn:grabAllTheStarsNoNeedToPromote")
val `pawnComplete` = new I18nKey("learn:pawnComplete")
val `pawnPromotion` = new I18nKey("learn:pawnPromotion")
val `yourPawnReachedTheEndOfTheBoard` = new I18nKey("learn:yourPawnReachedTheEndOfTheBoard")
val `itNowPromotesToAStrongerPiece` = new I18nKey("learn:itNowPromotesToAStrongerPiece")
val `selectThePieceYouWant` = new I18nKey("learn:selectThePieceYouWant")
val `fundamentals` = new I18nKey("learn:fundamentals")
val `capture` = new I18nKey("learn:capture")
val `takeTheEnemyPieces` = new I18nKey("learn:takeTheEnemyPieces")
val `captureIntro` = new I18nKey("learn:captureIntro")
val `takeTheBlackPieces` = new I18nKey("learn:takeTheBlackPieces")
val `takeTheBlackPiecesAndDontLoseYours` = new I18nKey("learn:takeTheBlackPiecesAndDontLoseYours")
val `captureComplete` = new I18nKey("learn:captureComplete")
val `protection` = new I18nKey("learn:protection")
val `keepYourPiecesSafe` = new I18nKey("learn:keepYourPiecesSafe")
val `protectionIntro` = new I18nKey("learn:protectionIntro")
val `protectionComplete` = new I18nKey("learn:protectionComplete")
val `escape` = new I18nKey("learn:escape")
val `noEscape` = new I18nKey("learn:noEscape")
val `dontLetThemTakeAnyUndefendedPiece` = new I18nKey("learn:dontLetThemTakeAnyUndefendedPiece")
val `combat` = new I18nKey("learn:combat")
val `captureAndDefendPieces` = new I18nKey("learn:captureAndDefendPieces")
val `combatIntro` = new I18nKey("learn:combatIntro")
val `combatComplete` = new I18nKey("learn:combatComplete")
val `checkInOne` = new I18nKey("learn:checkInOne")
val `attackTheOpponentsKing` = new I18nKey("learn:attackTheOpponentsKing")
val `checkInOneIntro` = new I18nKey("learn:checkInOneIntro")
val `checkInOneGoal` = new I18nKey("learn:checkInOneGoal")
val `checkInOneComplete` = new I18nKey("learn:checkInOneComplete")
val `outOfCheck` = new I18nKey("learn:outOfCheck")
val `defendYourKing` = new I18nKey("learn:defendYourKing")
val `outOfCheckIntro` = new I18nKey("learn:outOfCheckIntro")
val `escapeWithTheKing` = new I18nKey("learn:escapeWithTheKing")
val `theKingCannotEscapeButBlock` = new I18nKey("learn:theKingCannotEscapeButBlock")
val `youCanGetOutOfCheckByTaking` = new I18nKey("learn:youCanGetOutOfCheckByTaking")
val `thisKnightIsCheckingThroughYourDefenses` = new I18nKey("learn:thisKnightIsCheckingThroughYourDefenses")
val `escapeOrBlock` = new I18nKey("learn:escapeOrBlock")
val `outOfCheckComplete` = new I18nKey("learn:outOfCheckComplete")
val `mateInOne` = new I18nKey("learn:mateInOne")
val `defeatTheOpponentsKing` = new I18nKey("learn:defeatTheOpponentsKing")
val `mateInOneIntro` = new I18nKey("learn:mateInOneIntro")
val `attackYourOpponentsKing` = new I18nKey("learn:attackYourOpponentsKing")
val `mateInOneComplete` = new I18nKey("learn:mateInOneComplete")
val `intermediate` = new I18nKey("learn:intermediate")
val `boardSetup` = new I18nKey("learn:boardSetup")
val `howTheGameStarts` = new I18nKey("learn:howTheGameStarts")
val `boardSetupIntro` = new I18nKey("learn:boardSetupIntro")
val `thisIsTheInitialPosition` = new I18nKey("learn:thisIsTheInitialPosition")
val `firstPlaceTheRooks` = new I18nKey("learn:firstPlaceTheRooks")
val `thenPlaceTheKnights` = new I18nKey("learn:thenPlaceTheKnights")
val `placeTheBishops` = new I18nKey("learn:placeTheBishops")
val `placeTheQueen` = new I18nKey("learn:placeTheQueen")
val `placeTheKing` = new I18nKey("learn:placeTheKing")
val `pawnsFormTheFrontLine` = new I18nKey("learn:pawnsFormTheFrontLine")
val `boardSetupComplete` = new I18nKey("learn:boardSetupComplete")
val `castling` = new I18nKey("learn:castling")
val `theSpecialKingMove` = new I18nKey("learn:theSpecialKingMove")
val `castlingIntro` = new I18nKey("learn:castlingIntro")
val `castleKingSide` = new I18nKey("learn:castleKingSide")
val `castleQueenSide` = new I18nKey("learn:castleQueenSide")
val `theKnightIsInTheWay` = new I18nKey("learn:theKnightIsInTheWay")
val `castleKingSideMovePiecesFirst` = new I18nKey("learn:castleKingSideMovePiecesFirst")
val `castleQueenSideMovePiecesFirst` = new I18nKey("learn:castleQueenSideMovePiecesFirst")
val `youCannotCastleIfMoved` = new I18nKey("learn:youCannotCastleIfMoved")
val `youCannotCastleIfAttacked` = new I18nKey("learn:youCannotCastleIfAttacked")
val `findAWayToCastleKingSide` = new I18nKey("learn:findAWayToCastleKingSide")
val `findAWayToCastleQueenSide` = new I18nKey("learn:findAWayToCastleQueenSide")
val `castlingComplete` = new I18nKey("learn:castlingComplete")
val `enPassant` = new I18nKey("learn:enPassant")
val `theSpecialPawnMove` = new I18nKey("learn:theSpecialPawnMove")
val `enPassantIntro` = new I18nKey("learn:enPassantIntro")
val `blackJustMovedThePawnByTwoSquares` = new I18nKey("learn:blackJustMovedThePawnByTwoSquares")
val `enPassantOnlyWorksImmediately` = new I18nKey("learn:enPassantOnlyWorksImmediately")
val `enPassantOnlyWorksOnFifthRank` = new I18nKey("learn:enPassantOnlyWorksOnFifthRank")
val `takeAllThePawnsEnPassant` = new I18nKey("learn:takeAllThePawnsEnPassant")
val `enPassantComplete` = new I18nKey("learn:enPassantComplete")
val `stalemate` = new I18nKey("learn:stalemate")
val `theGameIsADraw` = new I18nKey("learn:theGameIsADraw")
val `stalemateIntro` = new I18nKey("learn:stalemateIntro")
val `stalemateGoal` = new I18nKey("learn:stalemateGoal")
val `stalemateComplete` = new I18nKey("learn:stalemateComplete")
val `advanced` = new I18nKey("learn:advanced")
val `pieceValue` = new I18nKey("learn:pieceValue")
val `evaluatePieceStrength` = new I18nKey("learn:evaluatePieceStrength")
val `pieceValueIntro` = new I18nKey("learn:pieceValueIntro")
val `queenOverBishop` = new I18nKey("learn:queenOverBishop")
val `takeThePieceWithTheHighestValue` = new I18nKey("learn:takeThePieceWithTheHighestValue")
val `pieceValueComplete` = new I18nKey("learn:pieceValueComplete")
val `checkInTwo` = new I18nKey("learn:checkInTwo")
val `twoMovesToGiveCheck` = new I18nKey("learn:twoMovesToGiveCheck")
val `checkInTwoIntro` = new I18nKey("learn:checkInTwoIntro")
val `checkInTwoGoal` = new I18nKey("learn:checkInTwoGoal")
val `checkInTwoComplete` = new I18nKey("learn:checkInTwoComplete")
val `whatNext` = new I18nKey("learn:whatNext")
val `youKnowHowToPlayChess` = new I18nKey("learn:youKnowHowToPlayChess")
val `register` = new I18nKey("learn:register")
val `getAFreeLichessAccount` = new I18nKey("learn:getAFreeLichessAccount")
val `practice` = new I18nKey("learn:practice")
val `learnCommonChessPositions` = new I18nKey("learn:learnCommonChessPositions")
val `puzzles` = new I18nKey("learn:puzzles")
val `exerciseYourTacticalSkills` = new I18nKey("learn:exerciseYourTacticalSkills")
val `videos` = new I18nKey("learn:videos")
val `watchInstructiveChessVideos` = new I18nKey("learn:watchInstructiveChessVideos")
val `playPeople` = new I18nKey("learn:playPeople")
val `opponentsFromAroundTheWorld` = new I18nKey("learn:opponentsFromAroundTheWorld")
val `playMachine` = new I18nKey("learn:playMachine")
val `testYourSkillsWithTheComputer` = new I18nKey("learn:testYourSkillsWithTheComputer")
val `letsGo` = new I18nKey("learn:letsGo")
val `stageX` = new I18nKey("learn:stageX")
val `awesome` = new I18nKey("learn:awesome")
val `excellent` = new I18nKey("learn:excellent")
val `greatJob` = new I18nKey("learn:greatJob")
val `perfect` = new I18nKey("learn:perfect")
val `outstanding` = new I18nKey("learn:outstanding")
val `wayToGo` = new I18nKey("learn:wayToGo")
val `yesYesYes` = new I18nKey("learn:yesYesYes")
val `youreGoodAtThis` = new I18nKey("learn:youreGoodAtThis")
val `nailedIt` = new I18nKey("learn:nailedIt")
val `rightOn` = new I18nKey("learn:rightOn")
val `stageXComplete` = new I18nKey("learn:stageXComplete")
val `yourScore` = new I18nKey("learn:yourScore")
val `next` = new I18nKey("learn:next")
val `backToMenu` = new I18nKey("learn:backToMenu")
val `puzzleFailed` = new I18nKey("learn:puzzleFailed")
val `retry` = new I18nKey("learn:retry")
}

object activity {
val `activity` = new I18nKey("activity:activity")
val `hostedALiveStream` = new I18nKey("activity:hostedALiveStream")
val `signedUp` = new I18nKey("activity:signedUp")
val `supportedNbMonths` = new I18nKey("activity:supportedNbMonths")
val `practicedNbPositions` = new I18nKey("activity:practicedNbPositions")
val `solvedNbPuzzles` = new I18nKey("activity:solvedNbPuzzles")
val `playedNbGames` = new I18nKey("activity:playedNbGames")
val `postedNbMessages` = new I18nKey("activity:postedNbMessages")
val `playedNbMoves` = new I18nKey("activity:playedNbMoves")
val `inNbCorrespondenceGames` = new I18nKey("activity:inNbCorrespondenceGames")
val `completedNbGames` = new I18nKey("activity:completedNbGames")
val `followedNbPlayers` = new I18nKey("activity:followedNbPlayers")
val `gainedNbFollowers` = new I18nKey("activity:gainedNbFollowers")
val `hostedNbSimuls` = new I18nKey("activity:hostedNbSimuls")
val `joinedNbSimuls` = new I18nKey("activity:joinedNbSimuls")
val `createdNbStudies` = new I18nKey("activity:createdNbStudies")
val `competedInNbTournaments` = new I18nKey("activity:competedInNbTournaments")
val `rankedInTournament` = new I18nKey("activity:rankedInTournament")
val `joinedNbTeams` = new I18nKey("activity:joinedNbTeams")
}

object coordinates {
val `coordinates` = new I18nKey("coordinates:coordinates")
val `coordinateTraining` = new I18nKey("coordinates:coordinateTraining")
val `averageScoreAsWhiteX` = new I18nKey("coordinates:averageScoreAsWhiteX")
val `averageScoreAsBlackX` = new I18nKey("coordinates:averageScoreAsBlackX")
val `knowingTheChessBoard` = new I18nKey("coordinates:knowingTheChessBoard")
val `mostChessCourses` = new I18nKey("coordinates:mostChessCourses")
val `talkToYourChessFriends` = new I18nKey("coordinates:talkToYourChessFriends")
val `youCanAnalyseAGameMoreEffectively` = new I18nKey("coordinates:youCanAnalyseAGameMoreEffectively")
val `aSquareNameAppears` = new I18nKey("coordinates:aSquareNameAppears")
val `startTraining` = new I18nKey("coordinates:startTraining")
}

object study {
val `private` = new I18nKey("study:private")
val `myStudies` = new I18nKey("study:myStudies")
val `studiesIContributeTo` = new I18nKey("study:studiesIContributeTo")
val `myPublicStudies` = new I18nKey("study:myPublicStudies")
val `myPrivateStudies` = new I18nKey("study:myPrivateStudies")
val `myFavoriteStudies` = new I18nKey("study:myFavoriteStudies")
val `whatAreStudies` = new I18nKey("study:whatAreStudies")
val `allStudies` = new I18nKey("study:allStudies")
val `studiesCreatedByX` = new I18nKey("study:studiesCreatedByX")
val `noneYet` = new I18nKey("study:noneYet")
val `hot` = new I18nKey("study:hot")
val `dateAddedNewest` = new I18nKey("study:dateAddedNewest")
val `dateAddedOldest` = new I18nKey("study:dateAddedOldest")
val `recentlyUpdated` = new I18nKey("study:recentlyUpdated")
val `mostPopular` = new I18nKey("study:mostPopular")
val `addNewChapter` = new I18nKey("study:addNewChapter")
val `addMembers` = new I18nKey("study:addMembers")
val `inviteToTheStudy` = new I18nKey("study:inviteToTheStudy")
val `pleaseOnlyInvitePeopleYouKnow` = new I18nKey("study:pleaseOnlyInvitePeopleYouKnow")
val `searchByUsername` = new I18nKey("study:searchByUsername")
val `spectator` = new I18nKey("study:spectator")
val `contributor` = new I18nKey("study:contributor")
val `kick` = new I18nKey("study:kick")
val `leaveTheStudy` = new I18nKey("study:leaveTheStudy")
val `youAreNowAContributor` = new I18nKey("study:youAreNowAContributor")
val `youAreNowASpectator` = new I18nKey("study:youAreNowASpectator")
val `pgnTags` = new I18nKey("study:pgnTags")
val `like` = new I18nKey("study:like")
val `newTag` = new I18nKey("study:newTag")
val `commentThisPosition` = new I18nKey("study:commentThisPosition")
val `commentThisMove` = new I18nKey("study:commentThisMove")
val `annotateWithGlyphs` = new I18nKey("study:annotateWithGlyphs")
val `theChapterIsTooShortToBeAnalysed` = new I18nKey("study:theChapterIsTooShortToBeAnalysed")
val `onlyContributorsCanRequestAnalysis` = new I18nKey("study:onlyContributorsCanRequestAnalysis")
val `getAFullComputerAnalysis` = new I18nKey("study:getAFullComputerAnalysis")
val `makeSureTheChapterIsComplete` = new I18nKey("study:makeSureTheChapterIsComplete")
val `allSyncMembersRemainOnTheSamePosition` = new I18nKey("study:allSyncMembersRemainOnTheSamePosition")
val `shareChanges` = new I18nKey("study:shareChanges")
val `playing` = new I18nKey("study:playing")
val `first` = new I18nKey("study:first")
val `previous` = new I18nKey("study:previous")
val `next` = new I18nKey("study:next")
val `last` = new I18nKey("study:last")
val `shareAndExport` = new I18nKey("study:shareAndExport")
val `cloneStudy` = new I18nKey("study:cloneStudy")
val `studyPgn` = new I18nKey("study:studyPgn")
val `chapterPgn` = new I18nKey("study:chapterPgn")
val `studyUrl` = new I18nKey("study:studyUrl")
val `currentChapterUrl` = new I18nKey("study:currentChapterUrl")
val `youCanPasteThisInTheForumToEmbedTheChapter` = new I18nKey("study:youCanPasteThisInTheForumToEmbedTheChapter")
val `startAtInitialPosition` = new I18nKey("study:startAtInitialPosition")
val `startAtX` = new I18nKey("study:startAtX")
val `embedThisChapter` = new I18nKey("study:embedThisChapter")
val `readMoreAboutEmbeddingAStudyChapter` = new I18nKey("study:readMoreAboutEmbeddingAStudyChapter")
val `open` = new I18nKey("study:open")
val `xBroughtToYouByY` = new I18nKey("study:xBroughtToYouByY")
val `studyNotFound` = new I18nKey("study:studyNotFound")
val `editChapter` = new I18nKey("study:editChapter")
val `newChapter` = new I18nKey("study:newChapter")
val `orientation` = new I18nKey("study:orientation")
val `analysisMode` = new I18nKey("study:analysisMode")
val `pinnedChapterComment` = new I18nKey("study:pinnedChapterComment")
val `saveChapter` = new I18nKey("study:saveChapter")
val `clearAnnotations` = new I18nKey("study:clearAnnotations")
val `deleteChapter` = new I18nKey("study:deleteChapter")
val `deleteThisChapter` = new I18nKey("study:deleteThisChapter")
val `clearAllCommentsInThisChapter` = new I18nKey("study:clearAllCommentsInThisChapter")
val `rightUnderTheBoard` = new I18nKey("study:rightUnderTheBoard")
val `noPinnedComment` = new I18nKey("study:noPinnedComment")
val `normalAnalysis` = new I18nKey("study:normalAnalysis")
val `hideNextMoves` = new I18nKey("study:hideNextMoves")
val `interactiveLesson` = new I18nKey("study:interactiveLesson")
val `chapterX` = new I18nKey("study:chapterX")
val `empty` = new I18nKey("study:empty")
val `startFromInitialPosition` = new I18nKey("study:startFromInitialPosition")
val `editor` = new I18nKey("study:editor")
val `startFromCustomPosition` = new I18nKey("study:startFromCustomPosition")
val `loadAGameByUrl` = new I18nKey("study:loadAGameByUrl")
val `loadAPositionFromFen` = new I18nKey("study:loadAPositionFromFen")
val `loadAGameFromPgn` = new I18nKey("study:loadAGameFromPgn")
val `automatic` = new I18nKey("study:automatic")
val `urlOfTheGame` = new I18nKey("study:urlOfTheGame")
val `loadAGameFromXOrY` = new I18nKey("study:loadAGameFromXOrY")
val `createChapter` = new I18nKey("study:createChapter")
val `configureLiveBroadcast` = new I18nKey("study:configureLiveBroadcast")
val `createStudy` = new I18nKey("study:createStudy")
val `editStudy` = new I18nKey("study:editStudy")
val `visibility` = new I18nKey("study:visibility")
val `public` = new I18nKey("study:public")
val `unlisted` = new I18nKey("study:unlisted")
val `inviteOnly` = new I18nKey("study:inviteOnly")
val `allowCloning` = new I18nKey("study:allowCloning")
val `nobody` = new I18nKey("study:nobody")
val `onlyMe` = new I18nKey("study:onlyMe")
val `contributors` = new I18nKey("study:contributors")
val `members` = new I18nKey("study:members")
val `everyone` = new I18nKey("study:everyone")
val `enableSync` = new I18nKey("study:enableSync")
val `yesKeepEveryoneOnTheSamePosition` = new I18nKey("study:yesKeepEveryoneOnTheSamePosition")
val `noLetPeopleBrowseFreely` = new I18nKey("study:noLetPeopleBrowseFreely")
val `pinnedStudyComment` = new I18nKey("study:pinnedStudyComment")
val `start` = new I18nKey("study:start")
val `save` = new I18nKey("study:save")
val `clearChat` = new I18nKey("study:clearChat")
val `deleteTheStudyChatHistory` = new I18nKey("study:deleteTheStudyChatHistory")
val `deleteStudy` = new I18nKey("study:deleteStudy")
val `deleteTheEntireStudy` = new I18nKey("study:deleteTheEntireStudy")
val `whereDoYouWantToStudyThat` = new I18nKey("study:whereDoYouWantToStudyThat")
val `nbChapters` = new I18nKey("study:nbChapters")
val `nbGames` = new I18nKey("study:nbGames")
val `nbMembers` = new I18nKey("study:nbMembers")
val `pasteYourPgnTextHereUpToNbGames` = new I18nKey("study:pasteYourPgnTextHereUpToNbGames")
}

object clas {
val `lichessClasses` = new I18nKey("class:lichessClasses")
val `teachClassesOfChessStudents` = new I18nKey("class:teachClassesOfChessStudents")
val `features` = new I18nKey("class:features")
val `quicklyGenerateSafeUsernames` = new I18nKey("class:quicklyGenerateSafeUsernames")
val `trackStudentProgress` = new I18nKey("class:trackStudentProgress")
val `messageAllStudents` = new I18nKey("class:messageAllStudents")
val `freeForAllForever` = new I18nKey("class:freeForAllForever")
val `applyToBeLichessTeacher` = new I18nKey("class:applyToBeLichessTeacher")
val `noClassesYet` = new I18nKey("class:noClassesYet")
val `teachersX` = new I18nKey("class:teachersX")
val `newClass` = new I18nKey("class:newClass")
val `closeClass` = new I18nKey("class:closeClass")
val `closedByX` = new I18nKey("class:closedByX")
val `reopen` = new I18nKey("class:reopen")
val `removeStudent` = new I18nKey("class:removeStudent")
val `removedStudents` = new I18nKey("class:removedStudents")
val `inviteTheStudentBack` = new I18nKey("class:inviteTheStudentBack")
val `sendAMessage` = new I18nKey("class:sendAMessage")
val `aLinkToTheClassWillBeAdded` = new I18nKey("class:aLinkToTheClassWillBeAdded")
val `className` = new I18nKey("class:className")
val `classDescription` = new I18nKey("class:classDescription")
val `visibleByBothStudentsAndTeachers` = new I18nKey("class:visibleByBothStudentsAndTeachers")
val `teachersOfTheClass` = new I18nKey("class:teachersOfTheClass")
val `addLichessUsernames` = new I18nKey("class:addLichessUsernames")
val `theyMustFirstApply` = new I18nKey("class:theyMustFirstApply")
val `resetPassword` = new I18nKey("class:resetPassword")
val `makeSureToCopy` = new I18nKey("class:makeSureToCopy")
val `passwordX` = new I18nKey("class:passwordX")
val `generateANewPassword` = new I18nKey("class:generateANewPassword")
val `invitedToXByY` = new I18nKey("class:invitedToXByY")
val `realName` = new I18nKey("class:realName")
val `privateWillNeverBeShown` = new I18nKey("class:privateWillNeverBeShown")
val `addStudent` = new I18nKey("class:addStudent")
val `lichessProfileXCreatedForY` = new I18nKey("class:lichessProfileXCreatedForY")
val `studentCredentials` = new I18nKey("class:studentCredentials")
val `inviteALichessAccount` = new I18nKey("class:inviteALichessAccount")
val `inviteDesc1` = new I18nKey("class:inviteDesc1")
val `inviteDesc2` = new I18nKey("class:inviteDesc2")
val `inviteDesc3` = new I18nKey("class:inviteDesc3")
val `inviteDesc4` = new I18nKey("class:inviteDesc4")
val `createANewLichessAccount` = new I18nKey("class:createANewLichessAccount")
val `createDesc1` = new I18nKey("class:createDesc1")
val `createDesc2` = new I18nKey("class:createDesc2")
val `createDesc3` = new I18nKey("class:createDesc3")
val `createDesc4` = new I18nKey("class:createDesc4")
val `lichessUsername` = new I18nKey("class:lichessUsername")
val `generateANewUsername` = new I18nKey("class:generateANewUsername")
val `onlyVisibleToTeachers` = new I18nKey("class:onlyVisibleToTeachers")
val `lastActiveDate` = new I18nKey("class:lastActiveDate")
val `managed` = new I18nKey("class:managed")
val `thisStudentAccountIsManaged` = new I18nKey("class:thisStudentAccountIsManaged")
val `upgradeFromManaged` = new I18nKey("class:upgradeFromManaged")
val `release` = new I18nKey("class:release")
val `releaseTheAccount` = new I18nKey("class:releaseTheAccount")
val `releaseDesc1` = new I18nKey("class:releaseDesc1")
val `releaseDesc2` = new I18nKey("class:releaseDesc2")
val `realUniqueEmail` = new I18nKey("class:realUniqueEmail")
val `teachers` = new I18nKey("class:teachers")
val `progress` = new I18nKey("class:progress")
val `noStudents` = new I18nKey("class:noStudents")
val `noRemovedStudents` = new I18nKey("class:noRemovedStudents")
val `overDays` = new I18nKey("class:overDays")
val `timePlaying` = new I18nKey("class:timePlaying")
val `variantXOverLastY` = new I18nKey("class:variantXOverLastY")
val `winrate` = new I18nKey("class:winrate")
val `na` = new I18nKey("class:na")
val `news` = new I18nKey("class:news")
val `editNews` = new I18nKey("class:editNews")
val `notifyAllStudents` = new I18nKey("class:notifyAllStudents")
val `nothingHere` = new I18nKey("class:nothingHere")
val `newsEdit1` = new I18nKey("class:newsEdit1")
val `newsEdit2` = new I18nKey("class:newsEdit2")
val `newsEdit3` = new I18nKey("class:newsEdit3")
val `markdownAvailable` = new I18nKey("class:markdownAvailable")
val `nbTeachers` = new I18nKey("class:nbTeachers")
val `nbStudents` = new I18nKey("class:nbStudents")
}

object contact {
val `contact` = new I18nKey("contact:contact")
val `contactLichess` = new I18nKey("contact:contactLichess")
val `whatCanWeHelpYouWith` = new I18nKey("contact:whatCanWeHelpYouWith")
val `visitThisPage` = new I18nKey("contact:visitThisPage")
val `iCantLogIn` = new I18nKey("contact:iCantLogIn")
val `noConfirmationEmail` = new I18nKey("contact:noConfirmationEmail")
val `forgotPassword` = new I18nKey("contact:forgotPassword")
val `forgotUsername` = new I18nKey("contact:forgotUsername")
val `youCanLoginWithEmail` = new I18nKey("contact:youCanLoginWithEmail")
val `lost2FA` = new I18nKey("contact:lost2FA")
val `doPasswordReset` = new I18nKey("contact:doPasswordReset")
val `accountSupport` = new I18nKey("contact:accountSupport")
val `wantTitle` = new I18nKey("contact:wantTitle")
val `visitTitleConfirmation` = new I18nKey("contact:visitTitleConfirmation")
val `wantCloseAccount` = new I18nKey("contact:wantCloseAccount")
val `closeYourAccount` = new I18nKey("contact:closeYourAccount")
val `doNotAskByEmail` = new I18nKey("contact:doNotAskByEmail")
val `wantReopen` = new I18nKey("contact:wantReopen")
val `reopenOnThisPage` = new I18nKey("contact:reopenOnThisPage")
val `doNotAskByEmailToReopen` = new I18nKey("contact:doNotAskByEmailToReopen")
val `wantChangeUsername` = new I18nKey("contact:wantChangeUsername")
val `changeUsernameCase` = new I18nKey("contact:changeUsernameCase")
val `cantChangeMore` = new I18nKey("contact:cantChangeMore")
val `orCloseAccount` = new I18nKey("contact:orCloseAccount")
val `wantClearHistory` = new I18nKey("contact:wantClearHistory")
val `cantClearHistory` = new I18nKey("contact:cantClearHistory")
val `wantReport` = new I18nKey("contact:wantReport")
val `cheating` = new I18nKey("contact:cheating")
val `sandbagging` = new I18nKey("contact:sandbagging")
val `trolling` = new I18nKey("contact:trolling")
val `insults` = new I18nKey("contact:insults")
val `otherReason` = new I18nKey("contact:otherReason")
val `toReportAPlayer` = new I18nKey("contact:toReportAPlayer")
val `youCanAlsoReachReportPage` = new I18nKey("contact:youCanAlsoReachReportPage")
val `doNotReportInForum` = new I18nKey("contact:doNotReportInForum")
val `doNotSendReportEmails` = new I18nKey("contact:doNotSendReportEmails")
val `doNotMessageModerators` = new I18nKey("contact:doNotMessageModerators")
val `onlyReports` = new I18nKey("contact:onlyReports")
val `wantReportBug` = new I18nKey("contact:wantReportBug")
val `reportBugInForum` = new I18nKey("contact:reportBugInForum")
val `reportWebsiteIssue` = new I18nKey("contact:reportWebsiteIssue")
val `reportMobileIssue` = new I18nKey("contact:reportMobileIssue")
val `reportBugInDiscord` = new I18nKey("contact:reportBugInDiscord")
val `howToReportBug` = new I18nKey("contact:howToReportBug")
val `illegalPawnCapture` = new I18nKey("contact:illegalPawnCapture")
val `calledEnPassant` = new I18nKey("contact:calledEnPassant")
val `tryEnPassant` = new I18nKey("contact:tryEnPassant")
val `illegalCastling` = new I18nKey("contact:illegalCastling")
val `castlingPrevented` = new I18nKey("contact:castlingPrevented")
val `castlingRules` = new I18nKey("contact:castlingRules")
val `tryCastling` = new I18nKey("contact:tryCastling")
val `castlingImported` = new I18nKey("contact:castlingImported")
val `insufficientMaterial` = new I18nKey("contact:insufficientMaterial")
val `fideMate` = new I18nKey("contact:fideMate")
val `knightMate` = new I18nKey("contact:knightMate")
val `noRatingPoints` = new I18nKey("contact:noRatingPoints")
val `ratedGame` = new I18nKey("contact:ratedGame")
val `errorPage` = new I18nKey("contact:errorPage")
val `reportErrorPage` = new I18nKey("contact:reportErrorPage")
val `banAppeal` = new I18nKey("contact:banAppeal")
val `engineAppeal` = new I18nKey("contact:engineAppeal")
val `sendAppealTo` = new I18nKey("contact:sendAppealTo")
val `falsePositives` = new I18nKey("contact:falsePositives")
val `ifLegit` = new I18nKey("contact:ifLegit")
val `accountLost` = new I18nKey("contact:accountLost")
val `doNotDeny` = new I18nKey("contact:doNotDeny")
val `otherRestriction` = new I18nKey("contact:otherRestriction")
val `collaboration` = new I18nKey("contact:collaboration")
val `monetizing` = new I18nKey("contact:monetizing")
val `buyingLichess` = new I18nKey("contact:buyingLichess")
val `authorizationToUse` = new I18nKey("contact:authorizationToUse")
val `welcomeToUse` = new I18nKey("contact:welcomeToUse")
val `videosAndBooks` = new I18nKey("contact:videosAndBooks")
val `creditAppreciated` = new I18nKey("contact:creditAppreciated")
val `noneOfTheAbove` = new I18nKey("contact:noneOfTheAbove")
val `sendEmailAt` = new I18nKey("contact:sendEmailAt")
val `explainYourRequest` = new I18nKey("contact:explainYourRequest")
}

object patron {
val `donate` = new I18nKey("patron:donate")
val `lichessPatron` = new I18nKey("patron:lichessPatron")
val `freeAccount` = new I18nKey("patron:freeAccount")
val `becomePatron` = new I18nKey("patron:becomePatron")
val `xBecamePatron` = new I18nKey("patron:xBecamePatron")
val `newPatrons` = new I18nKey("patron:newPatrons")
val `freeChess` = new I18nKey("patron:freeChess")
val `noAdsNoSubs` = new I18nKey("patron:noAdsNoSubs")
val `thankYou` = new I18nKey("patron:thankYou")
val `youHaveLifetime` = new I18nKey("patron:youHaveLifetime")
val `patronUntil` = new I18nKey("patron:patronUntil")
val `ifNotRenewed` = new I18nKey("patron:ifNotRenewed")
val `weAreNonProfit` = new I18nKey("patron:weAreNonProfit")
val `weRelyOnSupport` = new I18nKey("patron:weRelyOnSupport")
val `lifetime` = new I18nKey("patron:lifetime")
val `payLifetimeOnce` = new I18nKey("patron:payLifetimeOnce")
val `lifetimePatron` = new I18nKey("patron:lifetimePatron")
val `makeExtraDonation` = new I18nKey("patron:makeExtraDonation")
val `monthly` = new I18nKey("patron:monthly")
val `recurringBilling` = new I18nKey("patron:recurringBilling")
val `onetime` = new I18nKey("patron:onetime")
val `singleDonation` = new I18nKey("patron:singleDonation")
val `otherAmount` = new I18nKey("patron:otherAmount")
val `pleaseEnterAmount` = new I18nKey("patron:pleaseEnterAmount")
val `withCreditCard` = new I18nKey("patron:withCreditCard")
val `withPaypal` = new I18nKey("patron:withPaypal")
val `weAreSmallTeam` = new I18nKey("patron:weAreSmallTeam")
val `celebratedPatrons` = new I18nKey("patron:celebratedPatrons")
val `whereMoneyGoes` = new I18nKey("patron:whereMoneyGoes")
val `serversAndDeveloper` = new I18nKey("patron:serversAndDeveloper")
val `costBreakdown` = new I18nKey("patron:costBreakdown")
val `officialNonProfit` = new I18nKey("patron:officialNonProfit")
val `actOfCreation` = new I18nKey("patron:actOfCreation")
val `changeMonthlySupport` = new I18nKey("patron:changeMonthlySupport")
val `changeOrContact` = new I18nKey("patron:changeOrContact")
val `contactSupport` = new I18nKey("patron:contactSupport")
val `otherMethods` = new I18nKey("patron:otherMethods")
val `bankTransfers` = new I18nKey("patron:bankTransfers")
val `bitcoin` = new I18nKey("patron:bitcoin")
val `patronFeatures` = new I18nKey("patron:patronFeatures")
val `noPatronFeatures` = new I18nKey("patron:noPatronFeatures")
val `featuresComparison` = new I18nKey("patron:featuresComparison")
val `youSupportWith` = new I18nKey("patron:youSupportWith")
val `tyvm` = new I18nKey("patron:tyvm")
val `currentStatus` = new I18nKey("patron:currentStatus")
val `nextPayment` = new I18nKey("patron:nextPayment")
val `youWillBeChargedXOnY` = new I18nKey("patron:youWillBeChargedXOnY")
val `makeAdditionalDonation` = new I18nKey("patron:makeAdditionalDonation")
val `update` = new I18nKey("patron:update")
val `changeMonthlyAmount` = new I18nKey("patron:changeMonthlyAmount")
val `cancelSupport` = new I18nKey("patron:cancelSupport")
val `xOrY` = new I18nKey("patron:xOrY")
val `decideHowMuch` = new I18nKey("patron:decideHowMuch")
val `stopPayments` = new I18nKey("patron:stopPayments")
val `noLongerSupport` = new I18nKey("patron:noLongerSupport")
val `paymentHistory` = new I18nKey("patron:paymentHistory")
val `paid` = new I18nKey("patron:paid")
val `viewOthers` = new I18nKey("patron:viewOthers")
val `date` = new I18nKey("patron:date")
val `amount` = new I18nKey("patron:amount")
val `transactionCompleted` = new I18nKey("patron:transactionCompleted")
val `permanentPatron` = new I18nKey("patron:permanentPatron")
val `checkOutProfile` = new I18nKey("patron:checkOutProfile")
val `nowLifetime` = new I18nKey("patron:nowLifetime")
val `nowOneMonth` = new I18nKey("patron:nowOneMonth")
val `downgradeNextMonth` = new I18nKey("patron:downgradeNextMonth")
val `patronForMonths` = new I18nKey("patron:patronForMonths")
}

object coach {
val `lichessCoaches` = new I18nKey("coach:lichessCoaches")
val `lichessCoach` = new I18nKey("coach:lichessCoach")
val `areYouCoach` = new I18nKey("coach:areYouCoach")
val `nmOrFideTitle` = new I18nKey("coach:nmOrFideTitle")
val `confirmTitle` = new I18nKey("coach:confirmTitle")
val `sendApplication` = new I18nKey("coach:sendApplication")
val `location` = new I18nKey("coach:location")
val `languages` = new I18nKey("coach:languages")
val `rating` = new I18nKey("coach:rating")
val `hourlyRate` = new I18nKey("coach:hourlyRate")
val `availability` = new I18nKey("coach:availability")
val `accepting` = new I18nKey("coach:accepting")
val `notAccepting` = new I18nKey("coach:notAccepting")
val `xCoachesStudents` = new I18nKey("coach:xCoachesStudents")
val `viewXProfile` = new I18nKey("coach:viewXProfile")
val `sendPM` = new I18nKey("coach:sendPM")
val `aboutMe` = new I18nKey("coach:aboutMe")
val `playingExperience` = new I18nKey("coach:playingExperience")
val `teachingExperience` = new I18nKey("coach:teachingExperience")
val `otherExperiences` = new I18nKey("coach:otherExperiences")
val `bestSkills` = new I18nKey("coach:bestSkills")
val `teachingMethod` = new I18nKey("coach:teachingMethod")
val `publicStudies` = new I18nKey("coach:publicStudies")
val `youtubeVideos` = new I18nKey("coach:youtubeVideos")
val `thankYouForReview` = new I18nKey("coach:thankYouForReview")
val `xWillApproveIt` = new I18nKey("coach:xWillApproveIt")
val `reviewCoach` = new I18nKey("coach:reviewCoach")
val `describeExperienceWith` = new I18nKey("coach:describeExperienceWith")
val `studentReviews` = new I18nKey("coach:studentReviews")
}

object broadcast {
val `broadcasts` = new I18nKey("broadcast:broadcasts")
val `liveBroadcasts` = new I18nKey("broadcast:liveBroadcasts")
val `newBroadcast` = new I18nKey("broadcast:newBroadcast")
val `ongoing` = new I18nKey("broadcast:ongoing")
val `upcoming` = new I18nKey("broadcast:upcoming")
val `completed` = new I18nKey("broadcast:completed")
val `eventName` = new I18nKey("broadcast:eventName")
val `eventDescription` = new I18nKey("broadcast:eventDescription")
val `fullDescription` = new I18nKey("broadcast:fullDescription")
val `fullDescriptionHelp` = new I18nKey("broadcast:fullDescriptionHelp")
val `sourceUrl` = new I18nKey("broadcast:sourceUrl")
val `sourceUrlHelp` = new I18nKey("broadcast:sourceUrlHelp")
val `roundNumber` = new I18nKey("broadcast:roundNumber")
val `startDate` = new I18nKey("broadcast:startDate")
val `startDateHelp` = new I18nKey("broadcast:startDateHelp")
val `credits` = new I18nKey("broadcast:credits")
val `cloneBroadcast` = new I18nKey("broadcast:cloneBroadcast")
val `resetBroadcast` = new I18nKey("broadcast:resetBroadcast")
}

object streamer {
val `lichessStreamers` = new I18nKey("streamer:lichessStreamers")
val `lichessStreamer` = new I18nKey("streamer:lichessStreamer")
val `live` = new I18nKey("streamer:live")
val `offline` = new I18nKey("streamer:offline")
val `currentlyStreaming` = new I18nKey("streamer:currentlyStreaming")
val `lastStream` = new I18nKey("streamer:lastStream")
val `becomeStreamer` = new I18nKey("streamer:becomeStreamer")
val `doYouHaveStream` = new I18nKey("streamer:doYouHaveStream")
val `hereWeGo` = new I18nKey("streamer:hereWeGo")
val `allStreamers` = new I18nKey("streamer:allStreamers")
val `editPage` = new I18nKey("streamer:editPage")
val `yourPage` = new I18nKey("streamer:yourPage")
val `downloadKit` = new I18nKey("streamer:downloadKit")
val `xIsStreaming` = new I18nKey("streamer:xIsStreaming")
val `rules` = new I18nKey("streamer:rules")
val `rule1` = new I18nKey("streamer:rule1")
val `rule2` = new I18nKey("streamer:rule2")
val `rule3` = new I18nKey("streamer:rule3")
val `perks` = new I18nKey("streamer:perks")
val `perk1` = new I18nKey("streamer:perk1")
val `perk2` = new I18nKey("streamer:perk2")
val `perk3` = new I18nKey("streamer:perk3")
val `perk4` = new I18nKey("streamer:perk4")
val `approved` = new I18nKey("streamer:approved")
val `pendingReview` = new I18nKey("streamer:pendingReview")
val `pleaseFillIn` = new I18nKey("streamer:pleaseFillIn")
val `whenReady` = new I18nKey("streamer:whenReady")
val `requestReview` = new I18nKey("streamer:requestReview")
val `anotherLanguage` = new I18nKey("streamer:anotherLanguage")
val `twitchUsername` = new I18nKey("streamer:twitchUsername")
val `optionalOrEmpty` = new I18nKey("streamer:optionalOrEmpty")
val `youtubeChannel` = new I18nKey("streamer:youtubeChannel")
val `streamerName` = new I18nKey("streamer:streamerName")
val `visibility` = new I18nKey("streamer:visibility")
val `whenApproved` = new I18nKey("streamer:whenApproved")
val `headline` = new I18nKey("streamer:headline")
val `tellUsAboutTheStream` = new I18nKey("streamer:tellUsAboutTheStream")
val `longDescription` = new I18nKey("streamer:longDescription")
val `xStreamerPicture` = new I18nKey("streamer:xStreamerPicture")
val `changePicture` = new I18nKey("streamer:changePicture")
val `uploadPicture` = new I18nKey("streamer:uploadPicture")
val `deletePicture` = new I18nKey("streamer:deletePicture")
val `maxSize` = new I18nKey("streamer:maxSize")
val `installBlocker` = new I18nKey("streamer:installBlocker")
val `beSafe` = new I18nKey("streamer:beSafe")
val `keepItShort` = new I18nKey("streamer:keepItShort")
}

object tfa {
val `twoFactorAuth` = new I18nKey("tfa:twoFactorAuth")
val `twoFactorHelp` = new I18nKey("tfa:twoFactorHelp")
val `twoFactorApp` = new I18nKey("tfa:twoFactorApp")
val `scanTheCode` = new I18nKey("tfa:scanTheCode")
val `enterPassword` = new I18nKey("tfa:enterPassword")
val `authenticationCode` = new I18nKey("tfa:authenticationCode")
val `ifYouLoseAccess` = new I18nKey("tfa:ifYouLoseAccess")
val `enableTwoFactor` = new I18nKey("tfa:enableTwoFactor")
val `disableTwoFactor` = new I18nKey("tfa:disableTwoFactor")
val `twoFactorEnabled` = new I18nKey("tfa:twoFactorEnabled")
val `twoFactorDisable` = new I18nKey("tfa:twoFactorDisable")
}

object settings {
val `settings` = new I18nKey("settings:settings")
val `closeAccount` = new I18nKey("settings:closeAccount")
val `closingIsDefinitive` = new I18nKey("settings:closingIsDefinitive")
val `cantOpenSimilarAccount` = new I18nKey("settings:cantOpenSimilarAccount")
val `changedMindDoNotCloseAccount` = new I18nKey("settings:changedMindDoNotCloseAccount")
val `closeAccountExplanation` = new I18nKey("settings:closeAccountExplanation")
val `thisAccountIsClosed` = new I18nKey("settings:thisAccountIsClosed")
}

object preferences {
val `preferences` = new I18nKey("preferences:preferences")
val `gameDisplay` = new I18nKey("preferences:gameDisplay")
val `pieceAnimation` = new I18nKey("preferences:pieceAnimation")
val `materialDifference` = new I18nKey("preferences:materialDifference")
val `boardHighlights` = new I18nKey("preferences:boardHighlights")
val `pieceDestinations` = new I18nKey("preferences:pieceDestinations")
val `boardCoordinates` = new I18nKey("preferences:boardCoordinates")
val `moveListWhilePlaying` = new I18nKey("preferences:moveListWhilePlaying")
val `pgnPieceNotation` = new I18nKey("preferences:pgnPieceNotation")
val `chessPieceSymbol` = new I18nKey("preferences:chessPieceSymbol")
val `pgnLetter` = new I18nKey("preferences:pgnLetter")
val `zenMode` = new I18nKey("preferences:zenMode")
val `displayBoardResizeHandle` = new I18nKey("preferences:displayBoardResizeHandle")
val `onlyOnInitialPosition` = new I18nKey("preferences:onlyOnInitialPosition")
val `blindfoldChess` = new I18nKey("preferences:blindfoldChess")
val `chessClock` = new I18nKey("preferences:chessClock")
val `tenthsOfSeconds` = new I18nKey("preferences:tenthsOfSeconds")
val `whenTimeRemainingLessThanTenSeconds` = new I18nKey("preferences:whenTimeRemainingLessThanTenSeconds")
val `horizontalGreenProgressBars` = new I18nKey("preferences:horizontalGreenProgressBars")
val `soundWhenTimeGetsCritical` = new I18nKey("preferences:soundWhenTimeGetsCritical")
val `giveMoreTime` = new I18nKey("preferences:giveMoreTime")
val `gameBehavior` = new I18nKey("preferences:gameBehavior")
val `howDoYouMovePieces` = new I18nKey("preferences:howDoYouMovePieces")
val `clickTwoSquares` = new I18nKey("preferences:clickTwoSquares")
val `dragPiece` = new I18nKey("preferences:dragPiece")
val `bothClicksAndDrag` = new I18nKey("preferences:bothClicksAndDrag")
val `premovesPlayingDuringOpponentTurn` = new I18nKey("preferences:premovesPlayingDuringOpponentTurn")
val `takebacksWithOpponentApproval` = new I18nKey("preferences:takebacksWithOpponentApproval")
val `inCasualGamesOnly` = new I18nKey("preferences:inCasualGamesOnly")
val `promoteToQueenAutomatically` = new I18nKey("preferences:promoteToQueenAutomatically")
val `whenPremoving` = new I18nKey("preferences:whenPremoving")
val `claimDrawOnThreefoldRepetitionAutomatically` = new I18nKey("preferences:claimDrawOnThreefoldRepetitionAutomatically")
val `whenTimeRemainingLessThanThirtySeconds` = new I18nKey("preferences:whenTimeRemainingLessThanThirtySeconds")
val `moveConfirmation` = new I18nKey("preferences:moveConfirmation")
val `inCorrespondenceGames` = new I18nKey("preferences:inCorrespondenceGames")
val `correspondenceAndUnlimited` = new I18nKey("preferences:correspondenceAndUnlimited")
val `confirmResignationAndDrawOffers` = new I18nKey("preferences:confirmResignationAndDrawOffers")
val `castleByMovingTheKingTwoSquaresOrOntoTheRook` = new I18nKey("preferences:castleByMovingTheKingTwoSquaresOrOntoTheRook")
val `castleByMovingTwoSquares` = new I18nKey("preferences:castleByMovingTwoSquares")
val `castleByMovingOntoTheRook` = new I18nKey("preferences:castleByMovingOntoTheRook")
val `inputMovesWithTheKeyboard` = new I18nKey("preferences:inputMovesWithTheKeyboard")
val `yourPreferencesHaveBeenSaved` = new I18nKey("preferences:yourPreferencesHaveBeenSaved")
}

object team {
val `team` = new I18nKey("team:team")
val `teams` = new I18nKey("team:teams")
val `allTeams` = new I18nKey("team:allTeams")
val `newTeam` = new I18nKey("team:newTeam")
val `myTeams` = new I18nKey("team:myTeams")
val `noTeamFound` = new I18nKey("team:noTeamFound")
val `joinTeam` = new I18nKey("team:joinTeam")
val `quitTeam` = new I18nKey("team:quitTeam")
val `anyoneCanJoin` = new I18nKey("team:anyoneCanJoin")
val `aConfirmationIsRequiredToJoin` = new I18nKey("team:aConfirmationIsRequiredToJoin")
val `joiningPolicy` = new I18nKey("team:joiningPolicy")
val `teamLeader` = new I18nKey("team:teamLeader")
val `teamBestPlayers` = new I18nKey("team:teamBestPlayers")
val `teamRecentMembers` = new I18nKey("team:teamRecentMembers")
val `kickSomeone` = new I18nKey("team:kickSomeone")
val `whoToKick` = new I18nKey("team:whoToKick")
val `appointOwner` = new I18nKey("team:appointOwner")
val `changeOwner` = new I18nKey("team:changeOwner")
val `willBeReviewed` = new I18nKey("team:willBeReviewed")
val `beingReviewed` = new I18nKey("team:beingReviewed")
val `teamBattle` = new I18nKey("team:teamBattle")
val `nbMembers` = new I18nKey("team:nbMembers")
val `xJoinRequests` = new I18nKey("team:xJoinRequests")
}

object perfStat {
val `perfStats` = new I18nKey("perfStat:perfStats")
val `viewTheGames` = new I18nKey("perfStat:viewTheGames")
val `provisional` = new I18nKey("perfStat:provisional")
val `notEnoughRatedGames` = new I18nKey("perfStat:notEnoughRatedGames")
val `progressOverLastXGames` = new I18nKey("perfStat:progressOverLastXGames")
val `ratingDeviation` = new I18nKey("perfStat:ratingDeviation")
val `ratingDeviationHelp` = new I18nKey("perfStat:ratingDeviationHelp")
val `totalGames` = new I18nKey("perfStat:totalGames")
val `ratedGames` = new I18nKey("perfStat:ratedGames")
val `tournamentGames` = new I18nKey("perfStat:tournamentGames")
val `berserkedGames` = new I18nKey("perfStat:berserkedGames")
val `timeSpentPlaying` = new I18nKey("perfStat:timeSpentPlaying")
val `averageOpponent` = new I18nKey("perfStat:averageOpponent")
val `victories` = new I18nKey("perfStat:victories")
val `defeats` = new I18nKey("perfStat:defeats")
val `disconnections` = new I18nKey("perfStat:disconnections")
val `notEnoughGames` = new I18nKey("perfStat:notEnoughGames")
val `highestRating` = new I18nKey("perfStat:highestRating")
val `lowestRating` = new I18nKey("perfStat:lowestRating")
val `fromXToY` = new I18nKey("perfStat:fromXToY")
val `winningStreak` = new I18nKey("perfStat:winningStreak")
val `losingStreak` = new I18nKey("perfStat:losingStreak")
val `longestStreak` = new I18nKey("perfStat:longestStreak")
val `currentStreak` = new I18nKey("perfStat:currentStreak")
val `bestRated` = new I18nKey("perfStat:bestRated")
val `worstRated` = new I18nKey("perfStat:worstRated")
val `gamesInARow` = new I18nKey("perfStat:gamesInARow")
val `lessThanOneHour` = new I18nKey("perfStat:lessThanOneHour")
val `maxTimePlaying` = new I18nKey("perfStat:maxTimePlaying")
val `now` = new I18nKey("perfStat:now")
}

object search {
val `search` = new I18nKey("search:search")
val `advancedSearch` = new I18nKey("search:advancedSearch")
val `opponentName` = new I18nKey("search:opponentName")
val `loser` = new I18nKey("search:loser")
val `from` = new I18nKey("search:from")
val `to` = new I18nKey("search:to")
val `humanOrComputer` = new I18nKey("search:humanOrComputer")
val `aiLevel` = new I18nKey("search:aiLevel")
val `source` = new I18nKey("search:source")
val `nbTurns` = new I18nKey("search:nbTurns")
val `result` = new I18nKey("search:result")
val `winnerColor` = new I18nKey("search:winnerColor")
val `date` = new I18nKey("search:date")
val `sort` = new I18nKey("search:sort")
val `by` = new I18nKey("search:by")
val `order` = new I18nKey("search:order")
val `analysis` = new I18nKey("search:analysis")
val `onlyAnalysed` = new I18nKey("search:onlyAnalysed")
val `searchInXGames` = new I18nKey("search:searchInXGames")
val `xGamesFound` = new I18nKey("search:xGamesFound")
}

}
