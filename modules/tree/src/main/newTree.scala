package lila.tree

import alleycats.Zero
import monocle.syntax.all.*
import chess.{ Centis, HasId }
import chess.{ Node as ChessNode, Variation }
import chess.Node.*
import chess.format.pgn.{ Glyph, Glyphs }
import chess.format.{ Fen, Uci, UciCharPair, UciPath }
import chess.opening.Opening
import chess.{ Ply, Square, Check }
import chess.variant.{ Variant, Crazyhouse }
import play.api.libs.json.*
import ornicar.scalalib.ThreadLocalRandom

import lila.common.Json.{ *, given }

import Node.{ Comments, Comment, Gamebook, Shapes }

case class Metas(
    ply: Ply,
    fen: Fen.Epd,
    check: Check,
    // None when not computed yet
    dests: Option[Map[Square, List[Square]]] = None,
    drops: Option[List[Square]] = None,
    eval: Option[Eval] = None,
    shapes: Node.Shapes,
    comments: Node.Comments,
    gamebook: Option[Node.Gamebook] = None,
    glyphs: Glyphs,
    opening: Option[Opening] = None,
    clock: Option[Centis],
    crazyData: Option[Crazyhouse.Data]
    // TODO, add support for variationComments
)

case class NewBranch(
    id: UciCharPair,
    // additional data to make searching with path easier
    path: UciPath,
    move: Uci.WithSan,
    comp: Boolean = false, // generated by a computer analysis
    forceVariation: Boolean,
    metas: Metas
):
  export metas.{ ply, fen, check, dests, drops, eval, shapes, comments, gamebook, glyphs, opening, clock, crazyData }
  override def toString                    = s"$ply, $id, ${move.uci}"
  def withClock(centis: Option[Centis])    = this.focus(_.metas.clock).set(centis)
  def withForceVariation(force: Boolean)   = copy(forceVariation = force)
  def isCommented                          = metas.comments.value.nonEmpty
  def setComment(comment: Comment)         = this.focus(_.metas.comments).modify(_.set(comment))
  def deleteComment(commentId: Comment.Id) = this.focus(_.metas.comments).modify(_.delete(commentId))
  def deleteComments                       = this.focus(_.metas.comments).set(Comments.empty)
  def setGamebook(gamebook: Gamebook)      = this.focus(_.metas.gamebook).set(gamebook.some)
  def setShapes(s: Shapes)                 = this.focus(_.metas.shapes).set(s)
  def toggleGlyph(glyph: Glyph)            = this.focus(_.metas.glyphs).modify(_ toggle glyph)
  def clearAnnotations = this.focus(_.metas).modify(_.copy(shapes = Shapes.empty, glyphs = Glyphs.empty))
  def setComp          = copy(comp = true)
  def merge(n: NewBranch): NewBranch =
    copy(
      metas = metas.copy(
        shapes = metas.shapes ++ n.metas.shapes,
        comments = metas.comments ++ n.metas.comments,
        gamebook = n.metas.gamebook orElse metas.gamebook,
        glyphs = metas.glyphs merge n.metas.glyphs,
        eval = n.metas.eval orElse metas.eval,
        clock = n.metas.clock orElse metas.clock,
        crazyData = n.metas.crazyData orElse metas.crazyData
      ),
      forceVariation = n.forceVariation || forceVariation
    )

object NewBranch:
  given HasId[NewBranch, UciCharPair] = _.id

type NewTree = ChessNode[NewBranch]

object NewTree:
  // default case class constructor not working with type alias?
  def apply(value: NewBranch, child: Option[NewTree], variations: List[Variation[NewBranch]]) =
    ChessNode(value, child, variations)

  def apply(root: Root): Option[NewTree] =
    root.children.first.map(first =>
      NewTree(
        value = fromBranch(first),
        child = first.children.first.map(fromBranch(_, first.children.variations)),
        variations = root.children.variations.map(toVariation)
      )
    )

  def fromBranch(branch: Branch, variations: List[Branch]): NewTree =
    NewTree(
      value = fromBranch(branch),
      child = branch.children.first.map(fromBranch(_, branch.children.variations)),
      variations = variations.map(toVariation)
    )

  def toVariation(branch: Branch): Variation[NewBranch] =
    Variation(
      value = fromBranch(branch),
      child = branch.children.first.map(fromBranch(_, branch.children.variations))
    )

  def fromBranch(branch: Branch): NewBranch =
    NewBranch(
      branch.id,
      UciPath.root,
      branch.move,
      branch.comp,
      branch.forceVariation,
      fromNode(branch)
    )

  def fromNode(node: Node) =
    Metas(
      node.ply,
      node.fen,
      node.check,
      node.dests,
      node.drops,
      node.eval,
      node.shapes,
      node.comments,
      node.gamebook,
      node.glyphs,
      node.opening,
      node.clock,
      node.crazyData
    )

  // Optional for the first node with the given id
  // def filterById(id: UciCharPair) = ChessNode.filterOptional[NewBranch](_.id == id)

  extension (newTree: NewTree)
    // def addNodeAt(node: NewTree): Option[NewTree] =
    //   node.value.path.split match
    //     case Nil => newTree.addChild(node)
    //     case head :: rest =>
    //       newTree.child.flatMap(_.addNodeAt(rest, node)) orElse
    //         newTree.variation.flatMap(_.addNodeAt(rest, node)) orElse:
    //         head == newTree.value.id option newTree.addChild(node)

    // TODO: merge two nodes if they have the same id
    // def addVariation(variation: NewTree): NewTree =
    //   newTree.copy(variation = newTree.variation.mergeVariations(variation.some))

    def addVariation(variation: Variation[NewBranch]): NewTree =
      newTree.copy(variations = newTree.variations :+ variation)

    def merge(n: NewTree): NewTree =
      newTree.copy(
        value = newTree.value.merge(n.value),
        child = newTree.child orElse n.child, // TODO: verify logic
        variations = newTree.variations ::: n.variations
      )

case class NewRoot(metas: Metas, tree: Option[NewTree]):
  override def toString = s"$tree"
