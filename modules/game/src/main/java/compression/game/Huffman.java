package org.lichess.compression.game;

import org.lichess.compression.BitReader;
import org.lichess.compression.BitWriter;

class Huffman {
    public static void write(int value, BitWriter writer) {
        Symbol symbol = CODES[value];
        writer.writeBits(symbol.code, symbol.bits);
    }

    public static int read(BitReader reader) {
        Node node = ROOT;
        while (node.zero != null && node.one != null) {
            int bit = reader.readBits(1);
            if (bit == 0) node = node.zero;
            else node = node.one;
        }
        return node.leaf;
    }

    private static class Symbol {
        public final int code;
        public final int bits;

        public Symbol(int code, int bits) {
            this.code = code;
            this.bits = bits;
        }
    }

    private static class Node {
        public final Node zero;
        public final Node one;
        public final int leaf;

        public Node(int leaf) {
            this.zero = null;
            this.one = null;
            this.leaf = leaf;
        }

        public Node(Node zero, Node one) {
            this.zero = zero;
            this.one = one;
            this.leaf = -1;
        }
    }

    private static Node buildTree(int code, int bits) {
        assert bits <= 32;

        for (int i = 0; i <= 0xff; i++) {
            if (CODES[i].code == code && CODES[i].bits == bits) {
                return new Node(i);
            }
        }

        return new Node(
            buildTree(code << 1, bits + 1),
            buildTree((code << 1) | 1, bits + 1));
    }

    // Huffman code for indexes in the legal move list. Precomputed based on
    // actual frequency in 16,232,215 rated games.
    //
    // This is based on a maximum of 256 legal moves per position, but the
    // highest indexes did not actually occur. They were manually assigned a
    // frequency of 1 and ordered.
    //
    // On the training corpus this achieves:
    // 37.03 bytes per game
    // 0.551 bytes per move
    private static final Symbol CODES[] = {
        new Symbol(0b00, 2), // 0: 225883932
        new Symbol(0b100, 3), // 1: 134956126
        new Symbol(0b1101, 4), // 2: 89041269
        new Symbol(0b1010, 4), // 3: 69386238
        new Symbol(0b0101, 4), // 4: 57040790
        new Symbol(0b11101, 5), // 5: 44974559
        new Symbol(0b10111, 5), // 6: 36547155
        new Symbol(0b01110, 5), // 7: 31624920
        new Symbol(0b01100, 5), // 8: 28432772
        new Symbol(0b01000, 5), // 9: 26540493
        new Symbol(0b111101, 6), // 10: 24484873
        new Symbol(0b111001, 6), // 11: 23058034
        new Symbol(0b111100, 6), // 12: 23535272
        new Symbol(0b110011, 6), // 13: 20482457
        new Symbol(0b110010, 6), // 14: 20450172
        new Symbol(0b110000, 6), // 15: 18316057
        new Symbol(0b101101, 6), // 16: 17214833
        new Symbol(0b101100, 6), // 17: 16964761
        new Symbol(0b011111, 6), // 18: 16530028
        new Symbol(0b011011, 6), // 19: 15369510
        new Symbol(0b010011, 6), // 20: 14178440
        new Symbol(0b011010, 6), // 21: 14275714
        new Symbol(0b1111111, 7), // 22: 13353306
        new Symbol(0b1111101, 7), // 23: 12829602
        new Symbol(0b1111110, 7), // 24: 13102592
        new Symbol(0b1111100, 7), // 25: 11932647
        new Symbol(0b1110000, 7), // 26: 10608657
        new Symbol(0b1100011, 7), // 27: 10142459
        new Symbol(0b0111101, 7), // 28: 8294594
        new Symbol(0b0100101, 7), // 29: 7337490
        new Symbol(0b0100100, 7), // 30: 6337744
        new Symbol(0b11100010, 8), // 31: 5380717
        new Symbol(0b11000101, 8), // 32: 4560556
        new Symbol(0b01111001, 8), // 33: 3913313
        new Symbol(0b111000111, 9), // 34: 3038767
        new Symbol(0b110001001, 9), // 35: 2480514
        new Symbol(0b011110001, 9), // 36: 1951026
        new Symbol(0b011110000, 9), // 37: 1521451
        new Symbol(0b1110001100, 10), // 38: 1183252
        new Symbol(0b1100010000, 10), // 39: 938708
        new Symbol(0b11100011010, 11), // 40: 673339
        new Symbol(0b11000100010, 11), // 41: 513153
        new Symbol(0b111000110110, 12), // 42: 377299
        new Symbol(0b110001000110, 12), // 43: 276996
        new Symbol(0b1110001101110, 13), // 44: 199682
        new Symbol(0b1100010001110, 13), // 45: 144602
        new Symbol(0b11100011011110, 14), // 46: 103313
        new Symbol(0b11000100011110, 14), // 47: 73046
        new Symbol(0b111000110111110, 15), // 48: 52339
        new Symbol(0b110001000111110, 15), // 49: 36779
        new Symbol(0b1110001101111110, 16), // 50: 26341
        new Symbol(0b1100010001111110, 16), // 51: 18719
        new Symbol(0b11000100011111111, 17), // 52: 13225
        new Symbol(0b111000110111111111, 18), // 53: 9392
        new Symbol(0b111000110111111101, 18), // 54: 6945
        new Symbol(0b110001000111111100, 18), // 55: 4893
        new Symbol(0b1110001101111111100, 19), // 56: 3698
        new Symbol(0b1100010001111111011, 19), // 57: 2763
        new Symbol(0b11100011011111111011, 20), // 58: 2114
        new Symbol(0b11100011011111110010, 20), // 59: 1631
        new Symbol(0b11100011011111110000, 20), // 60: 1380
        new Symbol(0b111000110111111110101, 21), // 61: 1090
        new Symbol(0b111000110111111100110, 21), // 62: 887
        new Symbol(0b111000110111111100010, 21), // 63: 715
        new Symbol(0b110001000111111101001, 21), // 64: 590
        new Symbol(0b110001000111111101000, 21), // 65: 549
        new Symbol(0b1110001101111111101000, 22), // 66: 477
        new Symbol(0b1110001101111111000110, 22), // 67: 388
        new Symbol(0b1100010001111111010111, 22), // 68: 351
        new Symbol(0b1100010001111111010101, 22), // 69: 319
        new Symbol(0b11100011011111111010011, 23), // 70: 262
        new Symbol(0b11100011011111110011110, 23), // 71: 236
        new Symbol(0b11100011011111110001110, 23), // 72: 200
        new Symbol(0b11100011011111110001111, 23), // 73: 210
        new Symbol(0b11000100011111110101100, 23), // 74: 153
        new Symbol(0b111000110111111100111011, 24), // 75: 117
        new Symbol(0b111000110111111110100100, 24), // 76: 121
        new Symbol(0b111000110111111100111111, 24), // 77: 121
        new Symbol(0b111000110111111100111010, 24), // 78: 115
        new Symbol(0b110001000111111101011011, 24), // 79: 95
        new Symbol(0b110001000111111101010011, 24), // 80: 75
        new Symbol(0b110001000111111101010001, 24), // 81: 67
        new Symbol(0b1110001101111111001110011, 25), // 82: 55
        new Symbol(0b1110001101111111001110001, 25), // 83: 50
        new Symbol(0b1110001101111111001110010, 25), // 84: 55
        new Symbol(0b1100010001111111010100101, 25), // 85: 33
        new Symbol(0b1100010001111111010110100, 25), // 86: 33
        new Symbol(0b1100010001111111010100001, 25), // 87: 30
        new Symbol(0b11100011011111110011111011, 26), // 88: 32
        new Symbol(0b11100011011111110011111001, 26), // 89: 28
        new Symbol(0b11100011011111110011111010, 26), // 90: 29
        new Symbol(0b11100011011111110011111000, 26), // 91: 27
        new Symbol(0b11000100011111110101101011, 26), // 92: 21
        new Symbol(0b111000110111111110100101111, 27), // 93: 15
        new Symbol(0b110001000111111101011010100, 27), // 94: 9
        new Symbol(0b110001000111111101011010101, 27), // 95: 10
        new Symbol(0b111000110111111100111000010, 27), // 96: 12
        new Symbol(0b111000110111111100111000011, 27), // 97: 12
        new Symbol(0b110001000111111101010010011, 27), // 98: 8
        new Symbol(0b1110001101111111101001010011, 28), // 99: 7
        new Symbol(0b1100010001111111010100100101, 28), // 100: 2
        new Symbol(0b1110001101111111001110000011, 28), // 101: 4
        new Symbol(0b1110001101111111001110000010, 28), // 102: 5
        new Symbol(0b1110001101111111001110000000, 28), // 103: 5
        new Symbol(0b11100011011111110011100000010, 29), // 104
        new Symbol(0b11000100011111110101000001001, 29), // 105: 5
        new Symbol(0b11100011011111110011100000011, 29), // 106: 1
        new Symbol(0b11000100011111110101000001000, 29), // 107: 1
        new Symbol(0b11000100011111110101000000011, 29), // 108
        new Symbol(0b110001000111111101010000011110, 30), // 109: 1
        new Symbol(0b111000110111111110100101100110, 30), // 110: 2
        new Symbol(0b111000110111111110100101010111, 30), // 111: 1
        new Symbol(0b110001000111111101010000001101, 30), // 112: 1
        new Symbol(0b111000110111111110100101100010, 30), // 113
        new Symbol(0b110001000111111101010000001000, 30), // 114
        new Symbol(0b110001000111111101010000000101, 30), // 115: 1
        new Symbol(0b110001000111111101010000000000, 30), // 116
        new Symbol(0b110001000111111101010000001010, 30), // 117
        new Symbol(0b110001000111111101010010001101, 30), // 118
        new Symbol(0b110001000111111101010010010011, 30), // 119
        new Symbol(0b110001000111111101010010010010, 30), // 120
        new Symbol(0b110001000111111101010010010001, 30), // 121
        new Symbol(0b110001000111111101010010010000, 30), // 122
        new Symbol(0b110001000111111101010010001011, 30), // 123
        new Symbol(0b110001000111111101010010001010, 30), // 124
        new Symbol(0b110001000111111101010010001001, 30), // 125
        new Symbol(0b110001000111111101010010001000, 30), // 126
        new Symbol(0b110001000111111101010010000111, 30), // 127
        new Symbol(0b110001000111111101010010000110, 30), // 128
        new Symbol(0b110001000111111101010010000011, 30), // 129
        new Symbol(0b110001000111111101010010000010, 30), // 130
        new Symbol(0b110001000111111101010000011011, 30), // 131
        new Symbol(0b110001000111111101010000011010, 30), // 132
        new Symbol(0b110001000111111101010000011001, 30), // 133
        new Symbol(0b110001000111111101010000011000, 30), // 134
        new Symbol(0b110001000111111101010000010101, 30), // 135
        new Symbol(0b110001000111111101010000010100, 30), // 136
        new Symbol(0b110001000111111101010010000101, 30), // 137
        new Symbol(0b110001000111111101010010000100, 30), // 138
        new Symbol(0b110001000111111101010000011111, 30), // 139
        new Symbol(0b110001000111111101010000011101, 30), // 140
        new Symbol(0b110001000111111101010000011100, 30), // 141
        new Symbol(0b110001000111111101010010000001, 30), // 142
        new Symbol(0b110001000111111101010010000000, 30), // 143
        new Symbol(0b110001000111111101010000001111, 30), // 144
        new Symbol(0b110001000111111101010000001110, 30), // 145
        new Symbol(0b110001000111111101010000001100, 30), // 146
        new Symbol(0b110001000111111101010000010111, 30), // 147
        new Symbol(0b110001000111111101010000010110, 30), // 148
        new Symbol(0b110001000111111101010000001001, 30), // 149
        new Symbol(0b110001000111111101010000000100, 30), // 150
        new Symbol(0b110001000111111101010000000011, 30), // 151
        new Symbol(0b110001000111111101010000000010, 30), // 152
        new Symbol(0b110001000111111101010000000001, 30), // 153
        new Symbol(0b110001000111111101010000001011, 30), // 154
        new Symbol(0b110001000111111101010010001111, 30), // 155
        new Symbol(0b110001000111111101010010001110, 30), // 156
        new Symbol(0b110001000111111101010010001100, 30), // 157
        new Symbol(0b1110001101111111101001010111101, 31), // 158
        new Symbol(0b1110001101111111101001010111111, 31), // 159
        new Symbol(0b1110001101111111101001010100010, 31), // 160
        new Symbol(0b1110001101111111101001011011111, 31), // 161
        new Symbol(0b1110001101111111101001010100100, 31), // 162
        new Symbol(0b1110001101111111101001010111001, 31), // 163
        new Symbol(0b1110001101111111101001011011010, 31), // 164
        new Symbol(0b1110001101111111101001011010010, 31), // 165
        new Symbol(0b1110001101111111101001011010000, 31), // 166
        new Symbol(0b1110001101111111101001010111010, 31), // 167
        new Symbol(0b1110001101111111101001010001011, 31), // 168
        new Symbol(0b1110001101111111101001010001010, 31), // 169
        new Symbol(0b1110001101111111101001010001001, 31), // 170
        new Symbol(0b1110001101111111101001010001000, 31), // 171
        new Symbol(0b1110001101111111101001010000111, 31), // 172
        new Symbol(0b1110001101111111101001010000110, 31), // 173
        new Symbol(0b1110001101111111101001010000101, 31), // 174
        new Symbol(0b1110001101111111101001010000100, 31), // 175
        new Symbol(0b1110001101111111101001011010111, 31), // 176
        new Symbol(0b1110001101111111101001011010110, 31), // 177
        new Symbol(0b1110001101111111101001011010101, 31), // 178
        new Symbol(0b1110001101111111101001011010100, 31), // 179
        new Symbol(0b1110001101111111101001010110111, 31), // 180
        new Symbol(0b1110001101111111101001010110110, 31), // 181
        new Symbol(0b1110001101111111101001010010101, 31), // 182
        new Symbol(0b1110001101111111101001010010100, 31), // 183
        new Symbol(0b1110001101111111101001010110101, 31), // 184
        new Symbol(0b1110001101111111101001010110100, 31), // 185
        new Symbol(0b1110001101111111101001010010111, 31), // 186
        new Symbol(0b1110001101111111101001010010110, 31), // 187
        new Symbol(0b1110001101111111101001010110001, 31), // 188
        new Symbol(0b1110001101111111101001010110000, 31), // 189
        new Symbol(0b1110001101111111101001010010011, 31), // 190
        new Symbol(0b1110001101111111101001010010010, 31), // 191
        new Symbol(0b1110001101111111101001011101101, 31), // 192
        new Symbol(0b1110001101111111101001011101100, 31), // 193
        new Symbol(0b1110001101111111101001011101011, 31), // 194
        new Symbol(0b1110001101111111101001011101010, 31), // 195
        new Symbol(0b1110001101111111101001011100111, 31), // 196
        new Symbol(0b1110001101111111101001011100110, 31), // 197
        new Symbol(0b1110001101111111101001010010001, 31), // 198
        new Symbol(0b1110001101111111101001010010000, 31), // 199
        new Symbol(0b1110001101111111101001011100011, 31), // 200
        new Symbol(0b1110001101111111101001011100010, 31), // 201
        new Symbol(0b1110001101111111101001011100001, 31), // 202
        new Symbol(0b1110001101111111101001011100000, 31), // 203
        new Symbol(0b1110001101111111101001011101001, 31), // 204
        new Symbol(0b1110001101111111101001011101000, 31), // 205
        new Symbol(0b1110001101111111101001010001111, 31), // 206
        new Symbol(0b1110001101111111101001010001110, 31), // 207
        new Symbol(0b1110001101111111101001010000011, 31), // 208
        new Symbol(0b1110001101111111101001010000010, 31), // 209
        new Symbol(0b1110001101111111101001010001101, 31), // 210
        new Symbol(0b1110001101111111101001010001100, 31), // 211
        new Symbol(0b1110001101111111101001011001111, 31), // 212
        new Symbol(0b1110001101111111101001011001110, 31), // 213
        new Symbol(0b1110001101111111101001010000001, 31), // 214
        new Symbol(0b1110001101111111101001010000000, 31), // 215
        new Symbol(0b1110001101111111101001011011001, 31), // 216
        new Symbol(0b1110001101111111101001011011000, 31), // 217
        new Symbol(0b1110001101111111101001011100101, 31), // 218
        new Symbol(0b1110001101111111101001011100100, 31), // 219
        new Symbol(0b1110001101111111101001010101101, 31), // 220
        new Symbol(0b1110001101111111101001010101100, 31), // 221
        new Symbol(0b1110001101111111101001010110011, 31), // 222
        new Symbol(0b1110001101111111101001010110010, 31), // 223
        new Symbol(0b1110001101111111101001010101001, 31), // 224
        new Symbol(0b1110001101111111101001010101000, 31), // 225
        new Symbol(0b1110001101111111101001011101111, 31), // 226
        new Symbol(0b1110001101111111101001011101110, 31), // 227
        new Symbol(0b1110001101111111101001011001011, 31), // 228
        new Symbol(0b1110001101111111101001011001010, 31), // 229
        new Symbol(0b1110001101111111101001011000011, 31), // 230
        new Symbol(0b1110001101111111101001011000010, 31), // 231
        new Symbol(0b1110001101111111101001010101011, 31), // 232
        new Symbol(0b1110001101111111101001010101010, 31), // 233
        new Symbol(0b1110001101111111101001011001001, 31), // 234
        new Symbol(0b1110001101111111101001011001000, 31), // 235
        new Symbol(0b1110001101111111101001011000111, 31), // 236
        new Symbol(0b1110001101111111101001011000110, 31), // 237
        new Symbol(0b1110001101111111101001011000001, 31), // 238
        new Symbol(0b1110001101111111101001011000000, 31), // 239
        new Symbol(0b1110001101111111101001010111100, 31), // 240
        new Symbol(0b1110001101111111101001010100111, 31), // 241
        new Symbol(0b1110001101111111101001010100110, 31), // 242
        new Symbol(0b1110001101111111101001010111110, 31), // 243
        new Symbol(0b1110001101111111101001010100011, 31), // 244
        new Symbol(0b1110001101111111101001010100001, 31), // 245
        new Symbol(0b1110001101111111101001010100000, 31), // 246
        new Symbol(0b1110001101111111101001011011110, 31), // 247
        new Symbol(0b1110001101111111101001010100101, 31), // 248
        new Symbol(0b1110001101111111101001011011101, 31), // 249
        new Symbol(0b1110001101111111101001011011100, 31), // 250
        new Symbol(0b1110001101111111101001010111000, 31), // 251
        new Symbol(0b1110001101111111101001011011011, 31), // 252
        new Symbol(0b1110001101111111101001011010001, 31), // 253
        new Symbol(0b1110001101111111101001011010011, 31), // 254
        new Symbol(0b1110001101111111101001010111011, 31), // 255
    };

    private static final Node ROOT = buildTree(0, 0);
}
