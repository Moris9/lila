package org.lichess.compression.game;

import org.lichess.compression.BitReader;
import org.lichess.compression.BitWriter;

class Huffman {
    public static void write(int value, BitWriter writer) {
        Symbol symbol = CODES[value];
        writer.writeBits(symbol.code, symbol.bits);
    }

    public static int read(BitReader reader) {
        Node node = ROOT;
        while (node.zero != null && node.one != null) {
            int bit = reader.readBits(1);
            if (bit == 0) node = node.zero;
            else node = node.one;
        }
        return node.leaf;
    }

    private static class Symbol {
        public final int code;
        public final int bits;

        public Symbol(int code, int bits) {
            this.code = code;
            this.bits = bits;
        }
    }

    private static class Node {
        public Node zero;
        public Node one;
        public int leaf;

        public Node(int leaf) {
            this.leaf = leaf;
        }

        public Node(Node zero, Node one) {
            this.zero = zero;
            this.one = one;
            this.leaf = -1;
        }
    }

    private static Node buildTree(int code, int bits) {
        assert bits <= 32;

        for (int i = 0; i <= 0xff; i++) {
            if (CODES[i].code == code && CODES[i].bits == bits) {
                return new Node(i);
            }
        }

        return new Node(
            buildTree(code << 1, bits + 1),
            buildTree((code << 1) | 1, bits + 1));
    }

    // Huffman code for indexes in the legal move list. Precomputed based on
    // actual frequency in 1 million rated games.
    //
    // This is based on a maximum of 256 legal moves per position, but the
    // highest indexes did not actually occur. They were manually assigned a
    // frequency of 1 and ordered.
    //
    // On the training corpus this achieves:
    // 38,30 bytes per game
    // 0.57 bytes per move
    private static final Symbol CODES[] = {
        new Symbol(0b111, 3), // 0
        new Symbol(0b100, 3), // 1
        new Symbol(0b000, 3), // 2
        new Symbol(0b1100, 4), // 3
        new Symbol(0b0101, 4), // 4
        new Symbol(0b0010, 4), // 5
        new Symbol(0b10110, 5), // 6
        new Symbol(0b01101, 5), // 7
        new Symbol(0b01000, 5), // 8
        new Symbol(0b00110, 5), // 9
        new Symbol(0b110101, 6), // 10
        new Symbol(0b101111, 6), // 11
        new Symbol(0b101011, 6), // 12
        new Symbol(0b110100, 6), // 13
        new Symbol(0b101010, 6), // 14
        new Symbol(0b101000, 6), // 15
        new Symbol(0b011111, 6), // 16
        new Symbol(0b011110, 6), // 17
        new Symbol(0b011100, 6), // 18
        new Symbol(0b011000, 6), // 19
        new Symbol(0b011001, 6), // 20
        new Symbol(0b010010, 6), // 21
        new Symbol(0b001111, 6), // 22
        new Symbol(0b001110, 6), // 23
        new Symbol(0b1101111, 7), // 24
        new Symbol(0b1101101, 7), // 25
        new Symbol(0b1101100, 7), // 26
        new Symbol(0b1011101, 7), // 27
        new Symbol(0b1010011, 7), // 28
        new Symbol(0b1010010, 7), // 29
        new Symbol(0b0111010, 7), // 30
        new Symbol(0b0100111, 7), // 31
        new Symbol(0b11011101, 8), // 32
        new Symbol(0b10111001, 8), // 33
        new Symbol(0b10111000, 8), // 34
        new Symbol(0b01110110, 8), // 35
        new Symbol(0b01001101, 8), // 36
        new Symbol(0b110111001, 9), // 37
        new Symbol(0b011101111, 9), // 38
        new Symbol(0b010011001, 9), // 39
        new Symbol(0b010011000, 9), // 40
        new Symbol(0b1101110000, 10), // 41
        new Symbol(0b0111011100, 10), // 42
        new Symbol(0b11011100010, 11), // 43
        new Symbol(0b01110111010, 11), // 44
        new Symbol(0b110111000110, 12), // 45
        new Symbol(0b011101110110, 12), // 46
        new Symbol(0b1101110001110, 13), // 47
        new Symbol(0b0111011101111, 13), // 48
        new Symbol(0b11011100011111, 14), // 49
        new Symbol(0b01110111011101, 14), // 50
        new Symbol(0b110111000111101, 15), // 51
        new Symbol(0b011101110111001, 15), // 52
        new Symbol(0b1101110001111000, 16), // 53
        new Symbol(0b0111011101110000, 16), // 54
        new Symbol(0b11011100011110010, 17), // 55
        new Symbol(0b01110111011100010, 17), // 56
        new Symbol(0b011101110111000111, 18), // 57
        new Symbol(0b1101110001111001110, 19), // 58
        new Symbol(0b0111011101110001101, 19), // 59
        new Symbol(0b11011100011110011110, 20), // 60
        new Symbol(0b11011100011110011010, 20), // 61
        new Symbol(0b110111000111100110111, 21), // 62
        new Symbol(0b110111000111100110011, 21), // 63
        new Symbol(0b110111000111100110000, 21), // 64
        new Symbol(0b011101110111000110010, 21), // 65
        new Symbol(0b1101110001111001101100, 22), // 66
        new Symbol(0b1101110001111001100101, 22), // 67
        new Symbol(0b0111011101110001100110, 22), // 68
        new Symbol(0b11011100011110011111010, 23), // 69
        new Symbol(0b01110111011100011000101, 23), // 70
        new Symbol(0b01110111011100011000100, 23), // 71
        new Symbol(0b11011100011110011001000, 23), // 72
        new Symbol(0b01110111011100011000011, 23), // 73
        new Symbol(0b11011100011110011000101, 23), // 74
        new Symbol(0b110111000111100110110100, 24), // 75
        new Symbol(0b110111000111100110010011, 24), // 76
        new Symbol(0b110111000111100110010010, 24), // 77
        new Symbol(0b110111000111100110001100, 24), // 78
        new Symbol(0b110111000111100110001111, 24), // 79
        new Symbol(0b110111000111100110001101, 24), // 80
        new Symbol(0b110111000111100110001110, 24), // 81
        new Symbol(0b110111000111100110001001, 24), // 82
        new Symbol(0b011101110111000110000010, 24), // 83
        new Symbol(0b1101110001111001111100011, 25), // 84
        new Symbol(0b1101110001111001111100010, 25), // 85
        new Symbol(0b1101110001111001101101011, 25), // 86
        new Symbol(0b1101110001111001111110101, 25), // 87
        new Symbol(0b1101110001111001111111101, 25), // 88
        new Symbol(0b1101110001111001101101010, 25), // 89
        new Symbol(0b0111011101110001100000010, 25), // 90
        new Symbol(0b0111011101110001100111010, 25), // 91
        new Symbol(0b11011100011110011111111100, 26), // 92
        new Symbol(0b01110111011100011001110000, 26), // 93
        new Symbol(0b01110111011100011000000010, 26), // 94
        new Symbol(0b01110111011100011001110111, 26), // 95
        new Symbol(0b01110111011100011001110010, 26), // 96
        new Symbol(0b01110111011100011001111010, 26), // 97
        new Symbol(0b01110111011100011001111001, 26), // 98
        new Symbol(0b01110111011100011000111100, 26), // 99
        new Symbol(0b01110111011100011001111100, 26), // 100
        new Symbol(0b01110111011100011000010111, 26), // 101
        new Symbol(0b01110111011100011000010110, 26), // 102
        new Symbol(0b11011100011110011000100001, 26), // 103
        new Symbol(0b11011100011110011000100000, 26), // 104
        new Symbol(0b01110111011100011000110111, 26), // 105
        new Symbol(0b01110111011100011000110110, 26), // 106
        new Symbol(0b01110111011100011000110101, 26), // 107
        new Symbol(0b01110111011100011000110100, 26), // 108
        new Symbol(0b01110111011100011000010101, 26), // 109
        new Symbol(0b01110111011100011000010100, 26), // 110
        new Symbol(0b01110111011100011000010011, 26), // 111
        new Symbol(0b01110111011100011000010010, 26), // 112
        new Symbol(0b01110111011100011000001101, 26), // 113
        new Symbol(0b01110111011100011000001100, 26), // 114
        new Symbol(0b01110111011100011000110011, 26), // 115
        new Symbol(0b01110111011100011000110010, 26), // 116
        new Symbol(0b01110111011100011000110001, 26), // 117
        new Symbol(0b01110111011100011000110000, 26), // 118
        new Symbol(0b01110111011100011000001111, 26), // 119
        new Symbol(0b01110111011100011000001110, 26), // 120
        new Symbol(0b01110111011100011000000001, 26), // 121
        new Symbol(0b01110111011100011000000000, 26), // 122
        new Symbol(0b01110111011100011000010001, 26), // 123
        new Symbol(0b01110111011100011000010000, 26), // 124
        new Symbol(0b01110111011100011001110001, 26), // 125
        new Symbol(0b01110111011100011000000111, 26), // 126
        new Symbol(0b01110111011100011000000110, 26), // 127
        new Symbol(0b01110111011100011000000011, 26), // 128
        new Symbol(0b01110111011100011001110110, 26), // 129
        new Symbol(0b01110111011100011001110011, 26), // 130
        new Symbol(0b01110111011100011001111111, 26), // 131
        new Symbol(0b01110111011100011001111110, 26), // 132
        new Symbol(0b01110111011100011001111011, 26), // 133
        new Symbol(0b01110111011100011001111000, 26), // 134
        new Symbol(0b01110111011100011000111111, 26), // 135
        new Symbol(0b01110111011100011000111110, 26), // 136
        new Symbol(0b01110111011100011000111101, 26), // 137
        new Symbol(0b01110111011100011001111101, 26), // 138
        new Symbol(0b01110111011100011000111011, 26), // 139
        new Symbol(0b01110111011100011000111010, 26), // 140
        new Symbol(0b01110111011100011000111001, 26), // 141
        new Symbol(0b01110111011100011000111000, 26), // 142
        new Symbol(0b11011100011110011000100010, 26), // 143
        new Symbol(0b110111000111100111110011001, 27), // 144
        new Symbol(0b110111000111100111110000011, 27), // 145
        new Symbol(0b110111000111100111110000001, 27), // 146
        new Symbol(0b110111000111100111111111100, 27), // 147
        new Symbol(0b110111000111100110110111010, 27), // 148
        new Symbol(0b110111000111100111110110001, 27), // 149
        new Symbol(0b110111000111100111111101101, 27), // 150
        new Symbol(0b110111000111100111110110110, 27), // 151
        new Symbol(0b110111000111100111110110011, 27), // 152
        new Symbol(0b110111000111100110110110001, 27), // 153
        new Symbol(0b110111000111100110110110101, 27), // 154
        new Symbol(0b110111000111100111110010100, 27), // 155
        new Symbol(0b110111000111100111111001111, 27), // 156
        new Symbol(0b110111000111100110110110010, 27), // 157
        new Symbol(0b110111000111100111110010111, 27), // 158
        new Symbol(0b110111000111100111110010000, 27), // 159
        new Symbol(0b110111000111100111111011111, 27), // 160
        new Symbol(0b110111000111100111111001100, 27), // 161
        new Symbol(0b110111000111100111111001001, 27), // 162
        new Symbol(0b110111000111100111111000100, 27), // 163
        new Symbol(0b110111000111100111111100001, 27), // 164
        new Symbol(0b110111000111100111111000110, 27), // 165
        new Symbol(0b110111000111100111111000001, 27), // 166
        new Symbol(0b110111000111100111111011010, 27), // 167
        new Symbol(0b110111000111100111111011000, 27), // 168
        new Symbol(0b110111000111100110001000111, 27), // 169
        new Symbol(0b110111000111100111111100110, 27), // 170
        new Symbol(0b110111000111100111111010011, 27), // 171
        new Symbol(0b110111000111100111111010010, 27), // 172
        new Symbol(0b110111000111100111110011101, 27), // 173
        new Symbol(0b110111000111100111110011100, 27), // 174
        new Symbol(0b110111000111100111110011011, 27), // 175
        new Symbol(0b110111000111100111110011010, 27), // 176
        new Symbol(0b110111000111100111111110011, 27), // 177
        new Symbol(0b110111000111100111111110010, 27), // 178
        new Symbol(0b110111000111100111110111111, 27), // 179
        new Symbol(0b110111000111100111110111110, 27), // 180
        new Symbol(0b110111000111100111111110001, 27), // 181
        new Symbol(0b110111000111100111111110000, 27), // 182
        new Symbol(0b110111000111100111110111011, 27), // 183
        new Symbol(0b110111000111100111110111010, 27), // 184
        new Symbol(0b110111000111100111110111001, 27), // 185
        new Symbol(0b110111000111100111110111000, 27), // 186
        new Symbol(0b110111000111100111111111111, 27), // 187
        new Symbol(0b110111000111100111111111110, 27), // 188
        new Symbol(0b110111000111100111111111011, 27), // 189
        new Symbol(0b110111000111100111111111010, 27), // 190
        new Symbol(0b110111000111100110110111111, 27), // 191
        new Symbol(0b110111000111100110110111110, 27), // 192
        new Symbol(0b110111000111100111111010001, 27), // 193
        new Symbol(0b110111000111100111111010000, 27), // 194
        new Symbol(0b110111000111100110110111101, 27), // 195
        new Symbol(0b110111000111100110110111100, 27), // 196
        new Symbol(0b110111000111100111110011111, 27), // 197
        new Symbol(0b110111000111100111110011110, 27), // 198
        new Symbol(0b110111000111100111110000111, 27), // 199
        new Symbol(0b110111000111100111110000110, 27), // 200
        new Symbol(0b110111000111100111110011000, 27), // 201
        new Symbol(0b110111000111100111110000101, 27), // 202
        new Symbol(0b110111000111100111110000100, 27), // 203
        new Symbol(0b110111000111100111110111101, 27), // 204
        new Symbol(0b110111000111100111110111100, 27), // 205
        new Symbol(0b110111000111100111110000010, 27), // 206
        new Symbol(0b110111000111100111111101011, 27), // 207
        new Symbol(0b110111000111100111111101010, 27), // 208
        new Symbol(0b110111000111100111110000000, 27), // 209
        new Symbol(0b110111000111100111111101001, 27), // 210
        new Symbol(0b110111000111100111111101000, 27), // 211
        new Symbol(0b110111000111100111111111101, 27), // 212
        new Symbol(0b110111000111100111110110101, 27), // 213
        new Symbol(0b110111000111100111110110100, 27), // 214
        new Symbol(0b110111000111100110110111011, 27), // 215
        new Symbol(0b110111000111100111111101111, 27), // 216
        new Symbol(0b110111000111100111111101110, 27), // 217
        new Symbol(0b110111000111100111110110000, 27), // 218
        new Symbol(0b110111000111100111111101100, 27), // 219
        new Symbol(0b110111000111100110110111001, 27), // 220
        new Symbol(0b110111000111100110110111000, 27), // 221
        new Symbol(0b110111000111100111110110111, 27), // 222
        new Symbol(0b110111000111100111110110010, 27), // 223
        new Symbol(0b110111000111100110110110111, 27), // 224
        new Symbol(0b110111000111100110110110110, 27), // 225
        new Symbol(0b110111000111100110110110000, 27), // 226
        new Symbol(0b110111000111100110110110100, 27), // 227
        new Symbol(0b110111000111100111110010101, 27), // 228
        new Symbol(0b110111000111100111111001110, 27), // 229
        new Symbol(0b110111000111100110110110011, 27), // 230
        new Symbol(0b110111000111100111110010011, 27), // 231
        new Symbol(0b110111000111100111110010010, 27), // 232
        new Symbol(0b110111000111100111110010110, 27), // 233
        new Symbol(0b110111000111100111110010001, 27), // 234
        new Symbol(0b110111000111100111111001011, 27), // 235
        new Symbol(0b110111000111100111111001010, 27), // 236
        new Symbol(0b110111000111100111111011110, 27), // 237
        new Symbol(0b110111000111100111111001101, 27), // 238
        new Symbol(0b110111000111100111111011101, 27), // 239
        new Symbol(0b110111000111100111111011100, 27), // 240
        new Symbol(0b110111000111100111111001000, 27), // 241
        new Symbol(0b110111000111100111111000101, 27), // 242
        new Symbol(0b110111000111100111111100011, 27), // 243
        new Symbol(0b110111000111100111111100010, 27), // 244
        new Symbol(0b110111000111100111111100000, 27), // 245
        new Symbol(0b110111000111100111111000111, 27), // 246
        new Symbol(0b110111000111100111111000011, 27), // 247
        new Symbol(0b110111000111100111111000010, 27), // 248
        new Symbol(0b110111000111100111111000000, 27), // 249
        new Symbol(0b110111000111100111111011011, 27), // 250
        new Symbol(0b110111000111100111111100111, 27), // 251
        new Symbol(0b110111000111100111111011001, 27), // 252
        new Symbol(0b110111000111100111111100101, 27), // 253
        new Symbol(0b110111000111100111111100100, 27), // 254
        new Symbol(0b110111000111100110001000110, 27), // 255
    };

    private static final Node ROOT = buildTree(0, 0);
}
