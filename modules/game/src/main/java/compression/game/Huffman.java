package org.lichess.compression.game;

import org.lichess.compression.BitReader;
import org.lichess.compression.BitWriter;

class Huffman {
    public static void write(int value, BitWriter writer) {
        Symbol symbol = CODES[value];
        writer.writeBits(symbol.code, symbol.bits);
    }

    public static int read(BitReader reader) {
        Node node = ROOT;
        while (node.zero != null && node.one != null) {
            int bit = reader.readBits(1);
            if (bit == 0) node = node.zero;
            else node = node.one;
        }
        return node.leaf;
    }

    private static class Symbol {
        public final int code;
        public final int bits;

        public Symbol(int code, int bits) {
            this.code = code;
            this.bits = bits;
        }
    }

    private static class Node {
        public final Node zero;
        public final Node one;
        public final int leaf;

        public Node(int leaf) {
            this.zero = null;
            this.one = null;
            this.leaf = leaf;
        }

        public Node(Node zero, Node one) {
            this.zero = zero;
            this.one = one;
            this.leaf = -1;
        }
    }

    private static Node buildTree(int code, int bits) {
        assert bits <= 32;

        for (int i = 0; i <= 0xff; i++) {
            if (CODES[i].code == code && CODES[i].bits == bits) {
                return new Node(i);
            }
        }

        return new Node(
            buildTree(code << 1, bits + 1),
            buildTree((code << 1) | 1, bits + 1));
    }

    // Huffman code for indexes in the legal move list. Precomputed based on
    // actual frequency in 1 million rated games.
    //
    // This is based on a maximum of 256 legal moves per position, but the
    // highest indexes did not actually occur. They were manually assigned a
    // frequency of 1 and ordered.
    //
    // On the training corpus this achieves:
    // 38.07 bytes per game
    // 0.566 bytes per move
    private static final Symbol CODES[] = {
        new Symbol(0b00, 2), // 0: 12453116
        new Symbol(0b100, 3), // 1: 8159589
        new Symbol(0b1110, 4), // 2: 5980520
        new Symbol(0b1010, 4), // 3: 4405351
        new Symbol(0b0110, 4), // 4: 3787405
        new Symbol(0b11110, 5), // 5: 2971779
        new Symbol(0b10111, 5), // 6: 2375299
        new Symbol(0b01110, 5), // 7: 1953825
        new Symbol(0b01001, 5), // 8: 1719033
        new Symbol(0b111110, 6), // 9: 1529792
        new Symbol(0b110110, 6), // 10: 1404304
        new Symbol(0b110100, 6), // 11: 1307366
        new Symbol(0b110001, 6), // 12: 1245952
        new Symbol(0b110000, 6), // 13: 1208973
        new Symbol(0b110011, 6), // 14: 1288425
        new Symbol(0b101100, 6), // 15: 1102896
        new Symbol(0b011111, 6), // 16: 1091950
        new Symbol(0b011110, 6), // 17: 1044782
        new Symbol(0b010110, 6), // 18: 937754
        new Symbol(0b010101, 6), // 19: 931832
        new Symbol(0b010100, 6), // 20: 861502
        new Symbol(0b010000, 6), // 21: 845311
        new Symbol(0b1111111, 7), // 22: 843629
        new Symbol(0b1111110, 7), // 23: 772427
        new Symbol(0b1101111, 7), // 24: 744231
        new Symbol(0b1101011, 7), // 25: 706928
        new Symbol(0b1101010, 7), // 26: 679237
        new Symbol(0b1100101, 7), // 27: 665885
        new Symbol(0b1011011, 7), // 28: 589601
        new Symbol(0b1011010, 7), // 29: 552505
        new Symbol(0b0101110, 7), // 30: 473465
        new Symbol(0b0100011, 7), // 31: 434866
        new Symbol(0b11011101, 8), // 32: 381653
        new Symbol(0b11001001, 8), // 33: 331160
        new Symbol(0b11001000, 8), // 34: 283631
        new Symbol(0b01011110, 8), // 35: 244393
        new Symbol(0b01000101, 8), // 36: 212393
        new Symbol(0b110111001, 9), // 37: 183242
        new Symbol(0b010111111, 9), // 38: 138799
        new Symbol(0b010001001, 9), // 39: 112593
        new Symbol(0b010001000, 9), // 40: 87152
        new Symbol(0b1101110000, 10), // 41: 69232
        new Symbol(0b0101111100, 10), // 42: 54072
        new Symbol(0b11011100010, 11), // 43: 40460
        new Symbol(0b01011111010, 11), // 44: 32700
        new Symbol(0b110111000110, 12), // 45: 22694
        new Symbol(0b010111110110, 12), // 46: 16418
        new Symbol(0b1101110001111, 13), // 47: 12037
        new Symbol(0b0101111101111, 13), // 48: 8663
        new Symbol(0b11011100011101, 14), // 49: 6054
        new Symbol(0b01011111011101, 14), // 50: 4270
        new Symbol(0b110111000111001, 15), // 51: 2925
        new Symbol(0b010111110111000, 15), // 52: 1952
        new Symbol(0b1101110001110000, 16), // 53: 1293
        new Symbol(0b0101111101110010, 16), // 54: 944
        new Symbol(0b11011100011100010, 17), // 55: 629
        new Symbol(0b01011111011100110, 17), // 56: 475
        new Symbol(0b010111110111001111, 18), // 57: 289
        new Symbol(0b1101110001110001110, 19), // 58: 219
        new Symbol(0b11011100011100011111, 20), // 59: 122
        new Symbol(0b11011100011100011110, 20), // 60: 114
        new Symbol(0b11011100011100011001, 20), // 61: 85
        new Symbol(0b110111000111000110111, 21), // 62: 59
        new Symbol(0b110111000111000110110, 21), // 63: 50
        new Symbol(0b110111000111000110100, 21), // 64: 45
        new Symbol(0b1101110001110001100010, 22), // 65: 20
        new Symbol(0b1101110001110001101010, 22), // 66: 22
        new Symbol(0b0101111101110011101101, 22), // 67: 16
        new Symbol(0b1101110001110001100001, 22), // 68: 19
        new Symbol(0b0101111101110011101000, 22), // 69: 15
        new Symbol(0b0101111101110011101110, 22), // 70: 8
        new Symbol(0b01011111011100111011110, 23), // 71: 17
        new Symbol(0b01011111011100111000001, 23), // 72: 6
        new Symbol(0b11011100011100011000110, 23), // 73: 10
        new Symbol(0b11011100011100011000001, 23), // 74: 9
        new Symbol(0b01011111011100111000000, 23), // 75: 5
        new Symbol(0b110111000111000110101100, 24), // 76: 6
        new Symbol(0b110111000111000110101111, 24), // 77: 6
        new Symbol(0b110111000111000110101110, 24), // 78
        new Symbol(0b010111110111001110111110, 24), // 79: 6
        new Symbol(0b110111000111000110000000, 24), // 80: 4
        new Symbol(0b010111110111001110111111, 24), // 81: 4
        new Symbol(0b010111110111001110110011, 24), // 82: 4
        new Symbol(0b110111000111000110000001, 24), // 83: 4
        new Symbol(0b010111110111001110000101, 24), // 84: 2
        new Symbol(0b1101110001110001100011101, 25), // 85: 2
        new Symbol(0b1101110001110001100011100, 25), // 86: 2
        new Symbol(0b1101110001110001101011010, 25), // 87: 2
        new Symbol(0b1101110001110001100011110, 25), // 88: 1
        new Symbol(0b0101111101110011100010010, 25), // 89: 2
        new Symbol(0b1101110001110001100011111, 25), // 90: 4
        new Symbol(0b0101111101110011101011111, 25), // 91: 1
        new Symbol(0b0101111101110011101011110, 25), // 92
        new Symbol(0b0101111101110011100111111, 25), // 93
        new Symbol(0b0101111101110011101011001, 25), // 94: 3
        new Symbol(0b01011111011100111001011101, 26), // 95: 1
        new Symbol(0b01011111011100111010110100, 26), // 96
        new Symbol(0b01011111011100111001011001, 26), // 97: 1
        new Symbol(0b01011111011100111001001010, 26), // 98
        new Symbol(0b01011111011100111001110001, 26), // 99
        new Symbol(0b01011111011100111010111000, 26), // 100: 1
        new Symbol(0b01011111011100111000011101, 26), // 101
        new Symbol(0b01011111011100111010110110, 26), // 102
        new Symbol(0b01011111011100111010110001, 26), // 103
        new Symbol(0b01011111011100111000011010, 26), // 104
        new Symbol(0b01011111011100111000011001, 26), // 105
        new Symbol(0b01011111011100111001110010, 26), // 106
        new Symbol(0b01011111011100111000011111, 26), // 107
        new Symbol(0b01011111011100111010100000, 26), // 108
        new Symbol(0b01011111011100111000111001, 26), // 109
        new Symbol(0b01011111011100111010100100, 26), // 110
        new Symbol(0b01011111011100111000111101, 26), // 111
        new Symbol(0b01011111011100111000110100, 26), // 112
        new Symbol(0b01011111011100111010101111, 26), // 113
        new Symbol(0b01011111011100111000111010, 26), // 114
        new Symbol(0b01011111011100111000110111, 26), // 115
        new Symbol(0b01011111011100111010101000, 26), // 116
        new Symbol(0b01011111011100111000110011, 26), // 117
        new Symbol(0b01011111011100111010101100, 26), // 118
        new Symbol(0b01011111011100111001101101, 26), // 119
        new Symbol(0b01011111011100111001101000, 26), // 120
        new Symbol(0b01011111011100111000101101, 26), // 121
        new Symbol(0b01011111011100111001101010, 26), // 122
        new Symbol(0b01011111011100111001100101, 26), // 123
        new Symbol(0b01011111011100111001001110, 26), // 124
        new Symbol(0b01011111011100111001001000, 26), // 125
        new Symbol(0b01011111011100111000101010, 26), // 126
        new Symbol(0b01011111011100111001001101, 26), // 127
        new Symbol(0b01011111011100111001001100, 26), // 128
        new Symbol(0b01011111011100111010010101, 26), // 129
        new Symbol(0b01011111011100111010010100, 26), // 130
        new Symbol(0b01011111011100111011001011, 26), // 131
        new Symbol(0b01011111011100111011001010, 26), // 132
        new Symbol(0b01011111011100111010010011, 26), // 133
        new Symbol(0b01011111011100111010010010, 26), // 134
        new Symbol(0b01011111011100111011001001, 26), // 135
        new Symbol(0b01011111011100111011001000, 26), // 136
        new Symbol(0b01011111011100111001100011, 26), // 137
        new Symbol(0b01011111011100111001100010, 26), // 138
        new Symbol(0b01011111011100111001100001, 26), // 139
        new Symbol(0b01011111011100111001100000, 26), // 140
        new Symbol(0b01011111011100111000100111, 26), // 141
        new Symbol(0b01011111011100111000100110, 26), // 142
        new Symbol(0b01011111011100111010011111, 26), // 143
        new Symbol(0b01011111011100111010011110, 26), // 144
        new Symbol(0b01011111011100111000100011, 26), // 145
        new Symbol(0b01011111011100111000100010, 26), // 146
        new Symbol(0b01011111011100111000100001, 26), // 147
        new Symbol(0b01011111011100111000100000, 26), // 148
        new Symbol(0b01011111011100111001000111, 26), // 149
        new Symbol(0b01011111011100111001000110, 26), // 150
        new Symbol(0b01011111011100111010011101, 26), // 151
        new Symbol(0b01011111011100111010011100, 26), // 152
        new Symbol(0b01011111011100111001000101, 26), // 153
        new Symbol(0b01011111011100111001000100, 26), // 154
        new Symbol(0b01011111011100111001011111, 26), // 155
        new Symbol(0b01011111011100111001011110, 26), // 156
        new Symbol(0b01011111011100111001011100, 26), // 157
        new Symbol(0b01011111011100111010011011, 26), // 158
        new Symbol(0b01011111011100111010011010, 26), // 159
        new Symbol(0b01011111011100111010011001, 26), // 160
        new Symbol(0b01011111011100111010011000, 26), // 161
        new Symbol(0b01011111011100111011000001, 26), // 162
        new Symbol(0b01011111011100111011000000, 26), // 163
        new Symbol(0b01011111011100111011000111, 26), // 164
        new Symbol(0b01011111011100111011000110, 26), // 165
        new Symbol(0b01011111011100111011000101, 26), // 166
        new Symbol(0b01011111011100111011000100, 26), // 167
        new Symbol(0b01011111011100111001010111, 26), // 168
        new Symbol(0b01011111011100111001010110, 26), // 169
        new Symbol(0b01011111011100111011000011, 26), // 170
        new Symbol(0b01011111011100111011000010, 26), // 171
        new Symbol(0b01011111011100111001010101, 26), // 172
        new Symbol(0b01011111011100111001010100, 26), // 173
        new Symbol(0b01011111011100111010010111, 26), // 174
        new Symbol(0b01011111011100111010010110, 26), // 175
        new Symbol(0b01011111011100111001111011, 26), // 176
        new Symbol(0b01011111011100111001111010, 26), // 177
        new Symbol(0b01011111011100111001000011, 26), // 178
        new Symbol(0b01011111011100111001000010, 26), // 179
        new Symbol(0b01011111011100111001111001, 26), // 180
        new Symbol(0b01011111011100111001111000, 26), // 181
        new Symbol(0b01011111011100111010010001, 26), // 182
        new Symbol(0b01011111011100111010010000, 26), // 183
        new Symbol(0b01011111011100111010110101, 26), // 184
        new Symbol(0b01011111011100111001011011, 26), // 185
        new Symbol(0b01011111011100111001011010, 26), // 186
        new Symbol(0b01011111011100111001011000, 26), // 187
        new Symbol(0b01011111011100111001000001, 26), // 188
        new Symbol(0b01011111011100111001000000, 26), // 189
        new Symbol(0b01011111011100111001110111, 26), // 190
        new Symbol(0b01011111011100111001110110, 26), // 191
        new Symbol(0b01011111011100111001001011, 26), // 192
        new Symbol(0b01011111011100111001110101, 26), // 193
        new Symbol(0b01011111011100111001110100, 26), // 194
        new Symbol(0b01011111011100111010111011, 26), // 195
        new Symbol(0b01011111011100111010111010, 26), // 196
        new Symbol(0b01011111011100111001110000, 26), // 197
        new Symbol(0b01011111011100111010111001, 26), // 198
        new Symbol(0b01011111011100111001010011, 26), // 199
        new Symbol(0b01011111011100111001010010, 26), // 200
        new Symbol(0b01011111011100111001111101, 26), // 201
        new Symbol(0b01011111011100111001111100, 26), // 202
        new Symbol(0b01011111011100111000011100, 26), // 203
        new Symbol(0b01011111011100111010110111, 26), // 204
        new Symbol(0b01011111011100111010100111, 26), // 205
        new Symbol(0b01011111011100111010100110, 26), // 206
        new Symbol(0b01011111011100111010110000, 26), // 207
        new Symbol(0b01011111011100111000011011, 26), // 208
        new Symbol(0b01011111011100111001010001, 26), // 209
        new Symbol(0b01011111011100111001010000, 26), // 210
        new Symbol(0b01011111011100111000011000, 26), // 211
        new Symbol(0b01011111011100111001110011, 26), // 212
        new Symbol(0b01011111011100111010100011, 26), // 213
        new Symbol(0b01011111011100111010100010, 26), // 214
        new Symbol(0b01011111011100111000011110, 26), // 215
        new Symbol(0b01011111011100111010100001, 26), // 216
        new Symbol(0b01011111011100111000111111, 26), // 217
        new Symbol(0b01011111011100111000111110, 26), // 218
        new Symbol(0b01011111011100111000111000, 26), // 219
        new Symbol(0b01011111011100111010100101, 26), // 220
        new Symbol(0b01011111011100111000010011, 26), // 221
        new Symbol(0b01011111011100111000010010, 26), // 222
        new Symbol(0b01011111011100111000111100, 26), // 223
        new Symbol(0b01011111011100111000110101, 26), // 224
        new Symbol(0b01011111011100111000010001, 26), // 225
        new Symbol(0b01011111011100111000010000, 26), // 226
        new Symbol(0b01011111011100111010101110, 26), // 227
        new Symbol(0b01011111011100111000111011, 26), // 228
        new Symbol(0b01011111011100111010101011, 26), // 229
        new Symbol(0b01011111011100111010101010, 26), // 230
        new Symbol(0b01011111011100111000110110, 26), // 231
        new Symbol(0b01011111011100111010101001, 26), // 232
        new Symbol(0b01011111011100111001101111, 26), // 233
        new Symbol(0b01011111011100111001101110, 26), // 234
        new Symbol(0b01011111011100111000110010, 26), // 235
        new Symbol(0b01011111011100111010101101, 26), // 236
        new Symbol(0b01011111011100111000110001, 26), // 237
        new Symbol(0b01011111011100111000110000, 26), // 238
        new Symbol(0b01011111011100111001101100, 26), // 239
        new Symbol(0b01011111011100111001101001, 26), // 240
        new Symbol(0b01011111011100111000101111, 26), // 241
        new Symbol(0b01011111011100111000101110, 26), // 242
        new Symbol(0b01011111011100111000101100, 26), // 243
        new Symbol(0b01011111011100111001101011, 26), // 244
        new Symbol(0b01011111011100111001100111, 26), // 245
        new Symbol(0b01011111011100111001100110, 26), // 246
        new Symbol(0b01011111011100111001100100, 26), // 247
        new Symbol(0b01011111011100111001001111, 26), // 248
        new Symbol(0b01011111011100111000101011, 26), // 249
        new Symbol(0b01011111011100111001001001, 26), // 250
        new Symbol(0b01011111011100111000101001, 26), // 251
        new Symbol(0b01011111011100111000101000, 26), // 252
        new Symbol(0b11011100011100011010110110, 26), // 253
        new Symbol(0b110111000111000110101101111, 27), // 254
        new Symbol(0b110111000111000110101101110, 27), // 255
    };

    private static final Node ROOT = buildTree(0, 0);
}
