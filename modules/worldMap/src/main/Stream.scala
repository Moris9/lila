package lila.worldMap

import akka.actor._
import com.google.common.cache.LoadingCache
import com.sanoma.cda.geoip.{ MaxMindIpGeo, IpLocation }
import lila.hub.actorApi.round.SocketEvent
import play.api.libs.iteratee._
import play.api.libs.json._
import scala.concurrent.duration._

import lila.rating.PerfType

private final class Stream(
    geoIp: MaxMindIpGeo,
    geoIpCacheTtl: Duration) extends Actor {

  import Stream.gameWriter

  override def preStart() {
    context.system.lilaBus.subscribe(self, 'roundDoor)
  }

  val games = scala.collection.mutable.Map.empty[String, Stream.Game]

  val ips =
    List("31.37.30.208", "62.129.6.2", "109.24.166.168", "62.129.6.2", "109.24.166.168", "93.2.72.83", "93.2.72.83", "62.129.6.2", "209.141.138.167", "62.129.6.2", "177.21.101.151", "62.129.6.2", "58.107.225.215", "109.24.166.168", "62.129.6.2", "62.129.6.2", "62.129.6.2", "177.19.74.106", "41.142.99.133", "88.122.168.130", "37.160.4.18", "109.24.166.168", "58.107.225.69", "62.129.6.2", "177.158.175.244", "88.184.4.183", "177.21.101.226", "109.24.166.168", "60.242.16.37", "109.24.166.168", "122.108.140.228", "109.24.166.168", "88.184.4.183", "58.107.233.63", "216.58.58.56", "109.24.166.168", "41.140.91.160", "216.58.58.56", "135.0.154.66", "109.24.166.168", "109.24.166.168", "37.218.171.237", "58.107.241.144", "187.40.154.170", "109.24.166.168", "109.24.166.168", "88.184.4.183", "109.24.166.168", "109.24.166.168", "88.122.168.130", "177.21.101.151", "62.129.6.2", "82.242.133.237", "41.140.80.251", "220.239.190.247", "82.247.11.49", "109.24.166.168", "62.129.6.2", "109.24.166.168", "62.129.6.2", "58.107.251.186", "109.24.166.168", "109.24.166.168", "58.107.250.187", "122.108.137.120", "109.24.166.168", "109.24.166.168", "122.108.135.245", "109.24.166.168", "62.129.6.2", "62.129.6.2", "109.24.166.168", "62.129.1.150", "58.107.237.219", "58.107.251.186", "88.184.4.183", "109.24.166.168", "62.129.6.2", "125.253.49.130", "209.141.138.167", "122.108.137.120", "109.24.166.168", "109.24.166.168", "58.107.247.107", "62.129.6.2", "122.108.137.120", "62.129.6.2", "49.181.136.30", "109.24.166.168", "58.107.250.187", "88.184.4.183", "125.255.162.254", "109.24.166.168", "62.129.6.2", "62.129.6.2", "31.37.30.208", "109.24.166.168", "37.161.63.173", "125.253.49.130", "62.129.6.2", "125.253.49.130", "62.129.6.2", "58.107.235.69", "78.244.125.234", "58.107.251.186", "62.129.1.150", "88.184.4.183", "122.108.138.178", "37.162.53.77", "109.24.166.168", "60.242.16.37", "62.129.6.2", "62.129.6.2", "109.24.166.168", "109.24.166.168", "109.24.166.168", "62.129.6.2", "88.122.168.130", "109.24.166.168", "209.141.138.167", "62.129.6.2", "122.108.138.178", "62.129.6.2", "109.24.166.168", "79.81.250.122", "88.184.4.183", "109.24.166.168", "58.107.250.187", "58.107.247.107", "58.107.251.186", "31.37.30.208", "88.122.168.130", "125.255.162.254", "88.184.4.183", "62.129.6.2", "31.37.30.208", "209.141.138.167", "37.163.179.115", "41.140.78.14", "58.107.230.85", "122.108.134.105", "216.58.58.56", "58.107.248.197", "62.129.6.2", "109.24.166.168", "62.129.6.2", "177.55.241.56", "109.24.166.168", "109.24.166.168", "62.129.6.2", "109.24.166.168", "216.58.58.56", "49.181.139.201", "109.24.166.168", "109.24.166.168", "95.6.28.61", "115.64.76.89", "109.24.166.168", "109.24.166.168", "62.129.6.2", "58.107.251.186", "216.58.58.56", "60.242.16.37", "177.98.169.193", "216.58.58.56", "135.0.154.66", "90.63.135.91", "216.58.58.56", "58.107.250.128", "216.58.58.56", "177.21.97.50", "62.129.6.2", "216.58.58.56", "216.58.58.56", "88.250.52.219", "58.107.225.69", "109.24.166.168", "58.107.235.33", "109.24.166.168", "109.24.166.168", "58.107.235.69", "177.21.101.151", "216.58.58.56", "109.24.166.168", "216.58.58.56", "37.163.36.115", "153.107.97.153", "62.129.6.2", "62.129.6.2", "216.58.58.56", "93.2.72.83", "216.58.58.56", "93.2.72.83", "216.58.58.56", "88.184.4.183", "177.21.101.151", "129.94.158.10", "200.186.74.178", "31.37.30.208", "216.58.58.56", "135.0.154.169", "37.165.62.15", "88.184.4.183", "122.108.139.72", "122.108.138.178", "91.188.153.29", "122.108.137.120", "177.21.101.151", "135.0.154.66", "195.114.249.2", "109.24.166.168", "88.184.4.183", "78.244.125.234", "216.58.58.56", "80.12.59.84", "135.0.154.66", "216.58.58.56", "62.129.6.2", "216.58.58.56", "109.24.166.168", "88.184.4.183", "216.58.58.56", "88.184.4.183", "95.6.28.61", "216.58.58.56", "135.0.154.66", "192.168.0.10", "62.129.6.2", "122.108.134.105", "216.58.58.56", "216.58.58.56", "216.58.58.56", "88.184.4.183", "62.129.6.2", "58.107.231.116", "62.129.6.2", "58.107.250.187", "122.108.134.201", "41.248.63.182", "122.108.130.72", "109.24.166.168", "62.129.6.2", "109.24.166.168", "109.24.166.168", "62.129.6.2", "216.58.58.56", "109.24.166.168", "88.250.52.219", "109.24.166.168", "216.58.58.56", "88.184.4.183", "91.121.89.85", "88.122.168.130", "216.58.58.56", "216.58.58.56", "216.58.58.56", "135.0.154.66", "90.84.144.177", "58.107.229.201", "88.184.4.183", "58.107.231.116", "37.162.81.198", "62.129.6.2", "49.181.17.227", "122.108.129.132", "122.108.129.132", "135.0.154.66", "62.129.6.2", "109.24.166.168", "58.107.250.187", "58.107.245.184", "216.58.58.56", "82.228.49.145", "58.107.235.69", "177.97.116.243", "135.0.154.66", "58.107.250.187", "62.129.6.2", "58.107.251.186", "216.58.58.56", "91.121.89.85", "216.58.58.56", "88.184.4.183", "62.129.6.2", "135.0.154.66", "122.108.141.30", "109.24.166.168", "216.58.58.56", "216.58.58.56", "58.107.248.197", "216.58.58.56", "122.108.130.72", "88.184.4.183", "216.58.58.56", "58.107.248.197", "153.107.33.155", "58.107.231.116", "58.107.235.69", "109.24.166.168", "88.184.4.183", "122.108.130.15")

  def receive = {
    case SocketEvent.OwnerJoin(id, color, ip) =>
      // ipCache get ip foreach { point =>
      ipCache get scala.util.Random.shuffle(ips).head foreach { point =>
        val game = games get id match {
          case Some(game) => game withPoint point
          case None       => Stream.Game(id, List(point))
        }
        games += (id -> game)
        channel push Stream.Event.Add(game)
      }
    case SocketEvent.Stop(id) =>
      games -= id
      channel push Stream.Event.Remove(id)
    case Stream.Get => sender ! {
      Enumerator enumerate games.values.map(gameWriter.writes) andThen producer
    }
  }

  val (enumerator, channel) = Concurrent.broadcast[Stream.Event]

  val producer = enumerator &> Enumeratee.map[Stream.Event].apply[JsValue] {
    case Stream.Event.Add(game)  => Json toJson game
    case Stream.Event.Remove(id) => Json.obj("id" -> id)
  }

  val ipCache = lila.memo.Builder.cache(geoIpCacheTtl, ipToPoint)
  def ipToPoint(ip: String): Option[Stream.Point] =
    geoIp getLocation ip flatMap Location.apply map { loc =>
      Stream.Point(loc.lat, loc.lon)
    }
}

object Stream {

  case object Get

  case class Game(
      id: String,
      points: List[Point]) {

    def withPoint(point: Point) =
      if (points contains point) this
      else copy(points = point :: points.take(1))
  }

  private implicit def gameWriter: Writes[Game] = Writes { game =>
    Json.obj(
      "id" -> game.id,
      "ps" -> Json.toJson {
        game.points.map { p =>
          List(p.lat, p.lon)
        }
      }
    )
  }

  case class Point(lat: Double, lon: Double)

  sealed trait Event
  object Event {
    case class Add(game: Game) extends Event
    case class Remove(id: String) extends Event
  }

}
