# Lobby
GET   /                                controllers.Lobby.home
GET   /lobby/socket                    controllers.Lobby.socket
GET   /timeline                        controllers.Lobby.timeline
GET   /timeline/more                   controllers.Lobby.timelineMore

# TV
GET   /tv                              controllers.Tv.index

# Relation
POST  /rel/follow/:userId              controllers.Relation.follow(userId: String)
POST  /rel/unfollow/:userId            controllers.Relation.unfollow(userId: String)
POST  /rel/block/:userId               controllers.Relation.block(userId: String)
POST  /rel/unblock/:userId             controllers.Relation.unblock(userId: String)
GET   /@/:username/following           controllers.Relation.following(username: String)
GET   /@/:username/followers           controllers.Relation.followers(username: String)
GET   /@/:username/suggestions         controllers.Relation.suggest(username: String)

# User
GET   /@/:username/opponents           controllers.User.opponents(username: String)
POST  /@/:username/export              controllers.User.export(username: String)
GET   /@/:username/mod                 controllers.User.mod(username: String)
GET   /@/:username/mini                controllers.User.showMini(username: String)
GET   /@/:username/:filterName         controllers.User.showFilter(username: String, filterName: String, page: Int ?= 1)
GET   /@/:username                     controllers.User.show(username: String)

GET   /people                          controllers.User.list(page: Int ?= 1)
GET   /people/online                   controllers.User.online
GET   /people/autocomplete             controllers.User.autocomplete

# Account
GET   /account/passwd                  controllers.Account.passwd
POST  /account/passwd                  controllers.Account.passwdApply
GET   /account/close                   controllers.Account.close
POST  /account/closeConfirm            controllers.Account.closeConfirm
GET   /account/profile                 controllers.Account.profile
POST  /account/profile                 controllers.Account.profileApply

#Site
GET   /socket             controllers.Main.websocket

# Game
GET   /games              controllers.Game.realtime
GET   /games/all          controllers.Game.all(page: Int ?= 1)
GET   /games/checkmate    controllers.Game.checkmate(page: Int ?= 1)
GET   /games/bookmark     controllers.Game.bookmark(page: Int ?= 1)
GET   /games/popular      controllers.Game.popular(page: Int ?= 1)
GET   /games/analysed     controllers.Game.analysed(page: Int ?= 1)
GET   /games/imported     controllers.Game.imported(page: Int ?= 1)

# Search
GET   /games/search       controllers.Game.search(page: Int ?= 1)

# Round
GET   /$gameId<[\w\-]{8}>                            controllers.Round.watcher(gameId: String, color: String = "white")
GET   /$gameId<[\w\-]{8}>/$color<white|black>        controllers.Round.watcher(gameId: String, color: String)
GET   /$fullId<[\w\-]{12}>                           controllers.Round.player(fullId: String)
GET   /$gameId<[\w\-]{8}>/$color<white|black>/socket controllers.Round.websocketWatcher(gameId: String, color: String)
GET   /$gameId<[\w\-]{8}>/s.js                       controllers.Round.signedJs(gameId: String)
GET   /$fullId<[\w\-]{12}>/socket                    controllers.Round.websocketPlayer(fullId: String)
GET   /$gameId<[\w\-]{8}>/$color<white|black>/table  controllers.Round.tableWatcher(gameId: String, color: String)
GET   /$fullId<[\w\-]{12}>/table                     controllers.Round.tablePlayer(fullId: String)
GET   /$gameId<[\w\-]{8}>/$color<white|black>/end    controllers.Round.endWatcher(gameId: String, color: String)
GET   /$fullId<[\w\-]{12}>/end                       controllers.Round.endPlayer(fullId: String)
GET   /$gameId<[\w\-]{8}>/continue/:mode             controllers.Round.continue(gameId: String, mode: String)
GET   /$gameId<[\w\-]{8}>/edit                       controllers.Editor.game(gameId: String)

# Tournament
GET   /tournament                             controllers.Tournament.home
GET   /tournament/reload                      controllers.Tournament.homeReload
GET   /tournament/new                         controllers.Tournament.form
POST  /tournament/new                         controllers.Tournament.create
GET   /tournament/$id<[\w\-]{8}>              controllers.Tournament.show(id: String)
GET   /tournament/$id<[\w\-]{8}>/socket       controllers.Tournament.websocket(id: String)
POST  /tournament/$id<[\w\-]{8}>/join         controllers.Tournament.join(id: String)
GET   /tournament/$id<[\w\-]{8}>/join/password controllers.Tournament.joinPasswordForm(id: String)
POST  /tournament/$id<[\w\-]{8}>/join/password controllers.Tournament.joinPassword(id: String)
POST  /tournament/$id<[\w\-]{8}>/withdraw     controllers.Tournament.withdraw(id: String)
GET   /tournament/$id<[\w\-]{8}>/reload       controllers.Tournament.reload(id: String)
POST  /tournament/$id<[\w\-]{8}>/early-start  controllers.Tournament.earlyStart(id: String)
GET   /tournament/faq                         controllers.Tournament.faq

# Team
GET   /team                                   controllers.Team.home(page: Int ?= 1)
GET   /team/new                               controllers.Team.form
POST  /team/new                               controllers.Team.create
GET   /team/me                                controllers.Team.mine
GET   /team/requests                          controllers.Team.requests
GET   /team/search                            controllers.Team.search(text: String ?= "", page: Int ?= 1)
GET   /team/:id                               controllers.Team.show(id: String, page: Int ?= 1)
GET   /team/:id/join                          controllers.Team.joinPage(id: String)
POST  /team/:id/join                          controllers.Team.join(id: String)
POST  /team/:id/quit                          controllers.Team.quit(id: String)
GET   /team/:id/request/new                   controllers.Team.requestForm(id: String)
POST  /team/:id/request/new                   controllers.Team.requestCreate(id: String)
POST  /team/:id/request/process               controllers.Team.requestProcess(id: String)
GET   /team/:id/edit                          controllers.Team.edit(id: String)
POST  /team/:id/edit                          controllers.Team.update(id: String)
GET   /team/:id/kick                          controllers.Team.kickForm(id: String)
POST  /team/:id/kick                          controllers.Team.kick(id: String)

# Analyse
GET   /analyse/$gameId<[\w\-]{8}>        controllers.Analyse.replay(gameId: String, color: String = "white")
GET   /analyse/$gameId<[\w\-]{8}>/$color<white|black> controllers.Analyse.replay(gameId: String, color: String)
POST  /analyse/$gameId<[\w\-]{8}>/$color<white|black>/computer controllers.Analyse.computer(gameId: String, color: String)
GET   /$gameId<[\w\-]{8}>/stats          controllers.Analyse.stats(gameId: String)
GET   /$gameId<[\w\-]{8}>/pgn            controllers.Analyse.pgn(gameId: String)
GET   /$gameId<[\w\-]{8}>/fen            controllers.Analyse.fen(gameId: String)

# Pref
POST  /pref/:name                      controllers.Pref.set(name: String)
GET   /account/preferences             controllers.Pref.form
POST  /account/preferences             controllers.Pref.formApply

# Setup
GET   /setup/ai                        controllers.Setup.aiForm
POST  /setup/ai                        controllers.Setup.ai
GET   /setup/friend                    controllers.Setup.friendForm(username: Option[String] ?= None)
POST  /setup/friend                    controllers.Setup.friend(username: Option[String] ?= None)
POST  /setup/decline                   controllers.Setup.decline(gameId: String)
GET   /$fullId<[\w\-]{12}>/await       controllers.Setup.await(fullId: String, username: Option[String] ?= None)
GET   /$fullId<[\w\-]{12}>/cancel      controllers.Setup.cancel(fullId: String)
POST  /$id<[\w\-]{8}>/join             controllers.Setup.join(id: String)
GET   /setup/hook                      controllers.Setup.hookForm
POST  /setup/hook/:uid                 controllers.Setup.hook(uid: String)
GET   /setup/filter                    controllers.Setup.filterForm
POST  /setup/filter                    controllers.Setup.filter
GET   /setup/validate-fen              controllers.Setup.validateFen
POST  /api/game/new                    controllers.Setup.api

# I18n
GET   /translation/contribute          controllers.I18n.contribute
GET   /translation/form/:lang          controllers.I18n.translationForm(lang: String)
POST  /translation/form/:lang          controllers.I18n.translationPost(lang: String)
GET   /translation/fetch/:from         controllers.I18n.fetch(from: Int)
POST  /translation/hideCalls           controllers.I18n.hideCalls

# Authentication
GET   /login                           controllers.Auth.login
POST  /login                           controllers.Auth.authenticate
GET   /logout                          controllers.Auth.logout
GET   /signup                          controllers.Auth.signup
POST  /signup                          controllers.Auth.signupPost
POST  /new-password                    controllers.Auth.newPassword

# Mod
POST  /mod/:username/engine            controllers.Mod.engine(username: String)
POST  /mod/:username/troll             controllers.Mod.troll(username: String)
POST  /mod/:username/ban               controllers.Mod.ban(username: String)
POST  /mod/:username/reopen            controllers.Mod.reopenAccount(username: String)
POST  /mod/:ip/ipban                   controllers.Mod.ipban(ip: String)
GET   /mod/log                         controllers.Mod.log

# Wiki
GET   /wiki                            controllers.Wiki.home
GET   /wiki/:slug                      controllers.Wiki.show(slug: String)

# AI
GET   /ai/stockfish/play               controllers.Ai.playStockfish
GET   /ai/stockfish/analyse            controllers.Ai.analyseStockfish
GET   /ai/stockfish/load               controllers.Ai.loadStockfish

# Bookmark
POST   /bookmark/$gameId<[\w\-]{8}>    controllers.Bookmark.toggle(gameId: String)

# Forum
GET   /forum                           controllers.ForumCateg.index
GET   /forum/recent                    controllers.ForumPost.recent
GET   /forum/search                    controllers.ForumPost.search(text: String ?= "", page: Int ?= 1)
GET   /forum/:slug                     controllers.ForumCateg.show(slug: String, page: Int ?= 1)
GET   /forum/:categSlug/form           controllers.ForumTopic.form(categSlug: String)
POST  /forum/:categSlug/new            controllers.ForumTopic.create(categSlug: String)
GET   /forum/:categSlug/:slug          controllers.ForumTopic.show(categSlug: String, slug: String, page: Int ?= 1)
POST  /forum/:categSlug/:slug/close    controllers.ForumTopic.close(categSlug: String, slug: String)
POST  /forum/:categSlug/:slug/new      controllers.ForumPost.create(categSlug: String, slug: String, page: Int ?= 1)
POST  /forum/:categSlug/delete/:id     controllers.ForumPost.delete(categSlug: String, id: String)
GET   /forum/redirect/post/:id         controllers.ForumPost.redirect(id: String)

# Message
GET   /inbox                           controllers.Message.inbox(page: Int ?= 1)
GET   /inbox/new                       controllers.Message.form
POST  /inbox/new                       controllers.Message.create
GET   /inbox/preview                   controllers.Message.preview
GET   /inbox/$id<[\w]{8}>              controllers.Message.thread(id: String)
POST  /inbox/$id<[\w]{8}>              controllers.Message.answer(id: String)
POST  /inbox/$id<[\w]{8}>/delete       controllers.Message.delete(id: String)

# Notification
DELETE /notification/$id<[\w]{8}>      controllers.Notification.remove(id)

# Paste
GET   /paste                           controllers.Importer.importGame
POST  /paste                           controllers.Importer.sendGame

# Edit
GET   /editor                          controllers.Editor.index(fen: String = "")
GET   /editor/*fen                     controllers.Editor.index(fen: String)

# Monitor
GET   /monitor                         controllers.Monitor.index
GET   /monitor/socket                  controllers.Monitor.websocket
GET   /monitor/status                  controllers.Monitor.status

# Report
GET   /report                          controllers.Report.form
POST  /report                          controllers.Report.create
GET   /report/thanks                   controllers.Report.thanks
GET   /report/list                     controllers.Report.list
POST  /report/:id/process              controllers.Report.process(id: String)

# API
GET   /api/user/:id                    controllers.Api.user(id: String)

# Misc
POST  /cli                             controllers.Cli.command
GET   /captcha/$id<[\w]{8}>            controllers.Main.captchaCheck(id: String)
GET   /developers                      controllers.Main.developers
GET   /embed                           controllers.Main.embed
GET   /stream                          controllers.Main.stream

# Assets
GET   /assets/*file                    controllers.Assets.at(path="/public", file)
