# App Public API
GET   /ping                             lila.controllers.AppXhrC.ping
GET   /sync/:gameId/:color/:version     lila.controllers.AppXhrC.syncPublic(gameId: String, color: String, version: Int)
GET   /sync/:gameId/:color/:version/:fullId lila.controllers.AppXhrC.sync(gameId: String, color: String, version: Int, fullId: String)
GET   /how-many-players-now             lila.controllers.AppXhrC.nbPlayers
GET   /how-many-games-now               lila.controllers.AppXhrC.nbGames
POST  /move/:fullId                     lila.controllers.AppXhrC.move(fullId: String)
GET   /abort/:fullId                    lila.controllers.AppXhrC.abort(fullId: String)
GET   /resign/:fullId                   lila.controllers.AppXhrC.resign(fullId: String)
GET   /resign-force/:fullId             lila.controllers.AppXhrC.forceResign(fullId: String)
GET   /draw-claim/:fullId               lila.controllers.AppXhrC.drawClaim(fullId: String)
POST  /outoftime/:fullId                lila.controllers.AppXhrC.outoftime(fullId: String)
GET   /draw-accept/:fullId              lila.controllers.AppXhrC.drawAccept(fullId: String)
GET   /draw-offer/:fullId               lila.controllers.AppXhrC.drawOffer(fullId: String)
GET   /draw-cancel/:fullId              lila.controllers.AppXhrC.drawCancel(fullId: String)
GET   /draw-decline/:fullId             lila.controllers.AppXhrC.drawDecline(fullId: String)
POST  /talk/:fullId                     lila.controllers.AppXhrC.talk(fullId: String)
POST  /moretime/:fullId                 lila.controllers.AppXhrC.moretime(fullId: String)

GET   /ai                               lila.controllers.AiC.run

# App Private API
GET   /api/show/:fullId            lila.controllers.AppApiC.show(fullId: String)
POST  /api/start/:gameId           lila.controllers.AppApiC.start(gameId: String)
POST  /api/join/:fullId            lila.controllers.AppApiC.join(fullId: String)
POST  /api/reload-table/:gameId    lila.controllers.AppApiC.reloadTable(gameId: String)
POST  /api/rematch-accept/:gameId/:color/:newGameId  lila.controllers.AppApiC.rematchAccept(gameId: String, color: String, newGameId: String)
POST  /api/alive/:gameId/:color    lila.controllers.AppApiC.alive(gameId: String, color: String)
GET   /api/activity/:gameId/:color lila.controllers.AppApiC.activity(gameId: String, color: String)
GET   /api/player-version/:gameId/:color lila.controllers.AppApiC.playerVersion(gameId: String, color: String)
GET   /api/nb-players               lila.controllers.AppXhrC.nbPlayers
POST  /api/outoftime/:fullId        lila.controllers.AppXhrC.outoftime(fullId: String)

# Lobby Public API
GET   /lobby/cancel/:ownerId        lila.controllers.LobbyC.cancel(ownerId: String)
GET   /lobby/socket/:uid      			lila.controllers.LobbyC.socket(uid: String)
GET   /lobby/socket/:uid/:hook      lila.controllers.LobbyC.socketHook(uid: String, hook: String)

# Lobby Private API
POST  /api/lobby/join/:gameId/:color lila.controllers.LobbyC.join(gameId: String, color: String)
GET   /api/lobby/preload            lila.controllers.LobbyC.preload
POST  /api/lobby/create/:hookOwnerId lila.controllers.LobbyC.create(hookOwnerId: String)

# Useless, but play2 needs it
GET   /assets/*file                 controllers.Assets.at(path="/public", file)
