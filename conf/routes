# Wiki
# GET   /wiki                            controllers.Wiki.home
# GET   /wiki/:slug                      controllers.Wiki.show(slug: String)

# Lobby
GET   /                                controllers.Lobby.home

# User
# POST  /@/:username/export              controllers.User.export(username: String)
# GET   /@/:username/:filterName         controllers.User.showFilter(username: String, filterName: String, page: Int ?= 1)
GET   /@/:username                     controllers.User.show(username: String)
GET   /people                          controllers.User.list(page: Int ?= 1)
GET   /people/autocomplete             controllers.User.autocomplete
# GET   /people/online                   controllers.User.online
# GET   /account/bio                     controllers.User.getBio
# PUT   /account/bio.json                controllers.User.setBio
# GET   /account/passwd                  controllers.User.passwd
# POST  /account/passwd                  controllers.User.passwdApply
# GET   /account/close                   controllers.User.close
# POST  /account/closeConfirm            controllers.User.closeConfirm

#Site
GET   /socket             controllers.Main.websocket

# Game
GET   /games              controllers.Game.realtime
GET   /games/all          controllers.Game.all(page: Int ?= 1)
GET   /games/checkmate    controllers.Game.checkmate(page: Int ?= 1)
GET   /games/bookmark     controllers.Game.bookmark(page: Int ?= 1)
GET   /games/popular      controllers.Game.popular(page: Int ?= 1)
GET   /games/analysed     controllers.Game.analysed(page: Int ?= 1)
GET   /games/imported     controllers.Game.imported(page: Int ?= 1)
 
# Search
GET   /games/search       controllers.Search.form(page: Int ?= 1)
 
# Round
GET   /$gameId<[\w\-]{8}>                            controllers.Round.watcher(gameId: String, color: String = "white")
GET   /$gameId<[\w\-]{8}>/$color<white|black>        controllers.Round.watcher(gameId: String, color: String)
GET   /$fullId<[\w\-]{12}>                           controllers.Round.player(fullId: String)
GET   /$gameId<[\w\-]{8}>/$color<white|black>/socket controllers.Round.websocketWatcher(gameId: String, color: String)
GET   /$gameId<[\w\-]{8}>/s.js                       controllers.Round.signedJs(gameId: String)
GET   /$fullId<[\w\-]{12}>/socket                    controllers.Round.websocketPlayer(fullId: String)
GET   /$fullId<[\w\-]{12}>/abort                     controllers.Round.abort(fullId: String)
GET   /$fullId<[\w\-]{12}>/resign                    controllers.Round.resign(fullId: String)
GET   /$fullId<[\w\-]{12}>/resign/force              controllers.Round.resignForce(fullId: String)
GET   /$fullId<[\w\-]{12}>/draw/claim                controllers.Round.drawClaim(fullId: String)
GET   /$fullId<[\w\-]{12}>/draw/accept               controllers.Round.drawAccept(fullId: String)
GET   /$fullId<[\w\-]{12}>/draw/offer                controllers.Round.drawOffer(fullId: String)
GET   /$fullId<[\w\-]{12}>/draw/cancel               controllers.Round.drawCancel(fullId: String)
GET   /$fullId<[\w\-]{12}>/draw/decline              controllers.Round.drawDecline(fullId: String)
GET   /$fullId<[\w\-]{12}>/rematch                   controllers.Round.rematch(fullId: String)
GET   /$fullId<[\w\-]{12}>/rematch/cancel            controllers.Round.rematchCancel(fullId: String)
GET   /$fullId<[\w\-]{12}>/rematch/decline           controllers.Round.rematchDecline(fullId: String)
GET   /$fullId<[\w\-]{12}>/takeback/accept           controllers.Round.takebackAccept(fullId: String)
GET   /$fullId<[\w\-]{12}>/takeback/offer            controllers.Round.takebackOffer(fullId: String)
GET   /$fullId<[\w\-]{12}>/takeback/cancel           controllers.Round.takebackCancel(fullId: String)
GET   /$fullId<[\w\-]{12}>/takeback/decline          controllers.Round.takebackDecline(fullId: String)
GET   /$gameId<[\w\-]{8}>/$color<white|black>/table  controllers.Round.tableWatcher(gameId: String, color: String)
GET   /$fullId<[\w\-]{12}>/table                     controllers.Round.tablePlayer(fullId: String)
GET   /$gameId<[\w\-]{8}>/players                    controllers.Round.players(gameId: String)
 
# Tournament
# GET   /tournament                             controllers.Tournament.home 
# GET   /tournament/reload                      controllers.Tournament.homeReload
# GET   /tournament/new                         controllers.Tournament.form
# POST  /tournament/new                         controllers.Tournament.create
GET   /tournament/$id<[\w\-]{8}>              controllers.Tournament.show(id: String) 
# GET   /tournament/$id<[\w\-]{8}>/socket       controllers.Tournament.websocket(id: String)
# POST  /tournament/$id<[\w\-]{8}>/join         controllers.Tournament.join(id: String)
# POST  /tournament/$id<[\w\-]{8}>/withdraw     controllers.Tournament.withdraw(id: String)
# GET   /tournament/$id<[\w\-]{8}>/reload       controllers.Tournament.reload(id: String)
# GET   /tournament/faq                         controllers.Tournament.faq 
 
# Team
GET   /team                                   controllers.Team.home(page: Int ?= 1)
GET   /team/new                               controllers.Team.form
POST  /team/new                               controllers.Team.create
GET   /team/me                                controllers.Team.mine
GET   /team/requests                          controllers.Team.requests
GET   /team/search                            controllers.Team.search(text: String ?= "", page: Int ?= 1)
GET   /team/:id                               controllers.Team.show(id: String, page: Int ?= 1)
GET   /team/:id/join                          controllers.Team.joinPage(id: String)
POST  /team/:id/join                          controllers.Team.join(id: String)
POST  /team/:id/quit                          controllers.Team.quit(id: String)
GET   /team/:id/request/new                   controllers.Team.requestForm(id: String)
POST  /team/:id/request/new                   controllers.Team.requestCreate(id: String)
POST  /team/:id/request/process               controllers.Team.requestProcess(id: String)
GET   /team/:id/edit                          controllers.Team.edit(id: String)
POST  /team/:id/edit                          controllers.Team.update(id: String)
GET   /team/:id/kick                          controllers.Team.kickForm(id: String)
POST  /team/:id/kick                          controllers.Team.kick(id: String)

# Analyse
GET   /analyse/$gameId<[\w\-]{8}>        controllers.Analyse.replay(gameId: String, color: String = "white")
GET   /analyse/$gameId<[\w\-]{8}>/$color<white|black> controllers.Analyse.replay(gameId: String, color: String)
POST  /analyse/$gameId<[\w\-]{8}>/$color<white|black>/computer controllers.Analyse.computer(gameId: String, color: String)
GET   /$gameId<[\w\-]{8}>/stats          controllers.Analyse.stats(gameId: String)
GET   /$gameId<[\w\-]{8}>/pgn            controllers.Analyse.pgn(gameId: String)
 
# Setting
POST  /setting/:name                   controllers.Setting.set(name: String)
# 
# Setup
# GET   /setup/ai                        controllers.Setup.aiForm
# POST  /setup/ai                        controllers.Setup.ai
# GET   /setup/friend                    controllers.Setup.friendForm
# POST  /setup/friend                    controllers.Setup.friend
# GET   /$fullId<[\w\-]{12}>/await       controllers.Setup.await(fullId: String)
# GET   /$fullId<[\w\-]{12}>/cancel      controllers.Setup.cancel(fullId: String)
# POST  /$id<[\w\-]{8}>/join             controllers.Setup.join(id: String)
# GET   /setup/hook                      controllers.Setup.hookForm
# POST  /setup/hook                      controllers.Setup.hook
# POST  /api/game/new                    controllers.Setup.api
# 
# I18n
GET   /translation/contribute          controllers.I18n.contribute
# GET   /translation/form/:lang          controllers.I18n.translationForm(lang: String)
# POST  /translation/form/:lang          controllers.I18n.translationPost(lang: String)
# GET   /translation/fetch/:from         controllers.I18n.fetch(from: Int)
# POST  /translation/hideCalls           controllers.I18n.hideCalls
 
# Authentication
GET   /login                           controllers.Auth.login
POST  /login                           controllers.Auth.authenticate
GET   /logout                          controllers.Auth.logout
GET   /signup                          controllers.Auth.signup
POST  /signup                          controllers.Auth.signupPost
 
# Mod
POST  /mod/:username/engine            controllers.Mod.engine(username: String)
POST  /mod/:username/mute              controllers.Mod.mute(username: String)
POST  /mod/:username/ban               controllers.Mod.ban(username: String)
POST  /mod/:ip/ipban                   controllers.Mod.ipban(ip: String)
GET   /mod/log                         controllers.Mod.log
 
# Wiki
GET   /wiki                            controllers.Wiki.home
GET   /wiki/:slug                      controllers.Wiki.show(slug: String)
 
# AI
GET   /ai/stockfish/play               controllers.Ai.playStockfish
GET   /ai/stockfish/analyse            controllers.Ai.analyseStockfish
 
# Lobby
# GET   /                                controllers.Lobby.home
# GET   /new/$ownerId<[\w\-]{12}>        controllers.Lobby.hook(ownerId: String)
# GET   /new/$ownerId<[\w\-]{12}>/cancel controllers.Lobby.cancel(ownerId: String)
# GET   /new/$hookId<[\w\-]{8}>/join     controllers.Lobby.join(hookId: String)
# GET   /lobby/socket                    controllers.Lobby.socket
# GET   /lobby/log                       controllers.Lobby.log
# 
# Bookmark
POST   /bookmark/$gameId<[\w\-]{8}>    controllers.Bookmark.toggle(gameId: String)
 
# Forum
GET   /forum                           controllers.ForumCateg.index
GET   /forum/recent                    controllers.ForumPost.recent
GET   /forum/search                    controllers.ForumPost.search(text: String ?= "", page: Int ?= 1)
GET   /forum/:slug                     controllers.ForumCateg.show(slug: String, page: Int ?= 1)
GET   /forum/:categSlug/form           controllers.ForumTopic.form(categSlug: String)
POST  /forum/:categSlug/new            controllers.ForumTopic.create(categSlug: String)
GET   /forum/:categSlug/:slug          controllers.ForumTopic.show(categSlug: String, slug: String, page: Int ?= 1)
POST  /forum/:categSlug/:slug/new      controllers.ForumPost.create(categSlug: String, slug: String, page: Int ?= 1)
POST  /forum/delete/post/:id           controllers.ForumPost.delete(id: String)
 
# Message
GET   /inbox                           controllers.Message.inbox(page: Int ?= 1)
GET   /inbox/new                       controllers.Message.form
POST  /inbox/new                       controllers.Message.create
GET   /inbox/$id<[\w]{8}>              controllers.Message.thread(id: String)
POST  /inbox/$id<[\w]{8}>              controllers.Message.answer(id: String)
POST  /inbox/$id<[\w]{8}>/delete       controllers.Message.delete(id: String)
 
# Notification
DELETE /notification/$id<[\w]{8}>      controllers.Notification.remove(id)

# Import
GET   /import                          controllers.Importer.importGame
POST  /import                          controllers.Importer.sendGame
 
# Monitor
GET   /monitor                         controllers.Monitor.index
# GET   /monitor/socket                  controllers.Monitor.websocket
# GET   /monitor/players                 controllers.Monitor.nbPlayers
# GET   /monitor/mps                     controllers.Monitor.nbMoves
# GET   /monitor/status                  controllers.Monitor.status

# Misc
POST  /cli                             controllers.Cli.command
GET   /captcha/$id<[\w]{8}>            controllers.Main.captchaCheck(id: String)
GET   /developers                      controllers.Main.developers

# Assets
GET   /assets/*file                    controllers.Assets.at(path="/public", file)
