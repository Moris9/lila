mongo {
  host = "127.0.0.1"
  port = 27017
  dbName = lichess
  collection {
    game = game
    user = user
    hook = hook
    entry = lobby_entry
    message = lobby_room
    history = user_history
    room = room
  }
  connectionsPerHost = 100
  autoConnectRetry = true
  connectTimeout = 15 seconds
  threadsAllowedToBlockForConnectionMultiplier = 500
}
sync {
  duration = 7 seconds
  sleep = 200 milliseconds
}
lobby {
  message.max = 30
  entry.max = 12
  message.lifetime = 20 seconds
}
game {
  message.lifetime = 20 seconds
}
memo {
  watcher.timeout = 6 seconds
  username.timeout = 10 seconds
  hook.timeout = 5 seconds
  finisher_lock.timeout = 30 seconds
}
ai {
  server = false
  use = remote
  crafty {
    exec_path = "/usr/bin/crafty"
    book_path = "/usr/share/crafty"
  }
  remote {
    url = "http://188.165.194.171:9071/ai"
  }
}
moretime {
  seconds = 15 seconds
}

application.secret="CiebwjgIM9cHQ;I?Xk:sfqDJ;BhIe:jsL?r=?IPF[saf>s^r0]?0grUq4>q?5mP^"

application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
global="lila.Global"

evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG
    
akka {
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    loglevel = WARNING
    
    actor {
        
        deployment {

            /actions {
                router = round-robin
                nr-of-instances = 24
            }

            /promises {
                router = round-robin
                nr-of-instances = 24
            }

        }
        
        retrieveBodyParserTimeout = 1 second
        
        actions-dispatcher = {
            fork-join-executor {
                parallelism-factor = 128.0
                parallelism-max = 2048
            }
        }

        promises-dispatcher = {
            fork-join-executor {
                parallelism-factor = 128.0
                parallelism-max = 2048
            }
        }

        websockets-dispatcher = {
            fork-join-executor {
                parallelism-factor = 64.0
                parallelism-max = 1024
            }
        }

        default-dispatcher = {
            fork-join-executor {
                parallelism-factor = 128.0
                parallelism-max = 2048
            }
        }
        
    }
    
}
