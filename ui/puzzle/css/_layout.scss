$mq-col2: $mq-col2-uniboard;
$mq-col3: $mq-col3-uniboard;

@mixin columns-with-gauge-col2($gauge-width) {
  grid-template-columns: $col2-uniboard-width $gauge-width $block-gap $col2-uniboard-table;
}
@mixin columns-with-gauge-col3($gauge-width) {
  grid-template-columns: $col3-uniboard-side $block-gap $col3-uniboard-width $gauge-width $block-gap $col3-uniboard-table;
}

.puzzle {
  grid-area: main;
  display: grid;

  &__side { grid-area: side; }
  &__board { grid-area: board; }
  &__tools { grid-area: tools; }
  &__controls { grid-area: controls; }
  &__history { grid-area: history; }
  .eval-gauge { grid-area: gauge; }

  grid-template-areas:
  'board'
  'controls'
  'tools'
  'history'
  'side';
  grid-row-gap: $block-gap;

  &__moves { display: none; }

  &__board {
    /* Make sure board fits in the viewport. */
    // max-width: calc(100vh - #{$puzzle-history-height} - 2 * #{$block-gap} - #{$site-header-height});
  }
  @include breakpoint($mq-col2) {
    @include columns-with-gauge-col2(0);
    &.gauge-on {
      @include columns-with-gauge-col2($gauge-on-container);
    }
    grid-template-rows: fit-content(0);
    grid-template-areas:
    'board   gauge .    tools'
    'history .     .    controls'
    'side    side  side side';

    &__moves { display: block; }
  }

  @include breakpoint($mq-col3) {
    grid-template-areas:
    'side    . board   gauge . tools'
    '.       . history .     . controls';
    @include columns-with-gauge-col3(0);
    &.gauge-on {
      @include columns-with-gauge-col3($gauge-on-container);
    }
    &__tools {
      // max-height: $board-width;
    }
  }

  @include breakpoint($mq-portrait) {
    &__board {
      /* In portrait single column, make sure both controls and the board fit in the viewport. If they don't, limit the board width */
      width: 100vw;
      max-width: calc(100vh - #{$site-header-height} - #{$col1-uniboard-controls});
    }
  }

  &__side {
    display: grid;
    grid-template-areas:
    'metas'
    'user';
    grid-gap: $block-gap;
    @include breakpoint($mq-x-small) {
      grid-template-columns: 1fr 1fr;
      grid-template-areas:
      'metas user';
    }
    @include breakpoint($mq-x-large) {
      grid-template-columns: 1fr;
      grid-template-rows: min-content;
      grid-template-areas:
      'metas'
      'user';
      justify-self: end;
      min-width: 250px;
      max-width: 350px;
    }
    &__metas { grid-area: metas; }
    &__user { grid-area: user; }
  }
}
